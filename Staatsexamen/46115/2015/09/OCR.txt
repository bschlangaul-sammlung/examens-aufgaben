

Prüfungsteilnehmer Prüfungstermin Einzelprüfungsnummer

Kennzahl:

Kennwort: _ Herbst 46115
2015

Arbeitsplatz-Nr.:

Erste Staatsprüfung für ein Lehramt an öffentlichen Schulen

— Prüfungsaufgaben —

Fach: Informatik (Unterrichtsfach)
Einzelprüfung: Th. Informatik, Algorith./Datenstr.
Anzahl der gestellten Themen (Aufgaben): 2

Anzahl der Druckseiten dieser Vorlage: 9

Bitte wenden!
Herbst 2015 Einzelprüfungsnummer: 46115 Seite: 2

Thema Nr. 1
(Aufgabengruppe)

Es sind alle Aufgaben dieser Aufgabengruppe zu bearbeiten!

Aufgabe 1:

Die Sprache L über dem Alphabet © = {a,b} enthält alle Wörter, die das Wort baab oder das
Wort abba oder beide enthalten. Z.B. ist baababb € L, aber babababa ¢ L.

1. Geben Sie einen regulären Ausdruck für L an.

2. Konstruieren Sie einen nichtdeterministischen endlichen Automaten mit höchstens 8
Zuständen für L.

3. Konstruieren Sie einen deterministischen Automaten für Z mit der Potenzmengenkonstruktion. Sie dürfen sich wie üblich auf die erreichbaren Zustände beschränken.

4. Konstruieren Sie den Minimalautomaten für L. Sie können entweder das übliche Verfahren
anwenden und Ihre Schritte geeignet dokumentieren, oder aber den Minimalautomaten direkt
angeben und geeignet begründen, dass es sich um den richtigen Automaten handelt.

Aufgabe 2:

Beim Postschen Korrespondenzproblem (PCP) ist bekanntlich eine Liste von Paaren
(u1,U1),---, (Un, Un) mit u,v; € X* für ein Alphabet U gegeben. Zum Beispiel (u1,vı) = (b, bab)
und (u2, v2) = (ba, aa) und (ug, v3) = (abb, bb), wobei hier also n = 3 und D = {a,b} sind. Gefragt
ist, ob es eine Indexfolge 71, i2,...,in mit 7, <n gibt, so dass gilt ui,ui, ...Uin = Vi, Vig ---Viy- Im
Beispiel wre 1,3,2,3 solch eine Lésung, also genauer N = 4 und 7; = 1,ig = 3,i3 = 2,14 = 3,
denn es ist hier uyuzuouz = 6 abb ba abb = bab bb aa bb = v1v31213.

Es ist bekannt, dass das PCP ein unentscheidbares Problem ist.

1. Erläutern Sie, was es genau bedeutet, dass das PCP unentscheidbar ist.

2. Begründen Sie, dass das PCP rekursiv aufzählbar ist.

3. Seien jetzt zwei Alphabete A und © sowie Funktionen f,g : A — %* durch ihre Wertetabellen
gegeben, z.B. A = {c,d,e}, © = {a,b} und f(c) = 6b, f(d) = ba, f(e) = abb. Man setzt

diese Funktionen in offensichtlicher Weise (“homomorph”) auf Wörter über A fort, z.B.
f(cede) = bbbaabb.

Zeigen Sie durch Reduktion vom PCP, dass es unentscheidbar ist, festzustellen, ob ein Wort
we At mit f(w) = g(w) existiert.

Fortsetzung nächste Seite!
Herbst 2015 Einzelprüfungsnummer: 46115 Seite: 3

Aufgabe 3:

Eine Folge von Zahlen aı,...,Q„ heiße unimodal, wenn sie bis zu einem bestimmten Punkt echt
ansteigt und dann echt fällt. Zum Beispiel ist die Folge 1,3,5,6,5,2,1 unimodal, die Folgen
1,3,5,4,7,2,1 und 1,2,3,3,4,3,2,1 aber nicht.

1.

Entwerfen Sie einen Algorithmus, der zu (als Array) gegebener unimodaler Folge aı,..., Ar
in Zeit O(logn) das Maximum maxa; berechnet. Ist die Folge nicht unimodal, so kann Ihr
Algorithmus ein beliebiges Ergebnis liefern. Größenvergleiche, arithmetische Operationen und
Arrayzugriffe können wie üblich in konstanter Zeit (O(1)) getätigt werden. Hinweise: binäre
Suche, divide-and-conquer.

2. Begründen Sie, dass Ihr Algorithmus tatsächlich in Zeit O(logn) läuft.

3. Schreiben Sie Ihren Algorithmus in Pseudocode oder in einer Programmiersprache Ihrer Wahl,

z.B. Java, auf. Sie dürfen voraussetzen, dass die Eingabe in Form eines Arrays der Größe n
vorliegt.

. Beschreiben Sie in Worten ein Verfahren, welches in Zeit O(n) feststellt, ob eine vorgelegte

Folge unimodal ist oder nicht.

. Begründen Sie, dass es kein solches Verfahren (Test auf Unimodalität) geben kann, welches

in Zeit O(log n) lauft.
Herbst 2015 Einzelprüfungsnummer: 46115 Seite: 4

Thema Nr. 2
(Aufgabengruppe)

Es sind alle Aufgaben dieser Aufgabengruppe zu bearbeiten!

Aufgabe 1:

“Streuspeicherung“

Fügen Sie die folgenden Werte in der gegebenen Reihenfolge in eine Streutabelle
der Größe 8 (mit den Indizes O0 7) und der Streufunktion h(x) = x mod 8 ein.Verwenden Sie die jeweils angegebene Hash-Variante bzw. Kollisionsauflösung:

15, 3,9, 23, 1,8, 17,4

a) Offenes Hashing: Zur Kollisionsauflésung wird Verkettung verwendet.
Beispiel: Für die beiden Werte 8 und 16 würde die Lösung wie folgt aussehen:

Bucket | Inhalt
0 8-16
1
2

b) Geschlossenes Hashing: Zur Kollisionsauflösung wird lineares Sondieren (nur
hochzählend) mit Schrittweite +5 verwendet. Treten beim Einfügen Kollisionen
auf, dann notieren Sie die Anzahl der Versuche zum Ablegen des Wertes im Subskript (z.B. das Einfügen des Wertes 8 gelingt im 5. Versuch: „8sy').

Beispiel: Für die beiden Werte 8 und 16 würde die Lösung wie folgt aussehen:
Bucket Inhalt
0 8

c) Welches Problem tritt auf, wenn zur Kollisionsauflösung lineares Sondieren mit
Schrittweite 4 verwendet wird? Warum ist 5 eine bessere Wahl?

d) Geben Sie für Ihre Lösungen zu a) und b) jeweils den Lastfaktor an.

e) Gegeben sei eine Streutabelle, in der die gleichen Schlüssel mehrfach enthalten
sein können. Welches der beiden Verfahren aus den Teilaufgaben a) und b) ist in
der Worst-Case-Laufzeit performanter beim Einfügen eines neuen Eintrags? Welches Verfahren ist performanter beim Abrufen des Wertes zu einem Schlüssel?
Begründen Sie kurz Ihre Antworten.

Fortsetzune nächste Seitel
Herbst 2015 Einzelprüfungsnummer: 46115 Seite: 5

Aufgabe 2:
“Abstrakte Datentypen (adt)“

Der Abstrakte Datentyp (adt) aa (AssocialiveArray) entspricht einer Reihung vom
Typ T mit beliebiger Länge und hat folgende Eigenschaften: Der Konstruktor create
instanziiert eine neue leere Reihung. Mit den Methoden get und set kann man die
Elemente nach ganzzahligen (nicht notwendigerweise positiven) Indizes auslesen
bzw. mit einem Wert # null aktualisieren (Aufrufe von set mit null sollen vom adt
„Ignoriert“ werden). delete löscht (falls vorhanden) die Belegung eines Indexes.
Lesende Zugriffe auf unbelegte/gelöschte Indizes liefern null. Die Anzahl der tatsächlich (also mit Wert # null) belegten Indizes kann mit size abgefragt werden.

a) Ergänzen Sie die fehlenden Axiome, um das vorangehend beschriebene Verhalten formal darzustellen:

adt AA

sorts AA, T, int

ops
create: — AA
get: AA x int > T
set: AAxintx T > AA
size: AA > int
delete: AAx int > AA

axs
size(create) =0

get(create, i) = null
delete(create, i) = create

end AA

b) Ergänzen Sie die fehlenden Methoden so, dass die folgende Klasse genau das
Verhalten des obigen adt wiedergibt. Sie dürfen dabei keine anderen Datenstrukturen verwenden, also insbesondere auch keine HashMap aus der Java-API.
public class AA<T> {

private int key;
private T value;
private AA<T> tail;

private AA(int key, T value, AA<T> tail) {
this.key = key;
this.value = value;
this.tail = tail;

}

public static <T> AA<T> create() {
return new AA<T>(@, null, null);
}

// TODO: Code hier ergaenzen

Fortsetzune nachste Seite!
Herbst 2015 Einzelprüfungsnummer: 46115 Seite: 6

Aufgabe 3:
“Bäume %

a) Fügen Sie die Zahlen 83, 85, 67, 72, 69 in der gegebenen Reihenfolge
i) in einen linksvollständigen Binärbaum bzw.
i) in einen binären Suchbaum
ein. Stellen Sie jeweils nur das Endergebnis dar.

b) Fügen Sie 77 in jeden der folgenden AVL-Bäume ein und führen Sie anschlieRend bei Bedarf die erforderliche(n) Rotation(en) aus. ZeichnenSie den Baum zunächst unmittelbar nach dem Einfügen und anschließend im Endzustand nach

den Rotationen.

c) Traversieren Sie den folgenden Baum in der jeweils angegebenen Art (Abstieg
zuerst im linken Teilbaum) und geben Sie dabei die Knoten in der entsprechenden Reihenfolge aus:
i) in-order
il) post-order

d) Löschen Sie den Knoten 70 aus dem folgenden binären Suchbaum und ersetzen
Sie ihn dabei durch einen geeigneten Wert aus dem linken Teilbaum. Zeichnen

Sie nur den Endzustand:

Fortsetzung nächste Seite!
Herbst 2015 Einzelprüfungsnummer: 46115 Seite: 7

Aufgabe 4:
“Formale Verifikation - Induktionsbeweis“

Gegeben sei die folgende Methode £unction:
double function(int n) {
if (n == 1)

return 0.5 * n;
else

return 1.8 / (n * (n + 1)) + function(n - 1);
}

Beweisen Sie folgenden Zusammenhang mittels vollständiger Induktion:

Vn > 1: function (n) = f(n)mit f(n) =1- Br

Hinweis: Eventuelle Rechenungenauigkeiten, wie z. B. in Java, bei der Behandlung von
Fließkommazahlen (z. B. double) sollen beim Beweis nicht berücksichtigt werden — Sie
dürfen also annehmen, Fließkommazahlen würden mathematische Genauigkeit aufweisen.

Fortsetzune nächste Seitel
Herbst 2015 Einzelprüfungsnummer: 46115 Seite: 8

Aufgabe 5:
Sei D = {a,b}, sei INg = {0,1,2,...}.
a) Sei
Lı = {w € D* | w enthält mehr a’s als b’s} .
Beispiele: aba € Lı, bbbaabaabaa € L\,a € Lı.

Zeigen Sie, dass L} kontextfrei ist, indem Sie die Arbeitsweise eines Kellerautomaten beschreiben, der L, akzeptiert.

b) Formulieren Sie das Pumping-Lemma für reguläre Sprachen:
„Sei L eine reguläre Sprache über dem Alphabet %. Dann gibt es...“
c) Zeigen Sie mit Hilfe des Pumping-Lemmas für reguläre Sprachen, dass die Sprache L, nicht
regulär ist.
Aufgabe 6:

a) Sim e IN, = {0,1,2,...}. Definieren Sie formal die Menge H„ der Gödelnummern der
Turing-Maschinen, die gestartet mit m halten.

b) Gegeben sei das folgende Problem E:

- Entscheide, ob es für die deterministische Turing-Maschine M mit der Gödelnummer (M)

mindestens eine Eingabe w € INy gibt, so dass w eine Quadratzahl ist und die Maschine
M gestartet mit w hält.

Zeigen Sie, dass E nicht entscheidbar ist. Benutzen Sie, dass H,„, aus (a) für jedes m € INg
nicht entscheidbar ist.

c) Zeigen Sie, dass das Problem E aus (b) partiell-entscheidbar (= rekursiv aufzählbar) ist.

Fortsetzung nächste Seite!
Herbst 2015 Einzelprüfungsnummer: 46115 Seite: 9

Aufgabe 7:

a) Gegeben sei der folgende nichtdeterministische endliche Automat N:

€ bezeichnet das leere Wort. Konstruieren Sie zu N mit der Potenzmengen-Konstruktion einen
äquivalenten deterministischen endlichen Automaten A. Zeichnen Sie nur die vom Startzustand
erreichbaren Zustände ein, diese aber alle. Die Zustandsnamen von A müssen erkennen lassen,
wie sie zustande gekommen sind. Führen Sie keine „Vereinfachungen“ durch!

Hinweise:

- {go} ist nicht der Startzustand des deterministischen endlichen Automaten.

- In einem deterministischen endlichen Automaten darf es keine e-Übergänge geben, und
es muss an jedem Zustand für jedes Zeichen einen Übergang geben.

b) Geben Sie einen regulären Ausdruck «{N) für die Sprache, die der nichtdeterministische endliche Automat N aus (a) akzeptiert, an.

c) Beweisen oder widerlegen Sie die folgende Behauptung.

Beh.: Es gibt reguläre Sprachen L, die mindestens eine echte Teilmenge U enthalten, so dass
U nicht regular ist.
