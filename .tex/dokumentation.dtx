% \iffalse meta-comment
%<*internal>
\iffalse
%</internal>
%<*internal>
\fi
\def\nameofplainTeX{plain}
\ifx\fmtname\nameofplainTeX\else
  \expandafter\begingroup
\fi
%</internal>
%<*install>
\input docstrip.tex
\keepsilent
\askforoverwritefalse
\usedir{tex/latex/test}
\generate{
  \file{\jobname.sty}{\from{\jobname.dtx}{package}}
}
%</install>
%<install>\endbatchfile
%<*internal>
\usedir{source/latex/test}
\generate{
  \file{\jobname.ins}{\from{\jobname.dtx}{install}}
}
\nopreamble\nopostamble
\usedir{doc/latex/test}
\ifx\fmtname\nameofplainTeX
  \expandafter\endbatchfile
\else
  \expandafter\endgroup
\fi
%</internal>
% \fi
%
% \iffalse
%<*driver>
\ProvidesFile{test.dtx}
%</driver>
%<package>\NeedsTeXFormat{LaTeX2e}[1999/12/01]
%<package>\ProvidesPackage{test}
%<*package>
    [2021/03/27 v1.00 A new LaTeX package]
%</package>
%<*driver>
\documentclass{ltxdoc}
\usepackage[a4paper,margin=25mm,left=50mm,nohead]{geometry}
\usepackage[numbered]{hypdoc}
\usepackage{amsmath}
\usepackage{mdframed}

% dummy
\newcommand{\footcite}[2][]{}

\ExplSyntaxOff

\usepackage{bschlangaul-basis}

\bLadePakete{
  formatierung,
  meta,
  automaten,
  baum,
  cpm,
  cyk-algorithmus,
  entwurfsmuster,
  formale-sprachen,
  gantt,
  graph,
  komplexitaetstheorie,
  makros,
  master-theorem,
  o-notation,
  mathe,
  minimierung,
  pseudo,
  relationale-algebra,
  sortieren,
  synthese-algorithmus,
  syntaxbaum,
  typographie,
  tex-dokumentation,
  uml,
}
\EnableCrossrefs
\CodelineIndex
\RecordChanges
\let\oldsubsection\subsection
\renewcommand\subsection{\clearpage\oldsubsection}
\begin{document}
  \DocInput{\jobname.dtx}
\end{document}
%</driver>
% \fi
%
% \GetFileInfo{\jobname.dtx}
% \DoNotIndex{\newcommand,\newenvironment,\def,\endinput}
%
%\title{\bMetaBschlangaulSammlung}
%\author{\bMetaHermineFriends \thanks{E-mail: \bMetaEmail}}
%
%\maketitle
%\tableofcontents
%
%\StopEventually{^^A
%  \PrintChanges
%  \PrintIndex
%}
%
% \newpage
% \section{Klassen}
%
%    \begin{macrocode}
%    \end{macrocode}
% \subsection{aufgabe.cls}
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}
\ProvidesClass{bschlangaul-aufgabe}[2019/10/27 Minimale Klasse zu
Setzen einer Aufgabe]
%    \end{macrocode}

%    \begin{macrocode}
\LoadClass{bschlangaul-basis}
%    \end{macrocode}

% Formatierung muss vor literatur sein, sonst Option clash
%    \begin{macrocode}
\bLadePakete{
  formatierung,
  abmessung,
  literatur-dummy,
  makros,
  aufgaben-metadaten,
  mathe,
  grafik,
  meta
}
%    \end{macrocode}
% Komischer Option-Clash deshalb ganz am Ende, für die Silbentrennung

%    \begin{macrocode}
\RequirePackage[ngerman]{babel}
%    \end{macrocode}

% In Aufgaben wollen wir das Additum sehen.
%    \begin{macrocode}
\ADDITUMtrue
%    \end{macrocode}

%    \begin{macrocode}
\ExplSyntaxOn
%    \end{macrocode}

%    \begin{macrocode}
\cs_gset:Npn \stichwoerter_formatiert: {
  \tl_if_empty:NTF \g_stichwoerter_tl {} {
    \textbf{Stichwörter:} ~
    \g_stichwoerter_tl
    \par
  }
}
%    \end{macrocode}

%    \begin{macrocode}
\cs_gset:Npn \horizontale_linie: {
  \par
  \noindent
  \rule{\textwidth}{0.8pt}
  \par
}
%    \end{macrocode}

%    \begin{macrocode}
\cs_gset:Npn \thematik_formatiert:
{
  \tl_if_empty:NTF \g_thematik_tl {}
  {
    \textit{
      ( \g_thematik_tl )
    }
  }
}
%    \end{macrocode}

%    \begin{macrocode}
\cs_gset:Npn \examen_titel_formatiert:
{
  \tl_if_empty:NTF \g_einzelpruefungs_nr_tl {}
  {
    {
      \noindent
      \small
      Einzelprüfung~
      „\fach:“
    }

    \par\medskip

    \noindent
    {
      \large
      Einzelprüfungsnummer~
      \einzelpruefungsnr_jahr_jahreszeit:
    }

    \par\medskip
  }
}
%    \end{macrocode}

%    \begin{macrocode}
\cs_gset:Npn \aufgabe_titel_formatiert:
{
  {
    \noindent
    \bfseries
    \Large
    \tl_if_empty:NTF \g_einzelpruefungs_nr_tl
    {
      \g_titel_tl
    }
    {
      \thema_teil_aufgabe:
    }
  }
  \hfill

  \thematik_formatiert:
}
%    \end{macrocode}

% \begin{macro}{\bAufgabenMetadaten}
%    \begin{macrocode}
\def\bAufgabenMetadaten #1
{
  \bMetaSetze{#1}

  \examen_titel_formatiert:

  \aufgabe_titel_formatiert:

  \par\medskip

  \noindent
  {\footnotesize\stichwoerter_formatiert:}

  \horizontale_linie:

  \setze_kopfzeile_oben_rechts:n { \aufgabenpfad_lang: }

  \bigskip

  \keine_einrueckung:
}
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}
\setze_kopf_fusszeilen:nn {} {}
%    \end{macrocode}

%    \begin{macrocode}
\AddToHook { begindocument }
{
  \repariere_kopfzeile_breite:
}
%    \end{macrocode}

%    \begin{macrocode}
\AddToHook { enddocument }
{
  \vfill
  {
    \bLogoTextProjekt
    \bigskip

    \bLogoTextCCLizenz
    \bigskip

    \begin{spacing}{1}
      \tiny
      \noindent
      \bMetaHilfMit

      \bMetaQuelltext
      \_gib_github_url_href:
    \end{spacing}
  }
}
%    \end{macrocode}

%    \begin{macrocode}
\ExplSyntaxOff
%    \end{macrocode}

%    \begin{macrocode}

%    \end{macrocode}
% \subsection{basis.cls}
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}
\ProvidesClass{bschlangaul-basis}[2021/09/12 Basis-Klasse, die nur als
Unterklasse benutzt werden soll.]
%    \end{macrocode}

%    \begin{macrocode}
\LoadClass[a4paper,oneside,12pt]{book}
%    \end{macrocode}

% Damit wir Klassen-Optionen mit \LaTeX-3 verwalten könnten.
%    \begin{macrocode}
\RequirePackage{l3keys2e}
%    \end{macrocode}

%    \begin{macrocode}
\RequirePackage{bschlangaul-basis}
%    \end{macrocode}

% Lade Pakete die von allen Unterklassen benötigt werden.
%    \begin{macrocode}
\bLadePakete{
  kopfzeile
}
%    \end{macrocode}

%    \begin{macrocode}
\ExplSyntaxOn
%    \end{macrocode}

%    \begin{macrocode}
\keys_define:nn { klassen-setup }
{
  pakete .code:n = {
    \bLadePakete{#1}
  }
}
%    \end{macrocode}

% https://tex.stackexchange.com/questions/544374/passing-options-to-a-class-and-evaluate-using-latex3-interfaces
%    \begin{macrocode}
\ProcessKeysOptions { klassen-setup }
%    \end{macrocode}

%    \begin{macrocode}
\ExplSyntaxOff
%    \end{macrocode}

%    \begin{macrocode}

%    \end{macrocode}
% \subsection{examen-scans.cls}
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}
\ProvidesClass{bschlangaul-examen-scans}[2021/01/08 Zum
Zusammenfügen mehrerer Staatsexamen-Scans zu einer PDF-Datei.]
\LoadClass[a4paper,oneside]{book}
%    \end{macrocode}

%    \begin{macrocode}
\LoadClass{bschlangaul-basis}
%    \end{macrocode}

%    \begin{macrocode}
\RequirePackage{pdfpages}
%    \end{macrocode}

% Formatierung muss vor literatur sein, sonst Option clash
%    \begin{macrocode}
\bLadePakete{formatierung}
%    \end{macrocode}

% Komischer Option-Clash deshalb ganz am Ende, für die Silbentrennung
%    \begin{macrocode}
\RequirePackage[ngerman]{babel}
%    \end{macrocode}

%    \begin{macrocode}
\ExplSyntaxOn
%    \end{macrocode}

% \begin{macro}{\bPruefungsNummer}
%    \begin{macrocode}
\def\bPruefungsNummer#1{
  \str_set:Nn \g_pruefungs_nummer {#1}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bPruefungsTitel}
%    \begin{macrocode}
\def\bPruefungsTitel#1{
  \str_set:Nn \g_pruefungs_titel {#1}
}
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}
\def\li@SansFett#1#2{
  {
    #1
    \bfseries
    \rmfamily
    #2
  }
}
%    \end{macrocode}

% \begin{macro}{\bTrennSeite}
%    \begin{macrocode}
\def\bTrennSeite#1{
  \clearpage
  \strut
  \vfill
  \begin{center}
  {
    \li@SansFett{\LARGE}{\str_use:N \g_pruefungs_nummer} \\
    \vspace{2cm}
    \li@SansFett{\large}{\str_use:N \g_pruefungs_titel} \\
    \vspace{5cm}
    \li@SansFett{\Huge}{#1}
  }
  \end{center}
  \vfill
  \strut
  \clearpage
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bTitelSeite}
%    \begin{macrocode}
\def\bTitelSeite#1{
  \clearpage
  \strut
  \vfill
  \begin{center}
  #1
  \end{center}
  \vfill
  \strut
  \clearpage
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bBindePdfEin}
%    \begin{macrocode}
\def\bBindePdfEin#1{\includepdf[pages={1-}]{\LehramtInformatikRepository/#1}}
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}
\AtBeginDocument{
  \thispagestyle{empty}
  \bTitelSeite{
    \li@SansFett{\Large}{Sammlung~aller~Staatsexamensaufgaben~der~Prüfungsnummer} \\

    \vspace{4cm}

    \li@SansFett{\Huge}{\str_use:N \g_pruefungs_nummer} \\

    \vspace{4cm}

    \li@SansFett{\LARGE}{\str_use:N \g_pruefungs_titel} \\
  }
}
%    \end{macrocode}

%    \begin{macrocode}
\ExplSyntaxOff
%    \end{macrocode}

%    \begin{macrocode}

%    \end{macrocode}
% \subsection{examen.cls}
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}
\ProvidesClass{bschlangaul-examen}[2021/06/10 Zum Einbinden von
mehreren Aufgaben zu einem Examen.]
%    \end{macrocode}

% Lade die wichtigsten Pakete. Formatierung muss vor literatur sein, sonst Option clash
%    \begin{macrocode}
\LoadClass[pakete={
  formatierung,
  literatur-dummy,
  makros,
  aufgaben-einbinden,
  aufgaben-metadaten,
  abmessung,
  typographie,
  grafik,
  meta
}]{bschlangaul-basis}
%    \end{macrocode}

% Formatierung für die Überschriften setzen.
%    \begin{macrocode}
\RequirePackage{titlesec}
\titleformat{\section}{\huge\filcenter\bfseries}{\thesection}{1em}{}
\newcommand{\sectionbreak}{\clearpage}
\setcounter{secnumdepth}{0}
%    \end{macrocode}

%    \begin{macrocode}
\bLadeAllePakete
%    \end{macrocode}

% Komischer Option-Clash deshalb ganz am Ende, für die Silbentrennung
%    \begin{macrocode}
\RequirePackage[ngerman]{babel}
%    \end{macrocode}

%    \begin{macrocode}
\ExplSyntaxOn
%    \end{macrocode}

% \begin{macro}{\bSetzeThemaNr}
%    \begin{macrocode}
\def\bSetzeThemaNr#1{
  \tl_gset:Nn \g_thema_nr_tl { #1 }
  \section{Thema~Nr.~#1}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bSetzeTeilaufgabeNr}
%    \begin{macrocode}
\def\bSetzeTeilaufgabeNr#1{
  \tl_gset:Nn \g_teilaufgabe_nr_tl { #1 }
  \subsection{Teilaufgabe~Nr.~#1}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bBindeAufgabeEin}
%    \begin{macrocode}
\def\bBindeAufgabeEin#1{
  \tl_gset:Nn \g_aufgabe_nr_tl { #1 }
  \input{
    \LehramtInformatikRepository /
    Staatsexamen /
    \g_einzelpruefungs_nr_tl /
    \g_jahr_tl /
    \g_monat_tl /
    \tl_if_empty:NTF \g_thema_nr_tl {} {
      Thema - \g_thema_nr_tl /
    }
    \tl_if_empty:NTF \g_teilaufgabe_nr_tl {} {
      Teilaufgabe - \g_teilaufgabe_nr_tl /
    }
    Aufgabe - \g_aufgabe_nr_tl .tex
  }
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bAufgabenMetadaten}
% Das Metadaten-Makro überschreiben
%    \begin{macrocode}
\def\bAufgabenMetadaten#1{
  \bMetaSetze{#1}
  \subsubsection{\_gib_aufgaben_titel:}
}
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}
\cs_new:Npn \titel_seite:
{
  \titel_seite:nn
  {
    {
      \bfseries\Huge

      \g_einzelpruefungs_nr_tl
      \par

      \g_jahreszeit_tl
      \par

      \g_jahr_tl
      \par
    }
  }
  {
    \g_examen_fach_tl
    \par

    \vspace{0.5cm}

    Aufgabenstellungen~mit~Lösungsvorschlägen
    \par
  }

}
%    \end{macrocode}

%    \begin{macrocode}
\cs_new:Npn \inhalts_verzeichnis: {
  % für den Abstand vor den section im Inhaltsverzeichnis
  % https://tex.stackexchange.com/questions/241445/how-to-control-spacing-in-toc-for-different-sections
  \setlength{\cftbeforesecskip}{1.5cm}
  \setlength{\cftbeforesubsecskip}{0.5cm}
  \renewcommand{\cftsubsecafterpnum}{\vspace{\cftbeforesubsecskip}}
  \setlength{\cftbeforesubsubsecskip}{0.1cm}
  \renewcommand{\contentsname}{Aufgabenübersicht}
  \tableofcontents
}
%    \end{macrocode}

%    \begin{macrocode}
\setcounter{tocdepth}{4}
\RequirePackage[titles]{tocloft}
\AddToHook { begindocument }
{
  \titel_seite:

  \clearpage

  \inhalts_verzeichnis:

  \vfill

  \bLogoTextProjekt
  \bigskip

  \bLogoTextCCLizenz
  \bigskip

  \clearpage
}
%    \end{macrocode}

%    \begin{macrocode}
\ExplSyntaxOff
%    \end{macrocode}

%    \begin{macrocode}

%    \end{macrocode}
% \subsection{haupt.cls}
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}
\ProvidesClass{bschlangaul-haupt}[2019/10/27 Klasse zum
Setzen der Haupt-Datei, Bschlangaul-Sammlung.tex d.h. des wichtigsten
Dokuments, das alles zusammenfasst.]
%    \end{macrocode}

% Lade die wichtigsten Pakete. Formatierung muss vor literatur sein, sonst Option clash
%    \begin{macrocode}
\LoadClass[pakete={
  formatierung,
  literatur-dummy,
  makros,
  aufgaben-einbinden,
  aufgaben-metadaten,
  abmessung,
  typographie,
  grafik,
  meta,
  index
}]{bschlangaul-basis}
%    \end{macrocode}

%    \begin{macrocode}
\bLadeAllePakete
%    \end{macrocode}

% Komischer Option-Clash deshalb ganz am Ende, für die Silbentrennung
%    \begin{macrocode}
\RequirePackage[ngerman]{babel}
%    \end{macrocode}

%    \begin{macrocode}
\ExplSyntaxOn
%    \end{macrocode}

%    \begin{macrocode}
\setze_kopf_fusszeilen:nn {} {}
%    \end{macrocode}

% Breiterer rechter Rand für die Indexes
%    \begin{macrocode}
\geometry{
  right = 3cm,
  marginparwidth = 2.8cm,
}
%    \end{macrocode}

%    \begin{macrocode}
\AddToHook { begindocument }
{
  \repariere_kopfzeile_breite:
  \titel_seite:nn
  {
    {
      \Huge
      Die~komplette~Sammlung
    }

  }
  {
    Alle~Aufgaben
  }

  \tableofcontents
  \clearpage

  \pagestyle{fancy}
}
%    \end{macrocode}

%    \begin{macrocode}
\AddToHook { enddocument }
{
  \printindex
}
%    \end{macrocode}

% \begin{macro}{\bAufgabenMetadaten}
% Das Metadaten-Makro überschreiben
%    \begin{macrocode}
\def\bAufgabenMetadaten #1
{
  \bMetaSetze{#1}
  \subsection{\aufgabenpfad_lang:}
}
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}
\ExplSyntaxOff
%    \end{macrocode}

%    \begin{macrocode}

%    \end{macrocode}
% \subsection{theorie.cls}
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}
\ProvidesClass{bschlangaul-theorie}[2021/09/12 Klasse zum
Setzen von Theorie-Zusammenfassungen]
%    \end{macrocode}

%    \begin{macrocode}
\LoadClass{bschlangaul-basis}
%    \end{macrocode}

% Paket „formatierung“ muss vor „literatur“ sein, sonst Option clash
%    \begin{macrocode}
\bLadePakete{
  formatierung,
  literatur,
  makros,
  aufgaben-metadaten
}
%    \end{macrocode}

% Komischer Option-Clash deshalb ganz am Ende, für die Silbentrennung
%    \begin{macrocode}
\RequirePackage[ngerman]{babel}
%    \end{macrocode}

%    \begin{macrocode}

%    \end{macrocode}
%
% \newpage
% \section{Pakete}
%
%    \begin{macrocode}
%    \end{macrocode}
% \subsection{abmessung.sty}
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[1995/12/01]
\ProvidesPackage{bschlangaul-baum}[2021/09/04 Einstellung der
Seitenabmessung mit Hilfe des geometry-Pakets.]
%    \end{macrocode}

%    \begin{macrocode}
\RequirePackage{geometry}
%    \end{macrocode}

%    \begin{macrocode}
\geometry{
  a4paper,
  margin=2cm,
  includeheadfoot,
  % showframe,
  % showcrop,
  % verbose=true,
}
%    \end{macrocode}

%    \begin{macrocode}

%    \end{macrocode}
% \subsection{aufgaben-einbinden.sty}
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[1995/12/01]
\ProvidesPackage{bschlangaul-aufgaben-einbinden}[2020/06/13
Binde Aufgaben in ein größeres Dokument ein.]
%    \end{macrocode}

% Mit Hilfe des |standalone|-Pakets können eigenständige Dokumente
% eingebunden werden, die auch uneingebunden kompiliert werden können,
% wie zum Beispiel Aufgaben
%    \begin{macrocode}
\RequirePackage{standalone}
%    \end{macrocode}

% \begin{macro}{\bAufgabe}
% Eine Aufgaben mit den Pfad relativ zu Wurzelverzeichnis dieses
% Repository einbinden.
%    \begin{macrocode}
\def\bAufgabe#1{
  \input{\LehramtInformatikRepository/#1.tex}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bExamensAufgabe}
% Eine Examensaufgaben mit den Pfad relativ zu Staatsexamen einbinden,
% z. B. |\bExamensAufgabe{46116/2015/09/Thema-2/Teilaufgabe-1/Aufgabe-3}|
%    \begin{macrocode}
\def\bExamensAufgabe#1{
  \input{\LehramtInformatikRepository/Staatsexamen/#1.tex}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bExamensAufgabeTTA}
%    \begin{macrocode}
\def\bExamensAufgabeTTA #1 / #2 / #3 : Thema #4 Teilaufgabe #5 Aufgabe #6 {
  \input{\LehramtInformatikRepository/Staatsexamen/#1/#2/#3/Thema-#4/Teilaufgabe-#5/Aufgabe-#6.tex}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bExamensAufgabeTA}
%    \begin{macrocode}
\def\bExamensAufgabeTA #1 / #2 / #3 : Thema #4 Aufgabe #5 {
  \input{\LehramtInformatikRepository/Staatsexamen/#1/#2/#3/Thema-#4/Aufgabe-#5.tex}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bExamensAufgabeA}
%    \begin{macrocode}
\def\bExamensAufgabeA #1 / #2 / #3 : Aufgabe #4 {
  \input{\LehramtInformatikRepository/Staatsexamen/#1/#2/#3/Aufgabe-#4.tex}
}
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}

%    \end{macrocode}
% \subsection{aufgaben-metadaten.sty}
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[1995/12/01]
\ProvidesPackage{bschlangaul-aufgaben-metadaten}[2020/07/07 Makros zum
Setzen der Aufgaben-Metadaten.]
%    \end{macrocode}

%    \begin{macrocode}
\ExplSyntaxOn
%    \end{macrocode}

% \begin{macro}{\bMetaSetze}
% Setze die Metadaten einer Aufgabe.
%    \begin{macrocode}
\def\bMetaSetze#1{
  \_setze_variablen_zurueck:

  \tl_clear:N \g_teilaufgabe_nr_tl

  \keys_set:nn { aufgabenmetadaten } {
    #1
  }

  \_setze_relativen_pfad:
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bAufgabenMetadaten}
% Setzen der Aufgaben-Metadaten über eine plist bzw. über key-values.
%
% Die Schlüssel-Werte-Paare sind in der Datei basis.sty definiert. In der
% Typescript-Datei |.scripts/nodejs/src/aufgaben.ts| gibt es ein entsprechendes
% Interface |AufgabenMetadaten|.
%
% \begin{verbatim}
% \bAufgabenMetadaten{
%   Titel = {Aufgabe 2},
%   Thematik = {Petri-Netz},
%   Stichwoerter = {Feld (Array), Implementierung in Java}
%   ZitatSchluessel = sosy:pu:4,
%   ZitatBeschreibung = {Seite 11},
%   BearbeitungsStand = OCR,
%   Korrektheit = absolut korrekt,
%   RelativerPfad = Staatsexamen/46116/2016/03/Thema-2/Teilaufgabe-1/Aufgabe-2.tex,
%   EinzelpruefungsNr = 46116,
%   Jahr = 2016,
%   Monat = 03,
%   ThemaNr = 2,
%   TeilaufgabeNr = 1,
%   AufgabeNr = 2,
% }
% \end{verbatim}
%    \begin{macrocode}
\def\bAufgabenMetadaten#1{
  \bMetaSetze{#1}

  \_gib_examen_titel: {}

  \section{\_gib_aufgaben_titel:}
}
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}
\ExplSyntaxOff
%    \end{macrocode}

% \begin{macro}{\bAufgabenTitel}
% Momentan eine dummy Makro das die Thematik enthält.
%    \begin{macrocode}
\def\bAufgabenTitel#1{}
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}

%    \end{macrocode}
% \subsection{automaten.sty}
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[1995/12/01]
\ProvidesPackage{bschlangaul-automaten}[2021/02/14 Zum Setzen von Automaten]
%    \end{macrocode}

% \subsubsection{Endlicher Automat}

%    \begin{macrocode}
\bLadePakete{formale-sprachen}
%    \end{macrocode}

% \begin{verbatim}
% \begin{tikzpicture}[li automat]
% \node[state,initial,accepting] (0) {$z_0$};
% \node[state,right of=0] (1) {$z_1$};
%
% \path (0) edge[above] node{1} (1);
% \path (0) edge[loop,above] node{0} (0);
% \path (1) edge[loop,above] node{0} (1);
% \end{tikzpicture}
% \end{verbatim}

% \begin{bBeispiel}
% \begin{tikzpicture}[li automat]
% \node[state,initial,accepting] (0) {$z_0$};
% \node[state,right of=0] (1) {$z_1$};
%
% \path (0) edge[above] node{1} (1);
% \path (0) edge[loop,above] node{0} (0);
% \path (1) edge[loop,above] node{0} (1);
% \end{tikzpicture}
% \end{bBeispiel}

%    \begin{macrocode}
\RequirePackage{tikz}
\usetikzlibrary{arrows,automata,positioning}
\bLadePakete{mathe}
\directlua{
  automaten = require('bschlangaul-automaten')
}
%    \end{macrocode}

% \begin{macro}{\bAutomat}
% \cmd{\bAutomat}\oarg{automaten-name}\marg{zustaende=Z,alphabet=$\Sigma$,delta=$\delta$,ende=E,start=$z_0$}
%
% \begin{itemize}
% \item |\bAutomat{}|: \bAutomat{}
% \item |\bAutomat[A_1]{}|: \bAutomat[A_1]{}
% \item |\bAutomat{zustaende={z_0, z_1, z_2}}|: \bAutomat{zustaende={z_0, z_1, z_2}}
% \item |\bAutomat{alphabet={a,b}}|: \bAutomat{alphabet={a,b}}
% \item |\bAutomat{delta=d}|: \bAutomat{delta=d}
% \item |\bAutomat{ende={z_0, z_1, z_2}}|: \bAutomat{ende={z_0, z_1, z_2}}
% \item |\bAutomat{start=z_1}|: \bAutomat{start=z_1}
% \item |\bAutomat{dea}|: \bAutomat{dea}
% \item |\bAutomat{nea}|: \bAutomat{nea}
% \end{itemize}
%
%    \begin{macrocode}
\ExplSyntaxOn
\NewDocumentCommand {\bAutomat} { O{A} m } {
  \tl_set:Nn \l_zustaende_tl {Z}
  \tl_set:Nn \l_alphabet_tl {\Sigma}
  \tl_set:Nn \l_delta_tl {\delta}
  \tl_set:Nn \l_ende_tl {E}
  \tl_set:Nn \l_start_tl {z\sb{0}}
  \tl_set:Nn \l_typ_tl {}

  \keys_define:nn { automat } {
    zustaende .code:n = {\tl_set:Nn \l_zustaende_tl {\bMenge{##1}}},
    alphabet .code:n = {\tl_set:Nn \l_alphabet_tl {\bMenge{##1}}},
    delta .code:n = {\tl_set:Nn \l_delta_tl {##1}},
    ende .code:n = {\tl_set:Nn \l_ende_tl {\bMenge{##1}}},
    start .code:n = {\tl_set:Nn \l_start_tl {##1}},
    dea .value_forbidden:n = true,
    dea .code:n = {\tl_set:Nn \l_typ_tl {\sb{\text{DEA}}}},
    nea .value_forbidden:n = true,
    nea .code:n = {\tl_set:Nn \l_typ_tl {\sb{\text{NEA}}}},
  }

  \keys_set:nn { automat } { #2 }

  $#1 \l_typ_tl = (
    \l_zustaende_tl,
    \l_alphabet_tl,
    \l_delta_tl,
    \l_ende_tl,
    \l_start_tl
  )$
}
\ExplSyntaxOff
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bAutomatenKante}
% \bMakroFaulenzer{k}{liAutomatenKante}
%    \begin{macrocode}
\def\bAutomatenKante#1#2#3#4{
  \path (#1) edge[#4] node{#3} (#2);
}
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}
\tikzset{
  li automat/.style={
    ->,
    node distance=2cm
  },
}
%    \end{macrocode}

% \newpage\subsubsection{Kellerautomat}

% \begin{verbatim}
% \begin{tikzpicture}[li kellerautomat,node distance=5cm]
% \node[state,initial] (0) {$z_0$};
% \node[state,right of=0,accepting] (1) {$z_1$};
%
% \bKellerKante[above,loop]{0}{0}{
%   1, KELLERBODEN, E KELLERBODEN;
%   0, KELLERBODEN, KELLERBODEN;
% }
%
% \bKellerKante[above]{0}{1}{
%   EPSILON, E, EPSILON;
%   1, E, EPSILON;
%   0, E, EPSILON;
% }
%
% \bKellerKante[above,loop]{1}{2}{
%   EPSILON, KELLERBODEN, EPSILON;
%   1, KELLERBODEN, KELLERBODEN;
%   0, KELLERBODEN, KELLERBODEN;
% }
% \end{tikzpicture}
% \end{verbatim}

% \begin{bBeispiel}
% \begin{tikzpicture}[li kellerautomat,node distance=5cm]
% \node[state,initial] (0) {$z_0$};
% \node[state,right of=0,accepting] (1) {$z_1$};
%
% \bKellerKante[above,loop]{0}{0}{
%   1, KELLERBODEN, E KELLERBODEN;
%   0, KELLERBODEN, KELLERBODEN;
% }
%
% \bKellerKante[above]{0}{1}{
%   EPSILON, E, EPSILON;
%   1, E, EPSILON;
%   0, E, EPSILON;
% }
%
% \bKellerKante[above,loop]{1}{2}{
%   EPSILON, KELLERBODEN, EPSILON;
%   1, KELLERBODEN, KELLERBODEN;
%   0, KELLERBODEN, KELLERBODEN;
% }
% \end{tikzpicture}
% \end{bBeispiel}

% \begin{macro}{\bKellerAutomat}
% \cmd{\bKellerAutomat}\oarg{automaten-name}
% \\\marg{zustaende=Z,alphabet=$\Sigma$,kelleralphabet=$\Gamma$,delta=$\delta$,start=$z_0$,kellerboden=\#,ende=E}
%
% \begin{verbatim}
% \bKellerAutomat{
%   zustaende={z_0, z_1, z_2},
%   alphabet={a, b, c},
%   kelleralphabet={\#, A},
%   ende={z_2},
% }
% \end{verbatim}
%
% \begin{bBeispiel}
% \bKellerAutomat{
%   zustaende={z_0, z_1, z_2},
%   alphabet={a, b, c},
%   kelleralphabet={\#, A},
%   ende={z_2},
% }
% \end{bBeispiel}
%
%    \begin{macrocode}
\ExplSyntaxOn
\NewDocumentCommand {\bKellerAutomat} { O{K} m } {
  \tl_set:Nn \l_zustaende_tl {Z}
  \tl_set:Nn \l_alphabet_tl {\Sigma}
  \tl_set:Nn \l_kelleralphabet_tl {\Gamma}
  \tl_set:Nn \l_delta_tl {\delta}
  \tl_set:Nn \l_start_tl {z\sb{0}}
  \tl_set:Nn \l_kellerboden_tl {\#}
  \tl_set:Nn \l_ende_tl {E}

  \keys_define:nn { kellerautomat } {
    zustaende .code:n = {\tl_set:Nn \l_zustaende_tl {\bMenge{##1}}},
    alphabet .code:n = {\tl_set:Nn \l_alphabet_tl {\bMenge{##1}}},
    kelleralphabet .code:n = {\tl_set:Nn \l_kelleralphabet_tl {\bMenge{##1}}},
    delta .code:n = {\tl_set:Nn \l_delta_tl {##1}},
    start .code:n = {\tl_set:Nn \l_start_tl {##1}},
    kellerboden .code:n = {\tl_set:Nn \l_kellerboden_tl {##1}},
    ende .code:n = {\tl_set:Nn \l_ende_tl {\bMenge{##1}}},
  }

  \keys_set:nn { kellerautomat } { #2 }

  $#1 = (
    \l_zustaende_tl,
    \l_alphabet_tl,
    \l_kelleralphabet_tl,
    \l_delta_tl,
    \l_start_tl,
    \l_kellerboden_tl,
    \l_ende_tl
  )$
}
\ExplSyntaxOff
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bKellerUebergang}
% \bMakroFaulenzer{u}{liKellerUebergang}
%
% |\bKellerUebergang{a, KELLERBODEN, A; b KELLERBODEN, EPSILON}|
%
% \begin{bBeispiel}
%   \bKellerUebergang{a, KELLERBODEN, A; b, KELLERBODEN, EPSILON}
% \end{bBeispiel}
%
% Regulärer Ausdruck zum Konvertieren:
% |\((.*), (.*), (.*)\)|
% |\\u{$1 $2 $3}|
%    \begin{macrocode}
\ExplSyntaxOn
\def\bKellerUebergang#1{
  \directlua{automaten.drucke_keller_uebergaenge('#1')}
}
\ExplSyntaxOff
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bKellerKante}
% \cmd{\bKellerKante}\oarg{tikz-optionen}\marg{von}\marg{zu}\marg{übergange}
% \bMakroFaulenzer{k}{liKellerKante}
%    \begin{macrocode}
\NewDocumentCommand{\bKellerKante} { O{above} m m m  } {
  \path (#2) edge[#1] node{\bKellerUebergang{#4}} (#3);
}
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}
\tikzset{
  li keller knoten/.style={
    text width=2cm,
    align=center,
    font=\footnotesize,
  },
  li kellerautomat/.style={
    li automat,
    every edge/.append style={
      every node/.style={
        li keller knoten
      }
    }
  }
}
%    \end{macrocode}

% \subsubsection{Turingmaschine}

%    \begin{macrocode}
\RequirePackage{amssymb}
%    \end{macrocode}

% \begin{macro}{\bTuringLeerzeichen}
% \begin{bBeispiel}
% \bTuringLeerzeichen
% \end{bBeispiel}
%    \begin{macrocode}
\def\bTuringLeerzeichen{\Box}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bTuringMaschine}
% \cmd{\bTuringMaschine}\oarg{automaten-name}
% \\\marg{zustaende=Z,alphabet=$\Sigma$,bandalphabet=$\Gamma$,delta=$\delta$,start=$z_0$,leerzeichen=\bTuringLeerzeichen,ende=E}
%
% \begin{verbatim}
% \bTuringMaschine{
%   zustaende={z_0, z_1, z_2},
%   alphabet={a, b, c},
%   bandalphabet={\bTuringLeerzeichen, A},
%   ende={z_2},
% }
% \end{verbatim}
%
% \begin{bBeispiel}
% \bTuringMaschine{
%   zustaende={z_0, z_1, z_2},
%   alphabet={a, b, c},
%   bandalphabet={\bTuringLeerzeichen, A},
%   ende={z_2},
% }
% \end{bBeispiel}
%
%    \begin{macrocode}
\ExplSyntaxOn
\NewDocumentCommand {\bTuringMaschine} { O{TM} m } {
  \tl_set:Nn \l_zustaende_tl {Z}
  \tl_set:Nn \l_alphabet_tl {\Sigma}
  \tl_set:Nn \l_bandalphabet_tl {\Gamma}
  \tl_set:Nn \l_delta_tl {\delta}
  \tl_set:Nn \l_start_tl {z\sb{0}}
  \tl_set:Nn \l_leerzeichen_tl {\bTuringLeerzeichen}
  \tl_set:Nn \l_ende_tl {E}

  \keys_define:nn { kellerautomat } {
    zustaende .code:n = {\tl_set:Nn \l_zustaende_tl {\bMenge{##1}}},
    alphabet .code:n = {\tl_set:Nn \l_alphabet_tl {\bMenge{##1}}},
    bandalphabet .code:n = {\tl_set:Nn \l_bandalphabet_tl {\bMenge{##1}}},
    delta .code:n = {\tl_set:Nn \l_delta_tl {##1}},
    start .code:n = {\tl_set:Nn \l_start_tl {##1}},
    leerzeichen .code:n = {\tl_set:Nn \l_leerzeichen_tl {##1}},
    ende .code:n = {\tl_set:Nn \l_ende_tl {\bMenge{##1}}},
  }

  \keys_set:nn { kellerautomat } { #2 }

  $\text{#1} = (
    \l_zustaende_tl,
    \l_alphabet_tl,
    \l_bandalphabet_tl,
    \l_delta_tl,
    \l_start_tl,
    \l_leerzeichen_tl,
    \l_ende_tl
  )$
}
\ExplSyntaxOff
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bTuringUebergangZelle}
% Formatiert einen Zustandsübergang für eine Übergangstabelle.
% \bMakroFaulenzer{t}{liTuringUebergangZelle}
% |\bTuringUebergangZelle{z_1, LEER, R}|: \bTuringUebergangZelle{z_1, LEER, R}
% |\bTuringUebergangZelle{z1, leer, l}|: \bTuringUebergangZelle{z_1, LEER, l}
%    \begin{macrocode}
\ExplSyntaxOn
\def\bTuringUebergangZelle#1{
  \directlua{tex.print(automaten.gib_einen_turing_uebergang('#1'))}
}
\ExplSyntaxOff
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bTuringUebergaenge}
% Nur in den TikZ-Grafiken zu verwenden. Setzt Zeilenumbrüche ans Ende.
% Nicht für die Tabelle geeignet.
% \bMakroFaulenzer{t}{liTuringUebergaenge}
% \noindent
% \bTuringUebergaenge{z_1, LEER, l; LEER, LEER, r}
%    \begin{macrocode}
\ExplSyntaxOn
\def\bTuringUebergaenge#1{
  \directlua{automaten.drucke_turing_uebergaenge('#1')}
}
\ExplSyntaxOff
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bTuringKante}
% \cmd{\bTuringKante}\oarg{tikz-optionen}\marg{zustand-oder-lese}\marg{schreibe}\marg{richtung}
% \bMakroFaulenzer{t}{liTuringKante}
%    \begin{macrocode}
\NewDocumentCommand{\bTuringKante} { O{above} m m m  } {
  \path (#2) edge[#1] node{\bTuringUebergaenge{#4}} (#3);
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bTuringUeberfuehrung}
%    \begin{macrocode}
\def\bTuringUeberfuehrung{
  $\delta : Z \times \Gamma \rightarrow Z \times \Gamma \times \{ L, R, N \}$
}
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}
\tikzset{
  li turingmaschine/.style={
    li automat,
    every edge/.append style={
      every node/.style={
        li keller knoten
      }
    }
  }
}
%    \end{macrocode}

%    \begin{macrocode}

%    \end{macrocode}
% \subsection{basis.sty}
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[1995/12/01]
\ProvidesPackage{bschlangaul-basis}[2020/11/27]
%    \end{macrocode}

%    \begin{macrocode}
\ExplSyntaxOn
%    \end{macrocode}

% Lade die Konfigurationsdatei.
% |\def\LehramtInformatikRepository{/pfad/zum/repository}|
%    \begin{macrocode}
\input /etc/bschlangaul.config.tex
%    \end{macrocode}

% \subsubsection{IFs}

% Wir weichen von dem üblichen Namensschema ab und schreiben das Wort
% komplett in Großbuchstaben, damit die |if|-Befehle schöner lesbar
% sind, z. B. |\ifADDITUM|, |\ADDITUMtrue| und |\ADDITUMfalse|.

% \begin{macro}{\ifADDITUM}
% \begin{macro}{\ADDITUMtrue}
% \begin{macro}{\ADDITUMfalse}
% \begin{macrocode}
\newif\ifADDITUM
\ADDITUMfalse
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}

% \begin{macro}{\ifEXKURS}
% \begin{macro}{\EXKURStrue}
% \begin{macro}{\EXKURSfalse}
%    \begin{macrocode}
\newif\ifEXKURS
\EXKURStrue
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}

% \begin{macro}{\ifANTWORT}
% \begin{macro}{\ANTWORTtrue}
% \begin{macro}{\ANTWORTfalse}
%    \begin{macrocode}
\newif\ifANTWORT
\ANTWORTtrue
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}

% \begin{macro}{\bLadePakete}
%    \begin{macrocode}
\NewDocumentCommand{\bLadePakete}{ m }
{
  \clist_map_inline:nn { #1 } { \RequirePackage{bschlangaul-##1} }
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bLadeAllePakete}
%    \begin{macrocode}
\def\bLadeAllePakete{
  \bLadePakete{
    aufgaben-einbinden,
    automaten,
    checkbox,
    chomsky-normalform,
    cpm,
    cyk-algorithmus,
    entwurfsmuster,
    er,
    formale-sprachen,
    gantt,
    grafik,
    graph,
    hanoi,
    java,
    kontrollflussgraph,
    komplexitaetstheorie,
    makros,
    master-theorem,
    mathe,
    minimierung,
    normalformen,
    petri,
    potenzmengen-konstruktion,
    pumping-lemma,
    pseudo,
    relationale-algebra,
    rmodell,
    sortieren,
    spalten,
    struktogramm,
    sql,
    syntax,
    syntaxbaum,
    synthese-algorithmus,
    tabelle,
    typographie,
    uml,
    vollstaendige-induktion,
    wasserfall,
    wpkalkuel,
    %
    baum, % am Schluss sonst Fehler: undefined command \edge
  }
}
%    \end{macrocode}
% \end{macro}

% Definition einer Komma-getrennten-Liste mit deren Hilfe die
% vielen globalen Token-List-Variablen definiert werden können.
% Die einzelnen Schlüssel sind im Interface |AufgabenMetadaten| in der
% Typescript-Datei |.scripts/nodejs/src/aufgaben.ts| erklärt.
%    \begin{macrocode}
\clist_new:N \g_schluessel_clist
\clist_set:Nn \g_schluessel_clist {
  titel,
  thematik,
  referenz,
  stichwoerter,
  zitat_schluessel,
  zitat_beschreibung,
  %
  bearbeitungs_stand,
  korrektheit,
  %
  relativer_pfad,
  identische_aufgabe,
  %
  einzelpruefungs_nr,
  examen_fach,
  jahr,
  monat,
  jahreszeit,
  thema_nr,
  teilaufgabe_nr,
  aufgabe_nr,
}
%    \end{macrocode}

% Initialisierung der globalen Token-List-Variablen |\g_***_tl|.
% |auf| steht für Aufgabe.
%    \begin{macrocode}
\clist_map_inline:Nn \g_schluessel_clist {
  \tl_new:c {g_auf_#1_tl}
}
%    \end{macrocode}

% Funktion über alle globalen Token-List-Variablen zurückzusetzten.
%    \begin{macrocode}
\cs_new:Npn \_setze_variablen_zurueck: {
  \clist_map_inline:Nn \g_schluessel_clist {
    \tl_clear:c {g_auf_##1_tl}
  }
}
%    \end{macrocode}

% Die einzelnen Schlüssel sind im Interface |AufgabenMetadaten| in der
% Typescript-Datei |.scripts/nodejs/src/aufgaben.ts| erklärt.
%    \begin{macrocode}
\keys_define:nn { aufgabenmetadaten }
{
  Titel               .tl_gset:N = \g_titel_tl,
  Thematik            .tl_gset:N = \g_thematik_tl,
  Referenz            .tl_gset:N = \g_referenz_tl,
  Stichwoerter        .tl_gset:N = \g_stichwoerter_tl,
  ZitatSchluessel     .tl_gset:N = \g_zitat_beschreibung_tl,
  ZitatBeschreibung   .tl_gset:N = \g_zitat_schluessel_tl,
  %
  BearbeitungsStand   .tl_gset:N = \g_bearbeitungs_stand_tl,
  Korrektheit         .tl_gset:N = \g_korrektheit_tl,
  Ueberprueft         .tl_gset:N = \g_ueberprueft_tl,
  %
  RelativerPfad       .tl_gset:N = \g_relativer_pfad_tl,
  IdentischeAufgabe   .tl_gset:N = \g_identische_aufgabe_tl,
  %
  EinzelpruefungsNr   .tl_gset:N = \g_einzelpruefungs_nr_tl,
  ExamenFach          .tl_gset:N = \g_examen_fach_tl,
  Jahr                .tl_gset:N = \g_jahr_tl,
  Monat               .tl_gset:N = \g_monat_tl,
  Jahreszeit          .tl_gset:N = \g_jahreszeit_tl,
  ThemaNr             .tl_gset:N = \g_thema_nr_tl,
  TeilaufgabeNr       .tl_gset:N = \g_teilaufgabe_nr_tl,
  AufgabeNr           .tl_gset:N = \g_aufgabe_nr_tl,
}
%    \end{macrocode}

%    \begin{macrocode}
\cs_gset:Npn \_setze_relativen_pfad: {
  \tl_if_empty:NTF \g_relativer_pfad_tl
  {
    \bool_if:nTF
    {
      ! \tl_if_empty_p:N \g_einzelpruefungs_nr_tl &&
      ! \tl_if_empty_p:N \g_jahr_tl &&
      ! \tl_if_empty_p:N \g_monat_tl
    }
    {
      \tl_gset:Nn \g_relativer_pfad_tl {
        Staatsexamen /
        \g_einzelpruefungs_nr_tl /
        \g_jahr_tl /
        \g_monat_tl /
        \tl_if_empty:NTF \g_thema_nr_tl {} { Thema - \g_thema_nr_tl / }
        \tl_if_empty:NTF \g_teilaufgabe_nr_tl {} { Teilaufgabe - \g_teilaufgabe_nr_tl / }
        \tl_if_empty:NTF \g_aufgabe_nr_tl {} { Aufgabe - \g_aufgabe_nr_tl .tex }
      }
    }
    {}
  }
  {}
}
%    \end{macrocode}

%    \begin{macrocode}
\cs_set:Nn \trenner: {
  \, / \,
}
%    \end{macrocode}

%    \begin{macrocode}
\cs_gset:Npn \gib_jahreszeit_durch_monat: #1 {
  \str_case_e:nnTF { #1 }
  {
    { 3 } { Frühjahr }
    { 03 } { Frühjahr }
    { 9 } { Herbst }
    { 09 } { Herbst }
  }
  {}
  {
    \msg_error:nn
    { bschlangaul }
    { Erlaubte~Eingaben~sind~3~03~9~und~09~nicht~„#1“ }
  }
}
%    \end{macrocode}

% Definiert auch in .scripts/nodejs/src/examen.ts funktioniert nicht
%    \begin{macrocode}
\cs_gset:Npn \fach_durch_nummer:n #1
{
  \str_case_e:nnTF { #1 }
  {
    { 46110 } { Grundlagen~der~Informatik~(nicht~vertieft) }
    { 46111 } { Programmentwicklung~/~Systemprogrammierung~/~Datenbanksysteme~(nicht~vertieft) }
    { 46112 } { Grundlagen~der~Informatik~(nicht~vertieft) }
    { 46113 } { Theoretische~Informatik~(nicht~vertieft) }
    { 46114 } { Algorithmen~/~Datenstrukturen~/~Programmiermethoden~(nicht~vertieft) }
    { 46115 } { Theoretische~Informatik~/~Algorithmen~/~Datenstrukturen~(nicht~vertieft) }
    { 46116 } { Softwaretechnologie~/~Datenbanksysteme~(nicht~vertieft) }
    { 46118 } { Fachdidaktik~(Mittelschulen) }
    { 46119 } { Fachdidaktik~(Realschulen) }
    { 46121 } { Fachdidaktik~(berufliche~Schulen) }
    { 66110 } { Automatentheorie,~Algorithmische~Sprache~(vertieft) }
    { 66111 } { Betriebssysteme~/~Datenbanksysteme~/~Rechnerarchitektur~(vertieft) }
    { 66112 } { Automatentheorie~/~Komplexität~/~Algorithmen~(vertieft) }
    { 66113 } { Rechnerarchitektur~/~Datenbanken~/~Betriebssysteme~(vertieft) }
    { 66114 } { Datenbank-~und~Betriebssysteme~(vertieft) }
    { 66115 } { Theoretische~Informatik~/~Algorithmen~(vertieft) }
    { 66116 } { Datenbanksysteme~/~Softwaretechnologie~(vertieft) }
    { 66118 } { Fachdidaktik~(Gymnasium) }
  }
  {}
  {
    \msg_error:nn
    { bschlangaul }
    { Unbekannte~Einzelprüfungsnummer~„#1“ }
  }
}
%    \end{macrocode}

%    \begin{macrocode}
\cs_gset:Npn \fach:
{
  \tl_if_empty:NTF \g_einzelpruefungs_nr_tl {}
  {
    \fach_durch_nummer:n \g_einzelpruefungs_nr_tl
  }
}
%    \end{macrocode}

% „Einzelprüfungsnummer / Jahr / Jahreszeit“ mit Trennzeichen
%    \begin{macrocode}
\cs_gset:Npn \einzelpruefungsnr_jahr_jahreszeit: {
  \g_einzelpruefungs_nr_tl

  \trenner:

  \g_jahr_tl

  \trenner:

  \gib_jahreszeit_durch_monat: \g_monat_tl
}
%    \end{macrocode}

% Thema 1 / Teilaufgabe 2 / Aufgabe 3
%    \begin{macrocode}
\cs_gset:Npn \thema_teil_aufgabe: {
  \tl_if_empty:NTF \g_thema_nr_tl {} {
    Thema ~ \g_thema_nr_tl \trenner:
  }

  \tl_if_empty:NTF \g_teilaufgabe_nr_tl {} {
    Teilaufgabe ~ \g_teilaufgabe_nr_tl \trenner:
  }

  \tl_if_empty:NTF \g_aufgabe_nr_tl {} {
    Aufgabe ~ \g_aufgabe_nr_tl
  }
}
%    \end{macrocode}

% Gib den langen Titelpfad einer Aufgabe. Ist die Aufgabe keine
% Examensaufgabe, wird auch eine Titel zurückgegeben. Für die
% Kopfzeile gedacht.
%    \begin{macrocode}
\cs_new:Npn \aufgabenpfad_lang: {
  \tl_if_empty:NTF \g_einzelpruefungs_nr_tl
  {
    \g_titel_tl
  }
  {
    \einzelpruefungsnr_jahr_jahreszeit:
    \trenner:
    \thema_teil_aufgabe:
  }
}
%    \end{macrocode}

%    \begin{macrocode}
\cs_gset:Npn \_gib_examen_titel:
{
  \bool_if:nTF
  {
    ! \tl_if_empty_p:N \g_einzelpruefungs_nr_tl &&
    ! \tl_if_empty_p:N \g_jahr_tl &&
    ! \tl_if_empty_p:N \g_monat_tl &&
    ! \tl_if_empty_p:N \g_aufgabe_nr_tl
  }
  {
    {
      \footnotesize
      \par
      \noindent
      Staatsexamen ~
      \g_einzelpruefungs_nr_tl \trenner:
      \g_jahr_tl \trenner:

      \tl_case:Nn \g_monat_tl
      {
        { 03 } { Frühjahr }
        { 09 } { Herbst }
      } \trenner:

      \tl_if_empty:NTF \g_thema_nr_tl {} {
        Thema ~ Nr. ~ \g_thema_nr_tl \trenner:
      }
      \tl_if_empty:NTF \g_teilaufgabe_nr_tl {} {
        Teilaufgabe ~ Nr. ~ \g_teilaufgabe_nr_tl \trenner:
      }
      \tl_if_empty:NTF \g_aufgabe_nr_tl {} {
        Aufgabe ~ Nr. ~ \g_aufgabe_nr_tl
      }
      \par
      \bigskip
    }
  }
}
%    \end{macrocode}

%    \begin{macrocode}
\cs_new:Npn \_gib_github_url: {
  \LehramtInformatikGithubDomain /
  \LehramtInformatikGithubTexRepo /
  blob /
  \LehramtInformatikGitBranch /
  \g_relativer_pfad_tl
}
%    \end{macrocode}

%    \begin{macrocode}
\cs_new:Npn \_gib_github_url_href: {
  \tl_if_empty:NTF \g_relativer_pfad_tl {} {
    \url{ \_gib_github_url: }
  }
}
%    \end{macrocode}

%    \begin{macrocode}
\cs_new:Npn \_gib_aufgaben_titel: {
  \g_titel_tl

  \tl_if_empty:NTF \g_thematik_tl
  {}
  {
   \, ~ [
    \g_thematik_tl
   ]
  }
}
%    \end{macrocode}

%    \begin{macrocode}
\cs_new:Npn \titel_seite:nn #1 #2
{
  \pagestyle{empty}

  \strut
  \vspace{1cm}

  \begin{center}
    \bfseries
    \Large
    #1
    \par
  \end{center}

  \vfill

  \begin{center}
    \large
    #2
    \par
  \end{center}

  \vfill

  \begin{center}
    \bGrafikLogo[width=8cm]
    \par

    \vspace{4cm}

    {
      \bfseries
      \Large
      \bMetaBschlangaulSammlung
    }
    \par

    \medskip

    {
      \large
      \bMetaHermineFriends
    }
    \par
  \end{center}

  \vspace{2cm}

  \strut

  \clearpage
}
%    \end{macrocode}

%    \begin{macrocode}
\cs_new:Npn \keine_einrueckung: {
  \par
  \@afterindentfalse
  \@afterheading
}
%    \end{macrocode}

%    \begin{macrocode}
\msg_new:nnn { aufgabenmetadaten } { kein-titel }
  { Der~Schlüssel~ist~zwingend~notwendig }
%    \end{macrocode}

% biblatex not working with lualatex and babel
%    \begin{macrocode}
% \RequirePackage{polyglossia}
% \setmainlanguage{german}
%    \end{macrocode}

%    \begin{macrocode}

%    \end{macrocode}
% \subsection{baum.sty}
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[1995/12/01]
\ProvidesPackage{bschlangaul-baum}[2020/06/13 Zum Setzen von
Binär- und AVL-Bäumen. Hüll-Paket um TikZ and tikz-qtree.]
%    \end{macrocode}

%    \begin{macrocode}
\RequirePackage{tikz}
%    \end{macrocode}

% für |b binaer baum|
%    \begin{macrocode}
\RequirePackage{tikz-qtree}
%    \end{macrocode}

% Für b baum
%    \begin{macrocode}
\usetikzlibrary{shapes.multipart}
%    \end{macrocode}

% \newpage\subsubsection{Binärbaum}

% TikZ-Stil: |b binaer baum|: Knoten als Kreise, Kanten als Pfeile.

% \begin{verbatim}
% \begin{tikzpicture}[b binaer baum]
% \Tree
% [.7
%   [.2
%     [.1 ]
%     [.5 ]
%   ]
%   \edge[blank]; \node[blank]{};
% ]
% \end{tikzpicture}
% \end{verbatim}

% \begin{bBeispiel}
% \begin{tikzpicture}[b binaer baum]
% \Tree
% [.7
%   [.2
%     [.1 ]
%     [.5 ]
%   ]
%   \edge[blank]; \node[blank]{};
% ]
% \end{tikzpicture}
% \end{bBeispiel}

% \index{tikz: b binaer baum}
%    \begin{macrocode}
\tikzset{
  b binaer baum/.style={
    shorten <=2pt,
    shorten >=2pt,
    ->,
    every tree node/.style={
      minimum width=2em,
      draw,
      rectangle
    },
    blank/.style={
      draw=none
    },
    edge from parent/.style={
      draw,
      edge from parent path={(\tikzparentnode) -- (\tikzchildnode)}
    },
    level distance=1cm,
    every label/.style={
      gray,
      font=\footnotesize,
      label position=0,
      label distance=0cm,
    }
  },
}
%    \end{macrocode}

% \newpage\subsubsection{AVL-Baum}

% \begin{verbatim}
% \begin{tikzpicture}[b binaer baum]
% \Tree
% [.\node[label=-1]{5};
%   [.\node[label=-1]{2};
%     [.\node[label=0]{1}; ]
%     \edge[blank]; \node[blank]{};
%   ]
%   [.\node[label=0]{7}; ]
% ]
% \end{tikzpicture}
% \end{verbatim}

% \begin{bBeispiel}
% \begin{tikzpicture}[b binaer baum]
% \Tree
% [.\node[label=-1]{5};
%   [.\node[label=-1]{2};
%     [.\node[label=0]{1}; ]
%     \edge[blank]; \node[blank]{};
%   ]
%   [.\node[label=0]{7}; ]
% ]
% \end{tikzpicture}
% \end{bBeispiel}

% \newpage\subsubsection{B-Baum}

% \begin{verbatim}
% \begin{tikzpicture}[
%   scale=0.8,
%   transform shape,
%   b bbaum,
%   level 1/.style={level distance=10mm,sibling distance=32mm},
%   level 2/.style={level distance=10mm,sibling distance=20mm},
% ]
% \node {10 \nodepart{two} 33}
%   child {node {8}
%     child {node {5}}
%     child {node {9}}
%   }
%   child {node {20}
%     child {node {15}}
%     child {node {31}}
%   }
%   child {node {50}
%     child {node {45}}
%     child {node {60 \nodepart{two} 80}}
%   }
% ;
% \end{tikzpicture}
% \end{verbatim}

% \begin{bBeispiel}
% \begin{tikzpicture}[
%   scale=0.8,
%   transform shape,
%   b bbaum,
%   level 1/.style={level distance=10mm,sibling distance=32mm},
%   level 2/.style={level distance=10mm,sibling distance=20mm},
% ]
% \node {10 \nodepart{two} 33}
%   child {node {8}
%     child {node {5}}
%     child {node {9}}
%   }
%   child {node {20}
%     child {node {15}}
%     child {node {31}}
%   }
%   child {node {50}
%     child {node {45}}
%     child {node {60 \nodepart{two} 80}}
%   }
% ;
% \end{tikzpicture}
% \end{bBeispiel}

% \index{tikz: bbaum}
%    \begin{macrocode}
\tikzset{
  b bbaum knoten/.style={
    rectangle split parts=10,
    rectangle split,
    rectangle split horizontal,
    rectangle split ignore empty parts,
    draw,
    fill=white
  },
  b bbaum/.style={
    every node/.style={
      b bbaum knoten
    },
    level 1/.style={
      level distance=12mm,
      sibling distance=25mm,
    },
    every child/.style={
      shorten <= 2pt,
      shorten >= 6pt,
      ->,
    },
    level 2/.style={
      level distance=9mm,
      sibling distance=15mm,
    },
  }
}
%    \end{macrocode}

% \begin{environment}{bBaum}
% |\begin{bBaum}{beschriftung}\end{bBaum}|: Zum
% Einbetten eines Baums.
%    \begin{macrocode}
\NewDocumentEnvironment { bBaum }{ m +b }
{
  {
    \small
    \noindent
    \textit{#1}:
  }
  \begin{center}
  #2
  \medskip
  \end{center}
} {}
%    \end{macrocode}
% \end{environment}

%    \begin{macrocode}

%    \end{macrocode}
% \subsection{checkbox.sty}
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[1995/12/01]
\ProvidesPackage{bschlangaul-checkbox}[2020/12/14 Zum Setzen von
Multiple-Choice-Fragen. Simulation von Kästchen zum ankreuzen]
%    \end{macrocode}

%    \begin{macrocode}
\RequirePackage{amssymb}
%    \end{macrocode}

% \bFaulenzer{
%   l = bCheckboxLeer,
%   k = bCheckboxAngekreuzt
% }

% \begin{macro}{\bCheckboxAngekreuzt}
% Angekreuztes Kästchen (nur innerhalb der |itemize|-Umgebung zu verwenden.
%    \begin{macrocode}
\def\bCheckboxAngekreuzt{\item[$\boxtimes$]}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bCheckboxLeer}
% Nicht angekreuztes Kästchen (nur innerhalb der |itemize|-Umgebung zu verwenden.
%    \begin{macrocode}
\def\bCheckboxLeer{\item[$\square$]}
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}

%    \end{macrocode}
% \subsection{chomsky-normalform.sty}
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[1995/12/01]
\ProvidesPackage{bschlangaul-chomsky-normalform}[2021/03/26
Hilfsmakros zum Setzen des Algorithmus zum Erreichen der Chomsky-Normalform]
%    \end{macrocode}

%    \begin{macrocode}
\ExplSyntaxOn
%    \end{macrocode}

%    \begin{macrocode}
\bLadePakete{typographie}
%    \end{macrocode}

% \bFaulenzer{
%   erklaerung = bChomskyErklaerung,
%   schritt = bChomskyUeberschrift,
%   schrittE = bChomskyUeberErklaerung,
% }

% \subsubsection{TeX-Markup-Grundgerüst}

% \begin{verbatim}
% \let\schrittE=\bChomskyUeberErklaerung
% \begin{enumerate}
% \item \schrittE{1}
% \item \schrittE{2}
% \item \schrittE{3}
% \item \schrittE{4}
% \end{enumerate}
% \end{verbatim}

% \subsubsection{Konkretes TeX-Markup-Beispiel}

% \begin{verbatim}
% \begin{enumerate}
% \item \schrittE{1}
%
% \bNichtsZuTun
%
% \item \schrittE{2}
%
% \begin{bProduktionsRegeln}
% S -> d S e | a | U c T | S b U,
% T -> d S e | a,
% U -> d S e | a | U c T,
% \end{bProduktionsRegeln}
%
% \item \schrittE{3}
%
% \begin{bProduktionsRegeln}
% S -> D S E | a | U C T | S B U,
% T -> D S E | a,
% U -> D S E | a | U C T,
% B -> b,
% C -> c,
% D -> d,
% E -> e,
% \end{bProduktionsRegeln}
%
% \item \schrittE{4}
% % S   -> S S.1 | T2 S.2 | a | U S.3
% % T   -> T2 S.2 | a
% % U   -> T2 S.2 | a | U S.3
% % T1  -> b
% % T2  -> d
% % T3  -> e
% % T4  -> c
% % S.1 -> T1 U
% % S.2 -> S T3
% % S.3 -> T4 T
%
% \begin{bProduktionsRegeln}
% S -> D S_E | a | U C_T | S B_U, % S   -> S S.1 | T2 S.2 | a | U S.3
% T -> D S_E | a, % T   -> T2 S.2 | a
% U -> D S_E | a | U C_T, % U   -> T2 S.2 | a | U S.3
% B -> b, % T1  -> b
% C -> c, % T4  -> c
% D -> d, % T2  -> d
% E -> e, % T3  -> e
% S_E -> S E, % S.2 -> S T3
% C_T -> C T, % S.3 -> T4 T
% B_U -> B U, % S.1 -> T1 U
% \end{bProduktionsRegeln}
% \end{enumerate}
% \end{verbatim}

% \begin{macro}{\bChomskyUeberschrift}
% \bMakroFaulenzer{schritt}{liChomskyUeberschrift}
%    \begin{macrocode}
\def\bChomskyUeberschrift#1{
  {
    \bfseries
    \rmfamily
    \str_case:nn {#1} {
      {1} {Elimination~der~$\varepsilon$-Regeln}
      {2} {Elimination~von~Kettenregeln}
      {3} {Separation~von~Terminalzeichen}
      {4} {Elimination~von~mehrelementigen~Nonterminalketten}
    }
  }
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bChomskyErklaerung}
% \bMakroFaulenzer{erklaerung}{liChomskyErklaerung}
%  Hoffmann Seite 180
%    \begin{macrocode}
\def\li@chomsky@erklaerung@texte#1{
  \str_case:nn {#1} {
    %
    {1} {
      Alle~Regeln~der~Form~$A~\rightarrow~\varepsilon$~werden~eliminiert.~
      Die~Ersetzung~von~$A$~wird~durch~$\varepsilon$~in~allen~anderen~
      Regeln~vorweggenommen.
    }
    {2} {
      Jede~Produktion~der~Form~$A~\rightarrow~B$~mit~$A,~B~\in~S$~wird~
      als~Kettenregel~bezeichnet.~Diese~tragen~nicht~zur~Produktion~
      von~Terminalzeichen~bei~und~lassen~sich~ebenfalls~eliminieren.
    }
    {3} {
      Jedes~Terminalzeichen~$\sigma$,~das~in~Kombination~mit~anderen~
      Symbolen~auftaucht,~wird~durch~ein~neues~Nonterminal~
      $S\sb{\sigma}$~ersetzt~und~die~Menge~der~Produktionen~durch~die~
      Regel~$S\sb{\sigma}~\rightarrow~\sigma$~ergänzt.
    }
    {4} {
      Alle~Produktionen~der~Form~
      $A\rightarrow~B\sb{1}~B\sb{2}~\dots~B\sb{n}$~
      werden~in~die~Produktionen~
      $A~\rightarrow~
      A\sb{n-1}~B\sb{n},~A\sb{n-1}~\rightarrow~
      A\sb{n-2}~B\sb{n-1},~\dots,~
      A\sb{2}~\rightarrow~B\sb{1}~B\sb{2}$~zerteilt.~
      Nach~der~Ersetzung~sind~alle~längeren~Nonterminalketten~
      vollständig~heruntergebrochen~und~die~Chomsky-Normalform~erreicht.
    }
  }
}
\def\bChomskyErklaerung#1{
  {
    \itshape
    \footnotesize
    \bParagraphMitLinien{\li@chomsky@erklaerung@texte{#1}}
  }
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bChomskyUeberErklaerung}
% \bMakroFaulenzer{schrittE}{liChomskyUeberErklaerung}
%    \begin{macrocode}
\def\bChomskyUeberErklaerung#1{
  \bChomskyUeberschrift{#1}\par
  \bChomskyErklaerung{#1}
}
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}
\ExplSyntaxOff

%    \end{macrocode}
% \subsection{cpm.sty}
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[1995/12/01]
\ProvidesPackage{bschlangaul-cpm}[2020/09/03]
\RequirePackage{tikz}
%    \end{macrocode}

%    \begin{macrocode}
\bLadePakete{mathe,typographie}
%    \end{macrocode}

% \bFaulenzer{
%   f = footnotesize,
%   FZ = bCpmFruehI,
%   SZ = bCpmSpaetI,
%   v = bCpmVon,
%   vz = bCpmVonZu,
%   z = bCpmZu,
% }

% \subsubsection{TeX-Markup-Beispiel: Graph}

% \begin{tikzpicture}[scale=0.8,transform shape]
% \bCpmEreignis{1}{0}{2}
% \bCpmEreignis{2}{1}{4}
% \bCpmEreignis{3}{1}{0}
% \bCpmEreignis{4}{3}{4}
% \bCpmEreignis{5}{3}{2}
% \bCpmEreignis{6}{3}{0}
% \bCpmEreignis{7}{5}{4}
% \bCpmEreignis{8}{5}{2}
% \bCpmEreignis{9}{5}{0}
% \bCpmEreignis{10}{7}{2}

% \bCpmVorgang{1}{2}{10}
% \bCpmVorgang{1}{3}{22}
% \bCpmVorgang{1}{5}{6}
% \bCpmVorgang{1}{6}{5}
% \bCpmVorgang{3}{6}{8}
% \bCpmVorgang{2}{5}{5}
% \bCpmVorgang{2}{4}{8}
% \bCpmVorgang{4}{7}{12}
% \bCpmVorgang{7}{8}{3}
% \bCpmVorgang{7}{10}{6}
% \bCpmVorgang{9}{10}{9}
% \bCpmVorgang{6}{9}{11}
% \bCpmVorgang{8}{10}{7}
% \bCpmVorgang{4}{5}{1}

% \bCpmVorgang[schein]{5}{6}{}
% \bCpmVorgang[schein]{5}{8}{}
% \end{tikzpicture}

% \begin{verbatim}
% \begin{tikzpicture}[scale=0.8,transform shape]
% \bCpmEreignis{1}{0}{2}
% \bCpmEreignis{2}{1}{4}
% \bCpmEreignis{3}{1}{0}
%
% \bCpmVorgang{1}{2}{10}
% \bCpmVorgang{1}{3}{22}
% \bCpmVorgang{1}{5}{6}
%
% \bCpmVorgang[schein]{5}{6}{}
% \bCpmVorgang[schein]{5}{8}{}
% \end{tikzpicture}
% \end{verbatim}

% \subsubsection{TeX-Markup-Beispiel: Ergebnistabelle}

% \begin{verbatim}
% \begin{tabular}{|l|l|l|l|l|l|l|l|}
% \hline
% $i$ & a & b & c  & d  & e  & f  & g  \\\hline\hline
% \FZ & 0 & 2 & 5  & 6  & 10 & 3  & 12 \\\hline
% \SZ & 0 & 2 & 5  & 10 & 10 & 6  & 12 \\\hline
% GP  & 0 & 0 & 0  & 3  & 0  & 3  & 0  \\\hline
% \end{tabular}
% \end{verbatim}

% \subsubsection{TeX-Markup-Beispiel: Nebenrechnungstabelle „Frühester Zeitpunkt“}

% \begin{verbatim}
% \bCpmFruehErklaerung
% \begin{tabular}{|l|l|r|}
% \hline
% $i$ & Nebenrechnung            & \FZ \\\hline
% 1   &                          & 0   \\
% 2   &                          & 5   \\
% 3   &                          & 18  \\
% 4   &                          & 7   \\
% 5   &                          & 19  \\
% 6   &                          & 26  \\
% 7   & $\max(19_3, 22_4)$       & 22  \\
% 8   & $\max(30_5, 30_6, 28_7)$ & 30  \\\hline
% \end{tabular}
% \end{verbatim}

% \subsubsection{TeX-Markup-Beispiel: Nebenrechnungstabelle „Spätester Zeitpunkt“}

% \begin{verbatim}
% \bCpmSpaetErklaerung
% % Absteigend nach i sortieren
% \begin{tabular}{|l|l|r|}
% \hline
% $i$ & Nebenrechnung         & \SZ \\\hline
% 8   & siehe \FZ[8]          & 30  \\
% 7   &                       & 24  \\
% 6   &                       & 26  \\
% 5   &                       & 19  \\
% 4   &                       & 9   \\
% 3   & $\min(18_6, 23_7)$    & 18  \\
% 2   &                       & 5   \\
% 1   & $\min(0_2, 0_3, 2_4)$ & 0   \\\hline
% \end{tabular}
% \end{verbatim}

% \begin{macro}{\bCpmEreignis}
% |liCpmEreignis\{(.*)\}\((.*),(.*)\)| -> |liCpmEreignis{$1}{$2}{$3}|
%    \begin{macrocode}
\ExplSyntaxOn
\NewDocumentCommand { \bCpmEreignis } { O{} m m m  } {
  \tl_set:Nn \l_name_tl {}

  \keys_define:nn { cpmEreignis } {
    name .code:n = {\tl_set:Nn \l_name_tl {##1}},
  }

  \keys_set:nn { cpmEreignis } { #1 }

  \tl_if_empty:NT \l_name_tl {
    \tl_set:Nn \l_name_tl {#2}
  }

  \node[circle,draw] (\l_name_tl) at (#3,#4) {#2};
}
\ExplSyntaxOff
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bCpmVorgang}
% |liCpmVORGANG\((.*)>(.*)\)\{(.*)\}|
%    \begin{macrocode}
\ExplSyntaxOn
\NewDocumentCommand { \bCpmVorgang } { O{} m m m  } {
  \tl_set:Nn \l_schein_tl {}
  \tl_set:Nn \l_kritisch_tl {}

  \keys_define:nn { cpmVorgang } {
    schein .code:n = {\tl_set:Nn \l_schein_tl {dashed}},
    kritisch .code:n = {\tl_set:Nn \l_kritisch_tl {very~thick}},
  }

  \keys_set:nn { cpmVorgang } { #1 }

  \path[->,\l_schein_tl,\l_kritisch_tl] (#2) edge node[auto,sloped] {#4} (#3);
}
\ExplSyntaxOff
%    \end{macrocode}
% \end{macro}

% \subsubsection{Hilfsmakros für Zeitpunkt-Tabelle}

% \begin{verbatim}
% \begin{tabular}{|l||l|l|l|l|l|l|l|l|}
% \hline
% $i$ & 1 & 2 & 3  & 4 & 5  & 6  & 7  & 8  \\\hline\hline
% \FZ & 0 & 5 & 18 & 7 & 19 & 26 & 22 & 30 \\\hline
% \SZ & 0 & 5 & 18 & 9 & 19 & 26 & 24 & 30 \\\hline
% GP  & 0 & 0 & 0  & 2 & 0  & 0  & 2  & 0  \\\hline
% \end{tabular}
% \end{verbatim}

% \begin{macro}{\bCpmVonZu}
% \bMakroFaulenzer{vz}{liCpmVonZu}
% |\bCpmVonZu{1}(2-3)|: \bCpmVonZu{1}(2-3)
%    \begin{macrocode}
\def\bCpmVonZuOhneMathe#1(#2-#3){#1_{\scriptscriptstyle(#2\rightarrow#3)}}
\def\bCpmVonZu#1(#2-#3){%
  \ifmmode%
    \bCpmVonZuOhneMathe{#1}(#2-#3)%
  \else%
    $\bCpmVonZuOhneMathe{#1}(#2-#3)$%
  \fi%
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bCpmVon}
% \bMakroFaulenzer{v}{liCpmVon}
% |\bCpmVon{1}(2)|: \bCpmVon{1}(2)
%    \begin{macrocode}
\def\bCpmVonOhneMathe#1(#2){#1_{\scriptscriptstyle(\rightarrow#2)}}
\def\bCpmVon#1(#2){%
  \ifmmode%
    \bCpmVonOhneMathe{#1}(#2)%
  \else%
    $\bCpmVonOhneMathe{#1}(#2)$%
  \fi%
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bCpmZu}
% \bMakroFaulenzer{z}{liCpmZu}
% |\bCpmZu{1}(2)|: \bCpmZu{1}(2)
%    \begin{macrocode}
\def\bCpmZuOhneMathe#1(#2){#1_{\scriptscriptstyle(\leftarrow#2)}}
\def\bCpmZu#1(#2){%
  \ifmmode%
    \bCpmZuOhneMathe{#1}(#2)%
  \else%
    $\bCpmZuOhneMathe{#1}(#2)$%
  \fi%
}
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}
\ExplSyntaxOn
%    \end{macrocode}

% \begin{macro}{\bCpmSpaetI}
% Spätester Zeitpunkt, zu dem Ereignis $i$ eintreten kann
% \bMakroFaulenzer{SZ}{liCpmSpaetI}
%    \begin{macrocode}
\NewDocumentCommand{ \bCpmSpaetI } { O{i} } {
  \ifmmode
    SZ\sb{#1}
  \else
    $SZ\sb{#1}$
  \fi
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bCpmFruehI}
% Frühester Zeitpunkt, zu dem Ereignis $i$ eintreten kann.
% \bMakroFaulenzer{FZ}{liCpmFruehI}
%    \begin{macrocode}
\NewDocumentCommand{ \bCpmFruehI } { O{i} } {
  \ifmmode
    FZ\sb{#1}
  \else
    $FZ\sb{#1}$
  \fi
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bCpmFruehErklaerung}
% \begin{bBeispiel}
% \bCpmFruehErklaerung
% \end{bBeispiel}
%    \begin{macrocode}
\def\bCpmFruehErklaerung{
  \bParagraphMitLinien{
    Wir~führen~eine~Vorwärtsterminierung~durch~
    und~addieren~die~Dauern.~

    Kann~ein~Ereignis~über~mehrere~Vorgänge~erreicht~
    werden,~wählen~wir~das~Maximum~aus.~

    \textbf{Erläuterungen:}~

    $i$:~
    Ereignis~$i$;~\,

    \bCpmFruehI{}:~
    Frühester~Zeitpunkt,~zu~dem~Ereignis~$i$~eintreten~kann
    .
  }
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bCpmSpaetErklaerung}
% \begin{bBeispiel}
% \bCpmSpaetErklaerung
% \end{bBeispiel}
%    \begin{macrocode}
\def\bCpmSpaetErklaerung{
  \bParagraphMitLinien{
    Wir~führen~eine~Rückwärtsterminierung~durch~
    und~subtrahieren~die~Dauern~vom~letzten~Ereignis~aus.~

    Kann~ein~Ereignis~über~mehrere~Vorgänge~erreicht~
    werden,~wählen~wir~das~Minimum~aus.~

    \textbf{Erläuterungen:}~

    $i$:~
    Ereignis~$i$;~\,

    \bCpmSpaetI{}:~
    Spätester~Zeitpunkt,~zu~dem~Ereignis~$i$~eintreten~kann
    .
  }
}
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}
\ExplSyntaxOff
%    \end{macrocode}

%    \begin{macrocode}

%    \end{macrocode}
% \subsection{cyk-algorithmus.sty}
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[1995/12/01]
\ProvidesPackage{bschlangaul-cyk-algorithmus}[2021/06/18 Hilfsmakros
zum Setzen des CYK-Algorithmus]
%    \end{macrocode}

% \bFaulenzer{
%   l = bKurzeTabellenLinie,
% }

% \subsubsection{TeX-Markup-Beispiel}

% \begin{verbatim}
% \begin{tabular}{|c|c|c|c|c|c|}
% a     & c     & b     & c     & a     & b \\\hline\hline
%
% $R_a$ & $R_c$ & $R_b$ & $R_c$ & $R_a$ & $R_b$ \l6
% B     & A     & A     & B     & C \l5
% S     & -     & S     & S \l4
% -     & -     & - \l3
% -     & - \l2
% S \l1
% \end{tabular}
% \bWortInSprache{acbcab}
% \end{verbatim}

% \begin{macro}{\bKurzeTabellenLinie}
% \bMakroFaulenzer{l}{liKurzeTabellenLinie}
%    \begin{macrocode}
\def\bKurzeTabellenLinie#1{\\\cline{1-#1}}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bWortInSprache}
% |\bWortInSprache{abc}|: \bWortInSprache{abc} \\
% |\bWortInSprache{abc}[L(Z)]|: \bWortInSprache{abc}[L(Z)]
%    \begin{macrocode}
\NewDocumentCommand{ \bWortInSprache } { m O{L(G)} } {
  \bigskip
  \noindent
  $\Rightarrow #1 \in #2$
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bWortNichtInSprache}
% |\bWortNichtInSprache{abc}|: \bWortNichtInSprache{abc} \\
% |\bWortNichtInSprache{abc}[L(Z)]|: \bWortNichtInSprache{abc}[L(Z)]
%    \begin{macrocode}
\NewDocumentCommand{ \bWortNichtInSprache } { m O{L(G)} } {
  \bigskip
  \noindent
  $\Rightarrow #1 \notin #2$
}
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}

%    \end{macrocode}
% \subsection{entwurfsmuster.sty}
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[1995/12/01]
\ProvidesPackage{bschlangaul-entwurfsmuster}[2021/05/06
Hilfsmakros zum Setzen von Entwurfsmustern / Design Patterns]
%    \end{macrocode}
%
% \subsubsection{Namensschema der Entwurfsmuster-Makros:}
%
% Präfix: |\bEntwurfs| +
% Name des Entwurfsmuster |DeutscherName| +
% Suffix: (|Uml|, |Akteure|, |Code|, |ohne|)
%
% \subsubsection{Reihenfolge}
%
% \begin{enumerate}
% \item |Beschreibung|
% Kurze Beschreibung des Entwurfsmusters, z. B |\bEntwurfsEinzelstueckBeschreibung|
% \item |Uml|:
% Uml-Klassendiagramm, z. B |\bEntwurfsEinzelstueckUml|
% \item |Akteure|:
% Akteure, beteiligte Klassen, z. B |\bEntwurfsEinzelstueckAkteure|
% \item |Code|:
% Allgemeines Code-Beispiel, z. B |\bEntwurfsEinzelstueckCode|
% \item |ohne|:
% Ohne Suffix, Bündelung der einzelnen Makros eines Entwurfsmusters
% |\bEntwurfsEinzelstueckAkteure|
% \end{enumerate}

%    \begin{macrocode}
\RequirePackage{bschlangaul-uml}
%    \end{macrocode}

% \begin{macro}{\li@EntwurfsCodeAllgemein}
% Allgemeine Code-Beispiele zu den UML-Diagrammen und Stellvertretern
%    \begin{macrocode}
\RequirePackage{bschlangaul-syntax}
\def\li@EntwurfsCode#1#2{
  \bJavaDatei{entwurfsmuster/#1/allgemein/#2}
}
%    \end{macrocode}
% \end{macro}

% \subsubsection{Abstrakte Fabrik (Abstract Factory)}

% \begin{macro}{\bEntwurfsAbstrakteFabrikBeschreibung}
%    \begin{macrocode}
\def\bEntwurfsAbstrakteFabrikBeschreibung{
  Es wird eine Schnittstelle bereitgestellt, um \emph{Familien
  verbundener oder abhängiger Objekte} zu erstellen, ohne die konkreten
  Klassen zu spezifizieren.\footcite[Seite 25]{eilebrecht}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bEntwurfsAbstrakteFabrikUml}
% \begin{bBeispiel}
% \bEntwurfsAbstrakteFabrikUml
% \end{bBeispiel}
%    \begin{macrocode}
\def\bEntwurfsAbstrakteFabrikUml{
  \begin{tikzpicture}
    \umlclass[type=abstract]{AbstrakteFabrik}{}{
      erzeugeProduktA()\\
      erzeugeProduktB()\\
    }
    \umlclass[below left=1cm and -1.5cm of AbstrakteFabrik]{Fabrik1}{}{
      erzeugeProduktA()\\
      erzeugeProduktB()\\
    }
    \umlclass[below right=1cm and -1.5cm of AbstrakteFabrik]{Fabrik2}{}{
      erzeugeProduktA()\\
      erzeugeProduktB()\\
    }
    \umlVHVinherit{Fabrik1}{AbstrakteFabrik}
    \umlVHVinherit{Fabrik2}{AbstrakteFabrik}

    \umlsimpleclass[right=3cm of AbstrakteFabrik,type=abstract]{AbstraktesProduktA}
    \umlsimpleclass[below left=1cm and -1cm of AbstraktesProduktA]{ProduktA1}
    \umlsimpleclass[below right=1cm and -1cm of AbstraktesProduktA]{ProduktA2}
    \umlVHVinherit{ProduktA1}{AbstraktesProduktA}
    \umlVHVinherit{ProduktA2}{AbstraktesProduktA}

    \umlsimpleclass[above right=0cm and 1cm of AbstraktesProduktA]{Klient}

    \umlsimpleclass[below=4.5cm of AbstraktesProduktA,type=abstract]{AbstraktesProduktB}
    \umlsimpleclass[below left=1cm and -1cm of AbstraktesProduktB]{ProduktB1}
    \umlsimpleclass[below right=1cm and -1cm of AbstraktesProduktB]{ProduktB2}
    \umlVHVinherit{ProduktB1}{AbstraktesProduktB}
    \umlVHVinherit{ProduktB2}{AbstraktesProduktB}

    \umlVHVdep[arm1=-1.3cm,arm2=-1cm]{Fabrik1}{ProduktA1}
    \umlVHVdep[arm2=-1cm]{Fabrik1}{ProduktB1}

    \umlVHVdep[arm1=-1.8cm,arm2=-1.5cm]{Fabrik2}{ProduktA2}
    \umlVHVdep[arm2=-1.5cm]{Fabrik2}{ProduktB2}

    \umluniassoc[anchor2=25]{Klient}{AbstrakteFabrik}
    \umlVHuniassoc[arm1=-1cm]{Klient}{AbstraktesProduktA}
    \umlVHuniassoc{Klient}{AbstraktesProduktB}
  \end{tikzpicture}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bEntwurfsAbstrakteFabrikCode}
%    \begin{macrocode}
\def\bEntwurfsAbstrakteFabrikCode{
  \li@EntwurfsCode{abstrakte_fabrik}{Produkte}
  \li@EntwurfsCode{abstrakte_fabrik}{AbstrakteFabrik}
  \li@EntwurfsCode{abstrakte_fabrik}{Klient}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bEntwurfsAbstrakteFabrik}
%    \begin{macrocode}
\def\bEntwurfsAbstrakteFabrik{
  \bEntwurfsAbstrakteFabrikBeschreibung

  \bEntwurfsAbstrakteFabrikUml

  \bEntwurfsAbstrakteFabrikCode
}
%    \end{macrocode}
% \end{macro}

% \subsubsection{Adapter}

% \begin{macro}{\bEntwurfsAdapterUml}
% \begin{bBeispiel}
% \bEntwurfsAdapterUml
% \end{bBeispiel}
%    \begin{macrocode}
\def\bEntwurfsAdapterUml{
  \begin{tikzpicture}
    \umlsimpleclass[x=1,y=3]{Klient}{}{}
    \umlclass[x=4,y=3,type=interface]{Ziel}{}{agiere()}
    \umlclass[x=4,y=0]{Adapter}{}{agiere()}
    \umlclass[x=8,y=1.5]{Dienst}{}{agiereSpeziell()}

    \umlreal{Adapter}{Ziel}
    \umluniassoc{Klient}{Ziel}
    \umlinherit{Adapter}{Dienst}

    \umlnote[x=7,y=-1,width=2cm]{Adapter}{agiereSpeziell()}
  \end{tikzpicture}
  \footcite[so ähnlich wie GoF]{wiki:adapter}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bEntwurfsAdapterAkteure}
% \begin{bBeispiel}
% \bEntwurfsAdapterAkteure
% \end{bBeispiel}
%    \begin{macrocode}
\def\bEntwurfsAdapterAkteure{
  \begin{description}

    \item[Ziel (Target)]

    Das Ziel definiert die Schnittstelle, die der Klient nutzen kann.

    \item[Klient (Client)]

    Der Klient nutzt Dienste über inkompatible Schnittstellen und greift
    dabei auf adaptierte Schnittstellen zurück.

    \item[Dienst (Adaptee)]

    Der Dienst bietet wiederzuverwendende Dienstleistungen mit fest
    definierter Schnittstelle an.

    \item[Adapter]

    Der Adapter adaptiert die Schnittstelle des Dienstes auf die
    Schnittstelle zum Klienten.\footcite{wiki:adapter}

  \end{description}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bEntwurfsAdapterCode}
%    \begin{macrocode}
\def\bEntwurfsAdapterCode{
  \li@EntwurfsCode{adapter}{Dienst}
  \li@EntwurfsCode{adapter}{Ziel}
  \li@EntwurfsCode{adapter}{Adapter}
  \li@EntwurfsCode{adapter}{Klient}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bEntwurfsAdapter}
%    \begin{macrocode}
\def\bEntwurfsAdapter{
  \bEntwurfsAdapterUml
  \bEntwurfsAdapterAkteure
  \bEntwurfsAdapterCode
}
%    \end{macrocode}
% \end{macro}

% \subsubsection{Beobachter (Observer)}

% \begin{macro}{\bEntwurfsBeobachterUml}
% \begin{bBeispiel}
% \bEntwurfsBeobachterUml
% \end{bBeispiel}
%    \begin{macrocode}
\def\bEntwurfsBeobachterUml{
  \begin{tikzpicture}
    \umlclass[x=0,y=0,type=abstract]{Gegenstand}{}{
      + registriere(beobachter: Beobachter): void\\
      + entferne(beobachter: Beobachter): void\\
      + benachrichtige(beobachter: Beobachter): void\\
    }
    \umlclass[x=0,y=-3]{KonkreterGegenstand}{}{
      + setzteZustand(zustand: Zustand): void
    }
    \umlinherit{KonkreterGegenstand}{Gegenstand}

    \umlclass[x=8,y=0,type=interface]{Beobachter}{}{
      + aktualisiere(zustand: Zustand): void
    }
    \umlclass[x=8,y=-3]{KonkreterBeobachter}{}{
      + aktualisiere(zustand: Zustand): void
    }
    \umlreal{KonkreterBeobachter}{Beobachter}

    \umlHVHaggreg[arg1=beobachter,pos1=0.8,mult2=*,pos2=2.5]
    {KonkreterGegenstand}{Beobachter}
  \end{tikzpicture}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bEntwurfsBeobachterAkteure}
% \begin{bBeispiel}
% \bEntwurfsBeobachterAkteure
% \end{bBeispiel}
%    \begin{macrocode}
\def\bEntwurfsBeobachterAkteure{
  \begin{description}
    \item[Gegenstand / Subjekt (Subject / Observable)]

    Ein Subjekt (beobachtbares Objekt, auf Englisch publisher, also
    „Veröffentlicher“, genannt) hat eine Liste von Beobachtern, ohne
    deren konkrete Typen zu kennen. Es bietet eine Schnittstelle zur An-
    und Abmeldung von Beobachtern und eine Schnittstelle zur
    Benachrichtigung von Beobachtern über Änderungen an.\footcite[Seite
    251]{gof}

    \item[Beobachter (Observer)]

    Die Beobachter (auf Englisch auch subscriber, also „Abonnent“,
    genannt) definieren eine Aktualisierungsschnittstelle.

    \item[konkreter/s Gegenstand / Subjekt (ConcreteSubject / ConcreteObservable)]

    Ein konkretes Subjekt (konkretes, beobachtbares Objekt) speichert
    den relevanten Zustand und benachrichtigt alle Beobachter bei
    Zustandsänderungen über deren Aktualisierungsschnittstelle. Es
    verfügt über eine Schnittstelle zur Erfragung des aktuellen
    Zustands.

    \item[Konkrete Beobachter (ConcreteObserver)]

    Konkrete Beobachter verwalten die Referenz auf ein konkretes
    Subjekt, dessen Zustand sie beobachten und speichern und dessen
    Zustand konsistent ist. Sie implementieren eine
    Aktualisierungsschnittstelle unter Verwendung der
    Abfrageschnittstelle des konkreten Subjekts.
    \footcite{wiki:beobachter}
  \end{description}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bEntwurfsBeobachterCode}
%    \begin{macrocode}
\def\bEntwurfsBeobachterCode{
  \li@EntwurfsCode{beobachter}{Gegenstand}
  \li@EntwurfsCode{beobachter}{KonkreterGegenstand}
  \li@EntwurfsCode{beobachter}{Beobachter}
  \li@EntwurfsCode{beobachter}{KonkreterBeobachterA}
  \li@EntwurfsCode{beobachter}{KonkreterBeobachterB}
  \li@EntwurfsCode{beobachter}{Klient}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bEntwurfsBeobachter}
%    \begin{macrocode}
\def\bEntwurfsBeobachter{
  \bEntwurfsBeobachterUml
  \bEntwurfsBeobachterAkteure
  \bEntwurfsBeobachterCode
}
%    \end{macrocode}
% \end{macro}

% \subsubsection{Dekorierer (Decorator)}

% \begin{macro}{\bEntwurfsDekoriererUml}
% \begin{bBeispiel}
% \bEntwurfsDekoriererUml
% \end{bBeispiel}
%    \begin{macrocode}
\def\bEntwurfsDekoriererUml{
  \begin{tikzpicture}
    \umlclass[type=abstract]{Komponente}{}{agiere()}
    \umlclass[below left=1.5cm and 0cm of Komponente]{KonkreteKomponente}{}{agiere()}
    \umlclass[below right=1.5cm and 0cm of Komponente,type=abstract]{Dekorierer}{}{agiere()}

    \umlVHVreal{KonkreteKomponente}{Komponente}
    \umlVHVreal{Dekorierer}{Komponente}

    \umlclass[below left=1.5cm and 0cm of Dekorierer]{KonkreterDekoriererA}{}{agiere()}
    \umlclass[below right=1.5cm and 0cm of Dekorierer]{KonkreterDekoriererB}{}{agiere()}

    \umlVHVinherit{KonkreterDekoriererA}{Dekorierer}
    \umlVHVinherit{KonkreterDekoriererB}{Dekorierer}

    \umlHVHaggreg[arm1=2cm]{Dekorierer}{Komponente}
    \footcite{wiki:dekorierer}
  \end{tikzpicture}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bEntwurfsDekoriererCode}
%    \begin{macrocode}
\def\bEntwurfsDekoriererCode{
  \li@EntwurfsCode{dekorierer}{Komponente}
  \li@EntwurfsCode{dekorierer}{KonkreteKomponente}
  \li@EntwurfsCode{dekorierer}{Dekorierer}
  \li@EntwurfsCode{dekorierer}{KonkreterDekoriererA}
  \li@EntwurfsCode{dekorierer}{KonkreterDekoriererB}
  \li@EntwurfsCode{dekorierer}{Klient}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bEntwurfsDekorierer}
%    \begin{macrocode}
\def\bEntwurfsDekorierer{
  \bEntwurfsDekoriererUml
  \bEntwurfsDekoriererAkteure
  \bEntwurfsDekoriererCode
}
%    \end{macrocode}
% \end{macro}

% \subsubsection{Einfache Fabrik (Simple Factory)}

% \begin{macro}{\bEntwurfsEinfacheFabrikUml}
% Quelle: \url{https://refactoring.guru/design-patterns/factory-comparison}
% \begin{bBeispiel}
% \bEntwurfsEinfacheFabrikUml
% \end{bBeispiel}
%    \begin{macrocode}
\def\bEntwurfsEinfacheFabrikUml{
  \begin{tikzpicture}
    \umlsimpleclass[type=abstract]{Produkt}
    \umlsimpleclass[below left=1cm and -0.65cm of Produkt]{ProduktA}
    \umlsimpleclass[below right=1cm and -0.65cm of Produkt]{ProduktB}
    \umlVHVinherit{Produkt}{ProduktA}
    \umlVHVinherit{Produkt}{ProduktB}
    \umlclass[below right=0cm and 1.5cm of Produkt]{EinfacheFabrik}{
    }{
      \umlstatic{erzeuge(diskriminator): Produkt}\\
    }
    \umlVHVdep[arm1=-1.5cm]{EinfacheFabrik}{ProduktA}
    \umlVHVdep[arm1=-1.5cm]{EinfacheFabrik}{ProduktB}
  \end{tikzpicture}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bEntwurfsEinfacheFabrikAkteure}
% Quelle: frei überstetzt aus GoF
% \begin{bBeispiel}
% \bEntwurfsEinfacheFabrikAkteure
% \end{bBeispiel}
%    \begin{macrocode}
\def\bEntwurfsEinfacheFabrikAkteure{
  \begin{description}
    \item[EinfacheFabrik]

    Eine Klasse mit einer Erzeugunsmethode, die über eine größere
    Bedingung verschiedene Objekt instanziert.

    \item[Produkt]

    Eine abstrakte Klasse, die von den konkreten Produkten geerbt wird.

    \item[KonkretesProdukt]

    Ein konkretes Produkt, das von der einfachen Fabrik erzeugt wird.
  \end{description}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bEntwurfsEinfacheFabrik}
%    \begin{macrocode}
\def\bEntwurfsEinfacheFabrik{
  \bEntwurfsEinfacheFabrikUml
  \bEntwurfsEinfacheFabrikAkteure
}
%    \end{macrocode}
% \end{macro}

% \subsubsection{Einzelstück (Singleton)}

% \begin{macro}{\bEntwurfsEinzelstueckBeschreibung}
%    \begin{macrocode}
\def\bEntwurfsEinzelstueckBeschreibung{
  Stellt sicher, dass nur \emph{genau eine Instanz einer Klasse} erzeugt
  wird.\footcite[Seite 38]{eilebrecht}
}
  %    \end{macrocode}
  % \end{macro}

% \begin{macro}{\bEntwurfsEinzelstueckUml}
% Quelle nach der deutschen Wikipedia
% \begin{bBeispiel}
% \bEntwurfsEinzelstueckUml
% \end{bBeispiel}
%    \begin{macrocode}
\def\bEntwurfsEinzelstueckUml{
  \begin{tikzpicture}
    \umlclass{Einzelstück}{
    \umlstatic{- instanz: Einzelstück}\\
    }{
    - Einzelstück()\\
    + gibInstanz(): Einzelstück
    }
  \end{tikzpicture}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bEntwurfsEinzelstueckAkteure}
% Quelle: frei überstetzt aus GoF
% \begin{bBeispiel}
% \bEntwurfsEinzelstueckAkteure
% \end{bBeispiel}
%    \begin{macrocode}
\def\bEntwurfsEinzelstueckAkteure{
  \begin{description}
    \item[Einzelstück (Singleton)]

    stellt eine statische Methode bereit, mit deren Hilfe die Klienten
    nur auf eine einzige Instanz der Klasse zugreifen können.
  \end{description}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bEntwurfsEinzelstueckCode}
%    \begin{macrocode}
\def\bEntwurfsEinzelstueckCode{
  \li@EntwurfsCode{einzelstueck}{Einzelstueck}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bEntwurfsEinzelstueck}
%    \begin{macrocode}
\def\bEntwurfsEinzelstueck{
  \bEntwurfsEinzelstueckBeschreibung

  \bEntwurfsEinzelstueckUml

  \bEntwurfsEinzelstueckAkteure

  \bEntwurfsEinzelstueckCode
}
%    \end{macrocode}
% \end{macro}

% \subsubsection{Erbauer (Builder)}

% \begin{macro}{\bEntwurfsErbauerUml}
% Quelle nach der deutschen Wikipedia
% \begin{bBeispiel}
% \bEntwurfsErbauerUml
% \end{bBeispiel}
%    \begin{macrocode}
\def\bEntwurfsErbauerUml{
  \begin{tikzpicture}
    \umlsimpleclass[x=7,y=0]{Produkt}{}{}
    \umlclass[x=4,y=3,type=interface]{Erbauer}{}{+ baueTeil()}
    \umlclass[x=4,y=0]{KonkreterErbauer}{}{
      + baueTeil()\\
      gibErgebnis()}
    \umlclass[x=0,y=3]{Direktor}{}{baue()}

    \umluniaggreg[arg2=erbauer,pos2=0.7,mult2=1]{Direktor}{Erbauer}
    \umluniassoc{KonkreterErbauer}{Produkt}
    \umlinherit{KonkreterErbauer}{Erbauer}

  \umlnote[x=0,y=0,width=3cm]{Direktor}{
    foreach item in structure\\
    erbauer.baueTeil()
  }
  \end{tikzpicture}
  \footcite{wiki:erbauer}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bEntwurfsErbauerAkteure}
% Quelle: deutsche Wikipedia
% \begin{bBeispiel}
% \bEntwurfsErbauerAkteure
% \end{bBeispiel}
%    \begin{macrocode}
\def\bEntwurfsErbauerAkteure{
  \begin{description}
    \item[Erbauer]

    Der Erbauer spezifiziert eine abstrakte Schnittstelle zur Erzeugung der
    Teile eines komplexen Objektes.

    \item[KonkreterErbauer]

    Der konkrete Erbauer erzeugt die Teile des komplexen Objekts durch
    Implementierung der Schnittstelle. Außerdem definiert und verwaltet er
    die von ihm erzeugte Repräsentation des Produkts. Er bietet auch eine
    Schnittstelle zum Auslesen des Produkts.

    \item[Direktor]

    Der Direktor konstruiert ein komplexes Objekt unter Verwendung der
    Schnittstelle des Erbauers. Der Direktor arbeitet eng mit dem Erbauer
    zusammen: Er weiß, welche Baureihenfolge der Erbauer verträgt oder
    benötigt. Der Direktor entkoppelt somit den Konstruktionsablauf vom
    Klienten.

    \item[Produkt]

    Das Produkt repräsentiert das zu konstruierende komplexe Objekt.
    \footcite{wiki:erbauer}
  \end{description}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bEntwurfsErbauer}
%    \begin{macrocode}
\def\bEntwurfsErbauer{
  \bEntwurfsErbauerUml
  \bEntwurfsErbauerAkteure
}
%    \end{macrocode}
% \end{macro}

% \subsubsection{Fabrikmethode (Factory Method)}

% \begin{macro}{\bEntwurfsFabrikmethodeUml}
% Quelle nach der deutschen Wikipedia
% \begin{bBeispiel}
% \bEntwurfsFabrikmethodeUml
% \end{bBeispiel}
%    \begin{macrocode}
\def\bEntwurfsFabrikmethodeUml{
  \begin{tikzpicture}
    \umlsimpleclass[type=abstract]{Produkt}
    \umlsimpleclass[below=2cm of Produkt]{KonkretesProdukt}
    \umlinherit{KonkretesProdukt}{Produkt}

    \umlclass[type=abstract,right=4cm of Produkt]{Erzeuger}{}{
      \textit{erzeugeProdukt()}\\
    }
    \umlclass[below=1.2cm of Erzeuger]{KonkreterErzeuger}{}{
    erzeugeProdukt()
    }
    \umlinherit{KonkreterErzeuger}{Erzeuger}

    \umldep{KonkreterErzeuger}{KonkretesProdukt}
  \end{tikzpicture}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bEntwurfsFabrikmethodeAkteure}
% Quelle: deutsche Wikipedia
% \begin{bBeispiel}
% \bEntwurfsFabrikmethodeAkteure
% \end{bBeispiel}
%    \begin{macrocode}
\def\bEntwurfsFabrikmethodeAkteure{
  \begin{description}
    \item[Produkt]

    Das Produkt ist der Basistyp (Klasse oder Schnittstelle) für das
    zu erzeugende Produkt.

    \item[KonkretesProdukt]

    KonkretesProdukt implementiert die Produkt-Schnittstelle.

    \item[Erzeuger]

    Der Erzeuger deklariert die Fabrikmethode, um ein solches Produkt
    zu erzeugen und kann eine Default-Implementierung beinhalten.

    \item[KonkreterErzeuger]

    KonkreterErzeuger überschreibt die Fabrikmethode, um die ihm
    entsprechenden konkreten Produkte zu erzeugen (z. B. indem er den
    Konstruktor einer konkreten Produkt-Klasse aufruft).

    \footcite{wiki:fabrikmethode}
  \end{description}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bEntwurfsFabrikmethode}
%    \begin{macrocode}
\def\bEntwurfsFabrikmethode{
  \bEntwurfsFabrikmethodeUml
  \bEntwurfsFabrikmethodeAkteure
}
%    \end{macrocode}
% \end{macro}

% \subsubsection{Kompositum (Composite)}

% \begin{macro}{\bEntwurfsKompositumUml}
% \begin{bBeispiel}
% \bEntwurfsKompositumUml
% \end{bBeispiel}
%    \begin{macrocode}
\def\bEntwurfsKompositumUml{
  \begin{tikzpicture}
    \umlclass[x=2.5,y=3,type=abstract]{Komponente}{}{
      \textit{+agiere()}\\
      \textit{+fügeKindHinzu()}\\
      \textit{+entferneKind()}\\
      \textit{+gibKind()}
    }
    \umlclass[x=0]{Blatt}{}{+ agiere()}
    \umlclass[x=5]{Kompositum}{}{
      +agiere()\\
      +fügeKindHinzu()\\
      +entferneKind()\\
      +gibKind()
    }

    \umlVHVinherit{Kompositum}{Komponente}
    \umlVHVinherit{Blatt}{Komponente}
    \umlHVHaggreg[anchor1=east,arm1=1.5cm,arg1=eltern,mult1=1,arg2=kind,mult2=0..*,pos2=2.9,pos1=0.4]{Kompositum}{Komponente}
  \end{tikzpicture}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bEntwurfsFabrikmethode}
%    \begin{macrocode}
\def\bEntwurfsKompositum{
  \bEntwurfsKompositumUml
  \bEntwurfsKompositumAkteure
}
%    \end{macrocode}
% \end{macro}

% \subsubsection{Modell-Präsentation-Steuerung (Model-View-Controller)}

% \begin{macro}{\bEntwurfsModellPraesentationSteuerungUml}
% \begin{bBeispiel}
% \bEntwurfsModellPraesentationSteuerungUml
% \end{bBeispiel}
%    \begin{macrocode}
\def\bEntwurfsModellPraesentationSteuerungUml{
  \begin{tikzpicture}
    \umlclass[x=-4cm,type=role]{Präsentation}{}{+aktualisiere()}
    \umlclass[x=4cm,type=role]{Steuerung}{}{+führeAus()}
    \umlclass[y=-4cm,type=role]{Modell}{
      -zustand
    }{
      +aktualisiere()\\
      +frageAn()
    }

    \umluniassoc[arg2=-modell,mult2=1,mult1=*]{Präsentation}{Modell}
    \umluniassoc[arg2=-modell,mult2=1,mult1=*]{Steuerung}{Modell}
    \umlassoc[arg1=präsentation,mult1=1..*,arg2=steuerung,mult2=1..*]{Präsentation}{Steuerung}
  \end{tikzpicture}
  \bFussnoteUrl{http://www.cs.sjsu.edu/~pearce/modules/lectures/ood2/mvc/index.htm}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bEntwurfsModellPraesentationSteuerung}
%    \begin{macrocode}
\def\bEntwurfs{
  \bEntwurfsModellPraesentationSteuerungUml
  \bEntwurfsModellPraesentationSteuerungAkteure
}
%    \end{macrocode}
% \end{macro}

% \subsubsection{Stellvertreter (Proxy)}

% \begin{macro}{\bEntwurfsStellvertreterUml}
%    \begin{macrocode}
\def\bEntwurfsStellvertreterUml{
  \begin{tikzpicture}
    \umlsimpleclass[x=-1,y=2]{Klient}

    \umlclass[x=2,y=2]{Subjekt}{}{+ agiere()}
    \umlclass[x=0,y=-1]{KonkretesSubjekt}{}{+ agiere()}
    \umlclass[x=4,y=-1]{Stellvertreter}{}{+ agiere()}

    \umlVHVinherit{KonkretesSubjekt}{Subjekt}
    \umlVHVinherit{Stellvertreter}{Subjekt}
    \umluniassoc{Stellvertreter}{KonkretesSubjekt}
    \umluniassoc{Klient}{Subjekt}
  \end{tikzpicture}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bEntwurfsStellvertreterCode}
%    \begin{macrocode}
\def\bEntwurfsStellvertreterCode{
  \li@EntwurfsCode{stellvertreter}{Subjekt}
  \li@EntwurfsCode{stellvertreter}{KonkretesSubjekt}
  \li@EntwurfsCode{stellvertreter}{Stellvertreter}
  \li@EntwurfsCode{stellvertreter}{Klient}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bEntwurfsStellvertreter}
%    \begin{macrocode}
\def\bEntwurfsStellvertreter{
  \bEntwurfsStellvertreterUml
  \bEntwurfsStellvertreterCode
}
%    \end{macrocode}
% \end{macro}

% \subsubsection{Zustand (State)}

% \begin{macro}{\bEntwurfsZustandUml}
% Quelle: Englische Wikipedia, so ähnlich wie in GoF
% \begin{bBeispiel}
% \bEntwurfsZustandUml
% \end{bBeispiel}
%    \begin{macrocode}
\def\bEntwurfsZustandUml{
  \begin{tikzpicture}
    \umlclass[x=-1,y=3]{Kontext}{}{+beantrage()}
    \umlclass[x=3,y=3,type=interface]{Zustand}{}{+agiere()}
    \umlclass[x=1,y=0]{KonkreterZustandA}{}{+agiere()}
    \umlclass[x=5,y=0]{KonkreterZustandB}{}{+agiere()}

    \umlVHVreal{KonkreterZustandA}{Zustand}
    \umlVHVreal{KonkreterZustandB}{Zustand}

    \umlaggreg[arg=zustand,pos=0.4]{Kontext}{Zustand}

    \umlnote[x=-2.5,y=0,width=2.5cm]{Kontext}{zustand.agiere()}
  \end{tikzpicture}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bEntwurfsZustandAkteure}
% Quelle: Deutsche Wikipedia
% \begin{bBeispiel}
% \bEntwurfsZustandAkteure
% \end{bBeispiel}
%    \begin{macrocode}
\def\bEntwurfsZustandAkteure{
  \begin{description}
    \item[Kontext (Context)]

    definiert die clientseitige Schnittstelle und verwaltet die separaten
    Zustandsklassen.

    \item[State (Zustand)]

    definiert eine einheitliche Schnittstelle aller Zustandsobjekte und
    implementiert gegebenenfalls ein Standardverhalten.

    \item[KontreterZustand (ConcreteState)]

    implementiert das Verhalten, das mit dem Zustand des Kontextobjektes
    verbunden ist.
  \end{description}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bEntwurfsZustandCode}
%    \begin{macrocode}
\def\bEntwurfsZustandCode{
  \li@EntwurfsCode{zustand}{Kontext}
  \li@EntwurfsCode{zustand}{Zustand}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bEntwurfsZustand}
%    \begin{macrocode}
\def\bEntwurfsZustand{
  \bEntwurfsZustandUml
  \bEntwurfsZustandAkteure
  \bEntwurfsZustandCode
}
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}

%    \end{macrocode}
% \subsection{er.sty}
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[1995/12/01]
\ProvidesPackage{bschlangaul-er}[2020/06/13 Zum Setzen von
ER-Diagrammen]
%    \end{macrocode}

%    \begin{macrocode}
\RequirePackage{tikz-er2}
\usetikzlibrary{positioning}
%    \end{macrocode}

% \subsubsection{Tex-Markup-Beispiel: Komplettes Diagramm}

% \begin{verbatim}
% \begin{tikzpicture}[er2,scale=0.7,transform shape]
% % Person
% \node[entity] (Person) {Person};
% \node[attribute,right=1cm of Person] {\key{E-Mail}} edge (Person);
% \node[multi attribute,above left=1cm of Person] {Vornamen} edge (Person);
% \node[attribute,left=1cm of Person] {Nachnamen} edge (Person);
% \node[attribute,above right=1cm of Person] {Geburtsdatum} edge (Person);
%
% % Kunde
% \node[entity,below left=1cm of Person] (Kunde) {Kunde};
%
% % Händler
% \node[entity,below right=1cm of Person] (Händler) {Händler};
%
% \node[specialization,below=0.2cm of Person]{is-a}
%   edge (Kunde) edge (Händler) edge (Person);
%
% % Transaktion
% \node[relationship,below=2cm of Person] (Transaktion) {Transaktion}
%   edge node[auto]{1} (Kunde)
%   edge node[auto]{1} (Händler);
% \node[attribute,below=1cm of Transaktion] {Preis} edge (Transaktion);
% \node[attribute,left=1cm of Transaktion,text width=2cm] {Abschlussdatum} edge (Transaktion);
% \node[attribute,right=1cm of Transaktion] {Lieferadresse} edge (Transaktion);
%
% % Zahlungsmittel
% \node[entity,below=4cm of Händler] (Zahlungsmittel) {Zahlungsmittel}
%   edge node[auto]{1} (Transaktion);
% \node[attribute,right=1cm of Zahlungsmittel] {Inhaber} edge (Zahlungsmittel);
%
% % Bankverbindung
% \node[entity,below left=1cm and 0cm of Zahlungsmittel] (Bankverbindung) {Bankverbindung};
% \node[attribute,below left=1cm of Bankverbindung] {\key{IBAN}} edge (Bankverbindung);
%
% % Kreditkarte
% \node[entity,below right=3cm and -2cm of Zahlungsmittel]
% (Kreditkarte) {Kreditkarte};
%
% \node[attribute,below left=1cm of Kreditkarte]
% {\key{Nummer}} edge (Kreditkarte);
%
% \node[attribute,below right=1cm of Kreditkarte,text width=2cm]
% {Ablaufdatum} edge (Kreditkarte);
%
% \node[attribute,right=1cm of Kreditkarte]
% {Anbieter} edge (Kreditkarte);
%
% \node[generalization,below=0.8cm of Zahlungsmittel]{is-a}
%   edge (Zahlungsmittel) edge (Bankverbindung) edge (Kreditkarte);
%
% % Produkt
% \node[entity,below=4cm of Kunde] (Produkt) {Produkt}
%   edge node[auto]{1} (Transaktion);
% \node[attribute,left=1cm of Produkt] {\key{Bezeichnung}} edge (Produkt);
% \node[attribute,below left=1cm of Produkt,text width=2cm] {Beschreibungstext} edge (Produkt);
% \node[attribute,above left=1cm of Produkt] {Bewertung} edge (Produkt);
% \end{tikzpicture}
% \end{verbatim}

% \subsubsection{Tex-Markup-Beispiel: EER Enhanced Entity-Relation-Modell nach Elmasri/Navante}

% \begin{verbatim}
% \node[below=1cm of Forscher,circle,draw] (union) {u}
%   edge (Sekretär) edge (Forscher) edge (Techniker);

% \node[below=1cm of union,entity] (AktiveMitarbeiter) {Aktive Mitarbeiter}
%   edge node {$\bigcup$} (union);
% \end{verbatim}

%    \begin{macrocode}
\RequirePackage{soul}
%    \end{macrocode}

%    \begin{macrocode}
\RequirePackage{fontawesome}
%    \end{macrocode}

% \bFaulenzer{
%   a = bErMpAttribute,
%   d = bErDatenbankName,
%   e = bErMpEntity,
%   r = bErMpRelationship,
% }

%    \begin{macrocode}
\ExplSyntaxOn
%    \end{macrocode}

% \begin{macro}{\bErEntity}
%    \begin{macrocode}
\def\bErEntity#1{\textbf{#1}}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bErRelationship}
%    \begin{macrocode}
\def\bErRelationship#1{\ul{#1}}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bErAttribute}
%    \begin{macrocode}
\def\bErAttribute#1{\emph{#1}}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bErMpEntity}
% mp = marginpar
% \bMakroFaulenzer{e}{liErMpEntity}
%    \begin{macrocode}
\def\bErMpEntity#1{
  \bErEntity{#1}
  \marginpar{
    \bErEntity{\tiny\faSquareO{}~E:~#1}
  }
}
%    \end{macrocode}\Box
% \end{macro}

% \begin{macro}{\bErMpRelationship}
% \bMakroFaulenzer{r}{liErMpRelationship}
%    \begin{macrocode}
\def\bErMpRelationship#1{
  \bErRelationship{#1}
  \marginpar{
    \bErRelationship{\tiny\faGg{}~R:~#1}
  }
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bErMpAttribute}
% \bMakroFaulenzer{a}{liErMpAttribute}
%    \begin{macrocode}
\def\bErMpAttribute#1{
  \bErAttribute{#1}
  \marginpar{
    \bErAttribute{\tiny\faCircleThin{}~A:~#1}
  }
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bErDatenbankName}
% \bMakroFaulenzer{d}{liErDatenbankName}
% datenbank name
%    \begin{macrocode}
\def\bErDatenbankName#1{
  {
    \footnotesize\texttt{(#1)}
  }
}
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}
\ExplSyntaxOff
%    \end{macrocode}

%    \begin{macrocode}

%    \end{macrocode}
% \subsection{formale-sprachen.sty}
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[1995/12/01]
\ProvidesPackage{bschlangaul-formale-sprachen}[2021/02/21 Hilfsmakros
zum Setzen von mathematischen Formeln bei dem Thema Formale Sprachen]
%    \end{macrocode}

%    \begin{macrocode}
\directlua{
  formale_sprachen = require('bschlangaul-formale-sprachen')
}
%    \end{macrocode}

%    \begin{macrocode}
\RequirePackage{hyperref}
%    \end{macrocode}

%    \begin{macrocode}
\bLadePakete{mathe,typographie}
%    \end{macrocode}

% \begin{macro}{\bMenge}
% |$\bMenge{a, b, c}$|: $\bMenge{a, b, c}$
% \bMakroFaulenzer{m}{liMenge}
%    \begin{macrocode}
\def\bMengeOhneMathe#1{\{ #1 \}}
\def\bMenge#1{%
\ifmmode%
\bMengeOhneMathe{#1}%
\else%
$\bMengeOhneMathe{#1}$%
\fi%
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bEpsilon}
% |\bEpsilon|: \bEpsilon
%
% \bMakroFaulenzer{e}{liEpsilon}
%    \begin{macrocode}
\def\bEpsilon{$\varepsilon$}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bPotenzmenge}
% Umgeben mit geschweiften Klammern in einer Mathematik-Umgebung
%    \begin{macrocode}
\def\erzeuge@tiefgestellt#1{\directlua{formale_sprachen.erzeuge_tiefgestellt('#1')}}
\def\bPotenzmengeOhneMathe#1{\{ \erzeuge@tiefgestellt{#1} \}}
\def\bPotenzmenge#1{$\bPotenzmengeOhneMathe{#1}$}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bZustandsmenge}
% |\bZustandsmenge{z1, z2}|: |$\{ z_1, z_2 \}$|
%    \begin{macrocode}
\let\bZustandsmengeOhneMathe=\bPotenzmengeOhneMathe
\let\bZustandsmenge=\bPotenzmenge
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bUeberfuehrungsFunktion}
% |\bUeberfuehrungsFunktion{z0, a}|: |$\delta(z_0, a)$|
% \bMakroFaulenzer{d}{liUeberfuehrungsFunktion}
%    \begin{macrocode}
\def\bUeberfuehrungsFunktionOhneMathe#1{\delta(\erzeuge@tiefgestellt{#1})}
\def\bUeberfuehrungsFunktion#1{
\ifmmode
  \bUeberfuehrungsFunktionOhneMathe{#1}
\else
  $\bUeberfuehrungsFunktionOhneMathe{#1}$
\fi
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bAlphabet}
% |\bAlphabet{a, b}| (|$\Sigma = \{ a, b \}$|): \bAlphabet{a, b}
%    \begin{macrocode}
\def\bAlphabet#1{$\Sigma = \{ #1 \}$}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bBandAlphabet}
% |\bBandAlphabet{\bTuringLeerzeichen}|: \bBandAlphabet{\bTuringLeerzeichen}
%    \begin{macrocode}
\def\bBandAlphabet#1{$\Gamma = \Sigma \cup \{ #1 \}$}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bZustandsBuchstabe}
%    \begin{macrocode}
\def\bZustandsBuchstabe{z}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bZustandsBuchstabeGross}
%    \begin{macrocode}
\def\bZustandsBuchstabeGross{Z}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bZustandsmengeNr}
%    \begin{macrocode}
\def\zustandsnamens@liste#1#2{
  $
    \{
      \directlua{formale_sprachen.erzeuge_zustandsnamens_liste('#1', '#2')}
    \}
  $
}
\def\bZustandsmengeNr#1{\zustandsnamens@liste{\bZustandsBuchstabe}{#1}}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bZustandsmengeNrGross}
%    \begin{macrocode}
\def\bZustandsmengeNrGross#1{\zustandsnamens@liste{\bZustandsBuchstabeGross}{#1}}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bZustandsname}
% |\bZustandsname{1}|: |$z_1$|
%    \begin{macrocode}
\def\bZustandsname#1{$\bZustandsBuchstabe_#1$}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bZustandsnameGross}
% |\bZustandsnameGross{1}|: |$Z_1$|
%    \begin{macrocode}
\def\bZustandsnameGross#1{$\bZustandsBuchstabeGross_#1$}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bAbleitung}
% |\bAbleitung{S -> aB -> ab}|: \bAbleitung{S -> aB -> ab}
%    \begin{macrocode}
\def\bAbleitung#1{$\directlua{formale_sprachen.formatiere_ableitung('#1')}$}
%    \end{macrocode}
% \end{macro}

% \begin{environment}{bProduktionsRegeln}
% \begin{verbatim}
% \begin{bProduktionsRegeln}[P_1]
%   S -> S A B | EPSILON,
%   B A -> A B,
%   A A -> a a,
%   B B -> b b
% \end{bProduktionsRegeln}
% \end{verbatim}
%
%    \begin{macrocode}
\NewDocumentEnvironment { bProduktionsRegeln }
{ O{P} +b }
{
  \bGeschweifteKlammern{#1}
  {
    \begin{align*}
    \directlua{formale_sprachen.produktions_regeln('#2')}
    \end{align*}
  }{-0.2cm}{-1.5cm}
} {}
%    \end{macrocode}
% \end{environment}

% \begin{macro}{\bProduktionen}
% |\bProduktionen{S -> A, A -> a}|: \bProduktionen{S -> A, A -> a}
%    \begin{macrocode}
\def\bProduktionen#1{
  \bMenge{\directlua{formale_sprachen.produktions_regeln('#1', true)}}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bZustandsnameTiefgestellt}
% Automatisch tiefgestellte Nummerierung |\z1|
% \bMakroFaulenzer{z}{liZustandsnameTiefgestellt}
%    \begin{macrocode}
\def\bZustandsnameTiefgestellt#1{
  \ifmmode
    \bZustandsBuchstabe\sb{#1}
  \else
    $\bZustandsBuchstabe\sb{#1}$
  \fi
}
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}
\ExplSyntaxOn
%    \end{macrocode}

% \begin{macro}{\bAusdruck}
% |\bAusdruck[L_2]{a_1,a_2,\dots,a_n}{n \in N}|: \bAusdruck[L_2]{a_1,a_2,\dots,a_n}{n \in N}
%
% Ohne „=“: |\bAusdruck[]{x}{y}|: \bAusdruck[]{x}{y}
%
% Regulärer Ausdruck zum Konvertieren:
% \begin{verbatim}
% \$(.*) += +\\\{ *(.*?)( *\\, *)?\|( *\\, *)?(.*?) *\\\}\$
% \\bAusdruck[$1]{$2}{$5}
% \end{verbatim}
%    \begin{macrocode}
\NewDocumentCommand{ \bAusdruck } { O{L} m m } {
  $
   \tl_if_empty:nTF {#1} {} {#1 =}
   \{
    \, #2 \,
    |
    \, #3 \,
  \}$
}
\ExplSyntaxOff
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bFlaci}
% Link zur flaci.com Website: |\bFlaci{Grxk1oczg}|: \bFlaci{Grxk1oczg}
%    \begin{macrocode}
\def\bFlaci#1{%
  \par
  {%
    \scriptsize
    Der Automat auf flaci.com (FLACI: Formale Sprachen, abstrakte
    Automaten, Compiler und Interpreter) Ein Projekt der Hochschule
    Zittau/Görlitz und der Pädagogischen Hochschule Schwyz:
    \href{https://flaci.com/#1}{flaci.com/#1}%
  }%
  \par
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bGrammatik}
% \cmd{\bGrammatik}\oarg{grammtik-name}\marg{variablen=V,alphabet=$\Sigma$,produktionen=P,start=S}
%
% |\bGrammatik{variablen={}, alphabet={}}|
%
% \begin{itemize}
% \item |\bGrammatik{}|: \bGrammatik{}
% \item |\bGrammatik[G_1]{}|: \bGrammatik[G_1]{}
% \item |\bGrammatik{variablen={S,A,B}}|: \bGrammatik{variablen={S,A,B}}
% \item |\bGrammatik{alphabet={a,b}}|: \bGrammatik{alphabet={a,b}}
% \item |\bGrammatik{start=X}|: \bGrammatik{start=X}
% \end{itemize}
%
%    \begin{macrocode}
\ExplSyntaxOn
\NewDocumentCommand {\bGrammatik} { O{G} m } {
  \tl_set:Nn \l_variablen_tl {V}
  \tl_set:Nn \l_alphabet_tl {\Sigma}
  \tl_set:Nn \l_produktionen_tl {P}
  \tl_set:Nn \l_start_tl {S}

  \keys_define:nn { grammatik } {
    variablen .code:n = {\tl_set:Nn \l_variablen_tl {\bMenge{##1}}},
    alphabet .code:n = {\tl_set:Nn \l_alphabet_tl {\bMenge{##1}}},
    produktionen .code:n = {\tl_set:Nn \l_produktionen_tl {\bProduktionen{##1}}},
    start .code:n = {\tl_set:Nn \l_start_tl {##1}},
  }

  \keys_set:nn { grammatik } { #2 }

  $#1 = (
    \l_variablen_tl,
    \l_alphabet_tl,
    \l_produktionen_tl,
    \l_start_tl
  )$
}
\ExplSyntaxOff
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}

%    \end{macrocode}
% \subsection{formatierung.sty}
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[1995/12/01]
\ProvidesPackage{bschlangaul-formatierung}[2020/11/27]
%    \end{macrocode}

% \subsubsection{Schriftarten / Typographie}

% The package mathpazo Loading this package changes the default roman
% font family to Adobe Palatino, and the virtual ‘mathpazo’ fonts will
% be used for math. These virtual fonts are made up basically from
% Palatino Italic, with the missing math symbols coming from the CM and
% Pazo math fonts.
%    \begin{macrocode}
\RequirePackage{mathpazo}
%    \end{macrocode}

%    \begin{macrocode}
\RequirePackage[no-math]{fontspec}
%    \end{macrocode}

%    \begin{macrocode}
\setmainfont{texgyrepagella}
%    \end{macrocode}

% \subsubsection{Farben}
%    \begin{macrocode}
\RequirePackage{xcolor}
\definecolor{infogray}{rgb}{0.97,0.97,0.97}
%    \end{macrocode}

% \subsubsection{Überschriften}
%    \begin{macrocode}
\RequirePackage{titlesec}
\titleformat{\chapter}[display]{\bfseries}{}{0pt}{\LARGE}
\titlespacing{\chapter}{0pt}{0pt}{*1}
\titleformat{\paragraph}[hang]{\normalsize\bfseries}{\theparagraph}{1em}{}
\setcounter{secnumdepth}{0}
%    \end{macrocode}

% \subsubsection{Listen}
%    \begin{macrocode}
\RequirePackage{paralist}
\renewcommand\labelitemi{-}
\renewcommand\labelitemii{-}
\renewcommand\labelitemiii{-}
\renewcommand\labelitemiv{-}
% Counter: enumi enumii enumiii enumiv
% Styles: \arabic{counter} \alph{counter} \Alph{counter} \roman{counter} \Roman{counter}
\renewcommand{\labelenumi}{(\alph{enumi})}
\renewcommand{\labelenumii}{(\roman{enumii})}
%    \end{macrocode}

% \subsubsection{Kasten}
%    \begin{macrocode}
\RequirePackage{mdframed}
%    \end{macrocode}

% \begin{environment}{liKasten}
%    \begin{macrocode}
\NewDocumentEnvironment { liKasten }{ } {
  \begin{mdframed}[backgroundcolor=white!0]
} {
  \end{mdframed}
}
%    \end{macrocode}
% \end{environment}

% \subsubsection{Header}
%    \begin{macrocode}
\RequirePackage{fancyhdr}
\fancyhead[L,C,R]{}
\fancyfoot[L]{}
\fancyfoot[C]{}
\fancyfoot[R]{\thepage}
\pagestyle{fancy}
\renewcommand{\headrulewidth}{0pt}
\renewcommand{\footrulewidth}{0pt}
%    \end{macrocode}

% \subsubsection{Zeilenabstände}
% Werden kleinere Schriften verwendet, passt sich der Zeilenabstand
% nicht entsprechend an. Mit der Umgebung |spacing| funktioniert es dann.
%    \begin{macrocode}
\RequirePackage{setspace}
%    \end{macrocode}

%    \begin{macrocode}

%    \end{macrocode}
% \subsection{gantt.sty}
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[1995/12/01]
\ProvidesPackage{bschlangaul-gantt}[2020/09/05]
%    \end{macrocode}

% \begin{verbatim}
% \begin{ganttchart}[x unit=0.75cm, y unit chart=0.8cm]{0}{11}
% \gantttitlelist{0,...,11}{1} \\
% \ganttbar[name=1]{1}{0}{1} \\
% \ganttbar[name=2]{2}{2}{4} \\
% \ganttbar[name=3]{3}{3}{3} \\
% \ganttbar[name=4]{4}{6}{7} \\
% \ganttbar[name=5]{5}{7}{11}
%
% \node at (1) {2};
% \node at (2) {3};
% \node at (3) {1};
% \node at (4) {2};
% \node at (5) {5};
%
% \ganttlink[link type=f-f]{3}{2}
% \ganttlink[link type=f-s]{1}{2}
% \ganttlink[link type=f-s]{1}{3}
% \ganttlink[link type=f-s]{2}{4}
% \ganttlink[link type=s-s]{4}{5}
% \end{ganttchart}
% \end{verbatim}

% \begin{ganttchart}[x unit=0.75cm, y unit chart=0.8cm]{0}{11}
% \gantttitlelist{0,...,11}{1} \\
% \ganttbar[name=1]{1}{0}{1} \\
% \ganttbar[name=2]{2}{2}{4} \\
% \ganttbar[name=3]{3}{3}{3} \\
% \ganttbar[name=4]{4}{6}{7} \\
% \ganttbar[name=5]{5}{7}{11}
%
% \node at (1) {2};
% \node at (2) {3};
% \node at (3) {1};
% \node at (4) {2};
% \node at (5) {5};
%
% \ganttlink[link type=f-f]{3}{2}
% \ganttlink[link type=f-s]{1}{2}
% \ganttlink[link type=f-s]{1}{3}
% \ganttlink[link type=f-s]{2}{4}
% \ganttlink[link type=s-s]{4}{5}
% \end{ganttchart}

%    \begin{macrocode}
\RequirePackage{tikz-uml}
\RequirePackage{pgfgantt}
\setganttlinklabel{f-s}{}
\setganttlinklabel{s-s}{}
\setganttlinklabel{f-f}{}
\setganttlinklabel{s-f}{}
%    \end{macrocode}

%    \begin{macrocode}

%    \end{macrocode}
% \subsection{grafik.sty}
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[1995/12/01]
\ProvidesPackage{bschlangaul-grafik}[2020/12/27 Lädt das Paket
TikZ, um Grafiken zeichnen zu können und graphicx um Bilder laden zu können.]
%    \end{macrocode}

%    \begin{macrocode}
\ExplSyntaxOn
%    \end{macrocode}

%    \begin{macrocode}
\RequirePackage{tikz}
%    \end{macrocode}

%    \begin{macrocode}
\RequirePackage{graphicx}
%    \end{macrocode}

% \begin{macro}{\bGrafikLogoPfad}
%    \begin{macrocode}
\def\bGrafikLogoPfad#1{
  \LehramtInformatikRepository / .tex / Logo / #1
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bGrafikCCLizenz}
%    \begin{macrocode}
\NewDocumentCommand{ \bGrafikCCLizenz } { O{} } {
  \includegraphics[#1]{
    \bGrafikLogoPfad{CC-by-nc-sa.eps}
  }
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bGrafikLogo}
%    \begin{macrocode}
\NewDocumentCommand{ \bGrafikLogo } { O{} } {
  \includegraphics[#1]{
    \bGrafikLogoPfad{Logo_nur-Pfade.eps}
  }
}
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}
\ExplSyntaxOff
%    \end{macrocode}

%    \begin{macrocode}

%    \end{macrocode}
% \subsection{graph.sty}
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[1995/12/01]
\ProvidesPackage{bschlangaul-graph}[2020/06/09]
\RequirePackage{tikz}
%    \end{macrocode}

% Für die die Adjazenzliste (xrightarrow)
%    \begin{macrocode}
\RequirePackage{amsmath}
%    \end{macrocode}

% Für Adjazenz-Matrix

% \begin{verbatim}
% \[
% \begin{blockarray}{cccccc}
%    & a & b & c & d & e \\
% \begin{block}{c(ccccc)}
%  a & 0 & 1 & 0 & 4 & 0 \\
%  b & 0 & 0 & 0 & 1 & 3 \\
%  c & 0 & 0 & 0 & 1 & 0 \\
%  d & 4 & 1 & 1 & 0 & 2 \\
%  e & 0 & 0 & 0 & 0 & 0 \\
% \end{block}
% \end{blockarray}
% \]
% \end{verbatim}

% \[
% \begin{blockarray}{cccccc}
%    & a & b & c & d & e \\
% \begin{block}{c(ccccc)}
%  a & 0 & 1 & 0 & 4 & 0 \\
%  b & 0 & 0 & 0 & 1 & 3 \\
%  c & 0 & 0 & 0 & 1 & 0 \\
%  d & 4 & 1 & 1 & 0 & 2 \\
%  e & 0 & 0 & 0 & 0 & 0 \\
% \end{block}
% \end{blockarray}
% \]

%    \begin{macrocode}
\RequirePackage{blkarray}
%    \end{macrocode}

%    \begin{macrocode}
\usetikzlibrary{arrows.meta}
%    \end{macrocode}

% \begin{verbatim}
% \begin{tikzpicture}[li graph]
% \node (a) at (0,0) {a};
% \node (b) at (1,1) {b};
% \node (c) at (4,1) {c};
% \node (d) at (3,0) {d};
% \node (e) at (3,3) {e};
%
% \path[->] (a) edge (b);
% \path (b) edge (d);
% \path[->] (b) edge node {3} (e);
% \path (c) edge (d);
% \path (d) edge node {4} (a);
% \path[->] (d) edge node {2} (e);
% \end{tikzpicture}
% \end{verbatim}

% \begin{bBeispiel}
% \begin{tikzpicture}[li graph]
% \node (a) at (0,0) {a};
% \node (b) at (1,1) {b};
% \node (c) at (4,1) {c};
% \node (d) at (3,0) {d};
% \node (e) at (3,3) {e};
% \path[->] (a) edge (b);
% \path (b) edge (d);
% \path[->] (b) edge node {3} (e);
% \path (c) edge (d);
% \path (d) edge node {4} (a);
% \path[->] (d) edge node {2} (e);
% \end{tikzpicture}
% \end{bBeispiel}

%    \begin{macrocode}
\tikzset{
  li graph/.style={
    every node/.style={
      rectangle,
      draw,
    },
    every edge/.style={
      >={Stealth[black]},
      draw,
    },
    every edge/.append style={
      every node/.style={
        sloped,
        auto,
      }
    }
  },
  li markierung/.style={
    ultra thick,
  }
}
%    \end{macrocode}

% \begin{environment}{bGraphenFormat}
% Dummy-Umgebung, zum Parsen durch Java gedacht.
%
% \begin{verbatim}
% \begin{bGraphenFormat}
% a: 0 0
% b: 1 1
% c: 4 1
% d: 3 0
% e: 2 2
% a -> b
% b -- d
% b -> e: 3
% c -- d
% d -> e: 2
% d -- a: 4
% \end{bGraphenFormat}
% \end{verbatim}

%    \begin{macrocode}
\NewDocumentEnvironment { bGraphenFormat }{ +b } {} {}
%    \end{macrocode}
% \end{environment}

%    \begin{macrocode}

%    \end{macrocode}
% \subsection{hanoi.sty}
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[1995/12/01]
\ProvidesPackage{bschlangaul-hanoi}[2020/12/19 Paket zum Setzen
von Hanoi-Grafiken]
%    \end{macrocode}

% Quelle: \url{https://kleinco.de/latex-snippets/7/tikz-towers-of-hanoi-illustration-for-latex-documents/}

%    \begin{macrocode}
\RequirePackage{tikz}
\RequirePackage{xcolor}
%    \end{macrocode}

% \begin{macro}{\bHanoi}
% |\bHanoi{anzahl-scheiben}{gewicht-scheibe/turm-nr,gewicht-scheibe/turm-nr}|,
% \zB: |\bHanoi{4}{4/1,3/1,2/3,1/2}|
%    \begin{macrocode}
\def\li@mset #1[#2]=#3{%
	\expandafter\xdef\csname #1#2\endcsname{#3}
}
\def\li@mget #1[#2]{%
	\csname #1#2\endcsname
}
\def\li@minc #1[#2]+=#3{%
	\pgfmathparse{\li@mget #1[#2]+#3}%
	\li@mset #1[#2]=\pgfmathresult
}

\def\bHanoi#1#2{
  \edef\li@numdiscs{#1}
  \def\li@sequence{#2}
  \begin{tikzpicture}[line width=4mm,brown!40,line cap=round,xscale=3]
    % init colors
    \foreach[count=\j] \c in {red,green!80!black,blue,orange,violet,gray,yellow!80!black,purple,cyan,black}
    \li@mset col[\j]={\c};
    % draw poles and init pole counters
    \foreach \j in {1,2,3}{
      \li@mset pos[\j]=0
      \draw (\j,-.5) -- +(0, .5 + .5*\li@numdiscs);
    }
    % draw base
    \draw (.5,-.5) -- +(3,0);
    % draw discs
    \foreach[count=\k] \i/\j in \li@sequence{
      \draw[draw={\li@mget col[\i]}] (\j,\li@mget pos[\j]) +(-.4*\i/\li@numdiscs,0) -- +(.4*\i/\li@numdiscs,0) node[pos=.5,white,font=\rmfamily] {\i};
      \li@minc pos[\j]+={.5}
    }
  \end{tikzpicture}
}
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}

%    \end{macrocode}
% \subsection{index.sty}
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[1995/12/01]
\ProvidesPackage{bschlangaul-index}[2021/09/12 Den Index anzeigen
lassen]
%    \end{macrocode}

%    \begin{macrocode}
\ExplSyntaxOn
%    \end{macrocode}

%    \begin{macrocode}
\RequirePackage{makeidx}
%    \end{macrocode}

% Anzeigen des Indexes auf der rechten Seite
%    \begin{macrocode}
\RequirePackage{showidx}
%    \end{macrocode}

% Überschreiben des Makros aus showidx um kleinere Schrift zu bekommen
%    \begin{macrocode}
\def\@showidx#1
{%
\insert
\indexbox
  {
    \tiny
    \hsize\marginparwidth
    \hangindent\marginparsep \parindent\z@
    \everypar{}\let\par\@@par \parfillskip\@flushglue
    \lineskip\normallineskip
    \baselineskip .8\normalbaselineskip\sloppy
    \raggedright \leavevmode
    \vrule \@height .7\normalbaselineskip \@width \z@\relax
    #1\relax
    \vrule \@height \z@ \@depth .3\normalbaselineskip \@width \z@
  }
}
%    \end{macrocode}

%    \begin{macrocode}
\makeindex
%    \end{macrocode}

%    \begin{macrocode}
\ExplSyntaxOff
%    \end{macrocode}

%    \begin{macrocode}

%    \end{macrocode}
% \subsection{java.sty}
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[1995/12/01]
\ProvidesPackage{bschlangaul-java}[2021/09/14 Ein Hüll-Paket um
`syntax`, das sich um die Syntax-Hervorhebung des Java-Codes kümmert.]
%    \end{macrocode}

% \bFaulenzer{
%   j = bJavaCode,
% }

%    \begin{macrocode}
\ExplSyntaxOn
%    \end{macrocode}

%    \begin{macrocode}
\bLadePakete{syntax}
%    \end{macrocode}

%    \begin{macrocode}
\directlua{
  syntax = require('bschlangaul-java')
  syntax.importiere_konfiguration('tex_repo_lokaler_pfad', '\LehramtInformatikRepository')
  syntax.importiere_konfiguration('github_domain', '\LehramtInformatikGithubDomain')
  syntax.importiere_konfiguration('github_raw_domain', '\LehramtInformatikGithubRawDomain')
  syntax.importiere_konfiguration('github_tex_repo', '\LehramtInformatikGithubTexRepo')
  syntax.importiere_konfiguration('github_code_repo', '\LehramtInformatikGithubCodeRepo')
  syntax.importiere_konfiguration('git_branch', '\LehramtInformatikGitBranch')
}
%    \end{macrocode}

% \begin{environment}{bJavaAngabe}
% Eine Umgebung für Java-Code, ohne Zeilennummer und etwas eingerückt
% um den Java-Code in Angaben / Aufgabestellungen zu setzen.
%    \begin{macrocode}
\newminted[bJavaAngabe]{java}
{
  xleftmargin=1cm
}
%    \end{macrocode}
% \end{environment}

% \begin{macro}{\bJavaCode}
% Im Zeilenfluss einen kurzen Java-Code-Ausschnitt setzen. Es werden automatische
% Zeilenumbrüche gemacht.
% \bMakroFaulenzer{j}{liJavaCode}
%    \begin{macrocode}
\def\bJavaCode#1
{
  \,
  \textcolor{blue}{
    \mintinline[
      fontsize=\normalsize,
      breakanywhere % https://github.com/gpoore/minted/issues/31#issuecomment-458640242
    ]{java}|#1|
  }
  \,
}
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}
\def\li@GithubLink#1#2
{
  \begin{flushright}
    \tiny
    Code-Beispiel~auf~Github~ansehen:~
    \href{#1}{\nolinkurl{#2}}
  \end{flushright}
}
%    \end{macrocode}

% \begin{macro}{\bJavaDatei}
% Eine komplette Java-Datei einbinden, die
% Verzeichnis |./Code/src/main/java/org/bschlangaul| liegt.
%    \begin{macrocode}
\NewDocumentCommand{ \bJavaDatei }{ O{firstline=3} m }
{
  \inputminted[#1]{java}{
    \directlua{
      syntax.drucke_absoluten_pfad('#2', false)
    }
  }
  \li@GithubLink
    {\directlua{syntax.drucke_github_url('#2', false)}}
    {\directlua{syntax.drucke_relativen_repo_pfad('#2', false)}}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bJavaTestDatei}
% Eine komplette Java-Test-Datei einbinden,
% die Verzeichnis |./Code/src/test/java/org/bschlangaul| liegt.
%    \begin{macrocode}
\NewDocumentCommand{ \bJavaTestDatei }{ O{firstline=3} m }
{
  \inputminted[#1]{java}{
    \directlua{
      syntax.drucke_absoluten_pfad('#2', true)
    }
  }
  \li@GithubLink
    {\directlua{syntax.drucke_github_url('#2', true)}}
    {\directlua{syntax.drucke_relativen_repo_pfad('#2', true)}}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bJavaExamen}
% |\bJavaExamen{66116}{2015}{03}{Kunde}|
% Regulärer Ausdruck zum Konvertieren:
% |\\bJavaDatei(\[.*\])?\{.*examen_(\d{5})_(\d{4})_(\d{2})/(.*)\}|
% |\\bJavaExamen$1{$2}{$3}{$4}{$5}|
%    \begin{macrocode}
\NewDocumentCommand{ \bJavaExamen }{ O{firstline=3} m m m m }
{
  \inputminted[#1]{java}{
    \directlua{
      syntax.drucke_absoluten_examens_pfad('#2', '#3', '#4', '#5')
    }
  }

  \li@GithubLink
  {\directlua{syntax.drucke_github_examens_url('#2', '#3', '#4', '#5')}}
  {\directlua{syntax.drucke_relativen_examens_repo_pfad('#2', '#3', '#4', '#5')}}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bJavaExamenDatei}
%    \begin{macrocode}
\NewDocumentCommand{ \bJavaExamenDatei }{ O{firstline=3} m }
{

}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bJavaExamenTestDatei}
%    \begin{macrocode}
\NewDocumentCommand{ \bJavaExamenTestDatei }{ O{firstline=3} m }
{

}
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}
\ExplSyntaxOff
%    \end{macrocode}

%    \begin{macrocode}

%    \end{macrocode}
% \subsection{komplexitaetstheorie.sty}
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[1995/12/01]
\ProvidesPackage{bschlangaul-komplexitaetstheorie}[2021/07/08 Zum
Setzen von Karps NP-vollständigen Problemen, Hilfsmakros für die
Polynomialzeitreduktion.]
%    \end{macrocode}

% \bFaulenzer{
%   n = bProblemName,
%   r = bPolynomiellReduzierbar,
%   b = bProblemBeschreibung,
% }

%    \begin{macrocode}
\bLadePakete{mathe}
%    \end{macrocode}

% Für das Makro |\bProblemBeschreibung{}{}{}| benötigt.
%    \begin{macrocode}
\RequirePackage{mdframed}
%    \end{macrocode}

% \begin{macro}{\bStrich}
% |$L, \bStrich{L}$|: $L, \bStrich{L}$
%    \begin{macrocode}
\def\bStrich#1{#1^\prime}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bProblemName}
% Zu Setzen von Problemnamen wie zum Beispiel SAT, COL, VERTEX COVER
% \bMakroFaulenzer{n}{liProblemName}
% |\bProblemName|: \bProblemName{Sat} \bProblemName{Vertex Cover}
%    \begin{macrocode}
\def\bProblemName#1{\texttt{\textsc{#1}}}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bProblemBeschreibung}
% Zu setzen von Problem-Beschreibungen:
%
% \begin{verbatim}
% \bProblemBeschreibung
% {}
% {}
% {}
% \end{verbatim}
%
% \begin{bBeispiel}
% \bProblemBeschreibung
% {Clique}
% {Ein ungerichteter Graph $G = (V, E)$, eine Zahl $k \in \mathcal{N}$}
% {Gibt es eine Menge $S \subseteq V$ mit $|S| = k$, sodass für alle
% Knoten $u \neq v \in V$ gilt, dass $\{ u, v \}$ eine Kante in $E$
% ist?}
% \end{bBeispiel}
% \bMakroFaulenzer{b}{liProblemBeschreibung}
%    \begin{macrocode}
\def\bProblemBeschreibung#1#2#3{
  \begin{mdframed}[
    userdefinedwidth=9cm,
    align=center,
    backgroundcolor=white!0,
  ]
    \centerline{\large\bProblemName{#1}}

    \medskip

    \begin{description}
    \item[Gegeben:] #2
    \item[Frage:] #3
    \end{description}
  \end{mdframed}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bPolynomiellReduzierbar}
% \bMakroFaulenzer{r}{liPolynomiellReduzierbar}
%    \begin{macrocode}
\NewDocumentCommand{ \bPolynomiellReduzierbar } { m O{p}  m } {
\begin{displaymath}
  \bProblemName{#1}
  \preceq_{#2}
  \bProblemName{#3}
\end{displaymath}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bProblemVertexCover}
%    \begin{macrocode}
\def\bProblemClique{%
Das \textbf{Cliquenproblem} fragt nach der Existenz einer Clique der
Mindestgröße $n$ in einem gegebenen Graphen.
\footcite[Seite 76]{theo:fs:4}
Eine Clique ist eine Teilmenge von Knoten in einem ungerichteten
Graphen, bei der \emph{jedes Knotenpaar durch eine Kante} verbunden ist.
\footcite{wiki:cliquenproblem}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bProblemVertexCover}
%    \begin{macrocode}
\def\bProblemVertexCover{%
%
Das \textbf{Knotenüberdeckungsproblem} (\bProblemName{Vertex Cover})
fragt, ob zu einem gegebenen einfachen Graphen und einer natürlichen
Zahl $k$ eine Knotenüberdeckung der Größe von höchstens $k$ existiert.
\footcite{wiki:knotenueberdeckung}

Das heißt, ob es eine aus maximal $k$ Knoten bestehende Teilmenge $U$
der Knotenmenge gibt, so dass jede Kante des Graphen mit
mindestens einem Knoten aus $U$ verbunden ist.
\footcite[Seite 78]{theo:fs:4}%
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bProblemSubsetSum}
% Kein Karp-21-Problem
%    \begin{macrocode}
\def\bProblemSubsetSum{%
Das \textbf{Teilsummenproblem} (\bProblemName{Subset Sum} oder
\bProblemName{SSP}) ist ein spezielles Rucksackproblem.
\footcite{wiki:teilsummenproblem}
Gegeben sei eine Menge von ganzen Zahlen $I = \{w_1, w_2, \dots, w_n
\}$. Gesucht ist eine Untermenge, deren Elementsumme maximal, aber nicht
größer als eine gegebene obere Schranke $c$ ist.
\footcite[Seite 74]{theo:fs:4}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bProblemSubsetSum}
% Kein Karp-21-Problem
%    \begin{macrocode}
\def\bProblemSat{%
Das \textbf{Erfüllbarkeitsproblem der Aussagenlogik} \bProblemName{Sat}
und \bProblemName{k-SAT} mit $k \geq 3$, $k \in \mathbb{N}$ (Satz von
Cook) fragt, ob eine aussagenlogische Formel erfüllbar
ist.\footcite{wiki:sat} Das Erfüllbarkeitsproblem der
\emph{Aussagenlogik} ist in exponentieller Zeit in Abhängigkeit der
Anzahl der Variablen mit Hilfe einer Wahrheitstabelle entscheidbar.
Diese \emph{Wahrheitstabelle} kann nicht in polynomieller Zeit
aufgestellt werden.
\footcite[Seite 71]{theo:fs:4}
}
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}

%    \end{macrocode}
% \subsection{kontrollflussgraph.sty}
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[1995/12/01]
\ProvidesPackage{bschlangaul-kontrollflussgraph}[2020/11/07]
%    \end{macrocode}

% \bFaulenzer{
%   b = bBedingung,
%   c = bKontrollCode,
%   f = bBedingungFalsch,
%   k = bKontrollTextzeileKnoten,
%   p = bKontrollKnotenPfad,
%   w = bBedingungWahr,
% }

% \subsubsection{TeX-Markup-Beispiel}

% \begin{verbatim}
% \begin{bKontrollflussgraph}[xscale=1,yscale=-1.6]
% \node[knoten] at (0,0) (S) {S};
%
% \node[pin=\c{boolean resultat = false;}] at (0,1) (2) {2};
% \node[pin=\c{if (wort != null)}] at (0,2) (3) {3};
% \node[pin=\c{int laenge = wort.length;}] at (1,3) (4) {4};
% \node[pin=\c{if (laenge >= 2)}] at (1,4) (5) {5};
% \node[pin=\c{resultat = true; int i = 0;}] at (2,5) (6) {6};
% \node[pin=\c{for (i < laenge / 2;)}] at (2,6) (7) {7};
% \node[pin=\c{char c1; char c2 …}] at (3,7) (8) {8};
% \node[pin=\c{if (Char…) }] at (2,8) (10) {10};
% \node[pin=\c{resultat = false; break;}] at (2,9) (12) {12};
% \node[pin=\c{if (laenge == 1)}] at (1,10) (17) {17};
% \node[pin=\c{resultat = true;}] at (1,11) (18) {18};
% \node[pin=180:\c{return resultat;}] at (-1,9) (22) {22};
% \node[knoten] at (-1,10) (E) {E};
%
% \path (S) -- (2);
% \path (2) -- (3);
% \path[wahr] (3) -- (4) \b{right}{wort != null};
% \path[falsch] (3) -- (22)  \b{left}{wort == null};
% \path (4) -- (5);
% \path[wahr] (5) -- (6) \b{right}{laenge >= 2};
% \path[falsch] (5) -- (17) \b{left,rotate=70,pos=0.2}{laenge < 2};
% \path (6) -- (7);
% \path[wahr] (7) -- (8) \b{right}{i < laenge / 2};
% \path[falsch] (7) -- (22) \b{left}{i >= laenge / 2};
% \path (8) -- (10);
% \path[wahr] (10) -- (12) \b{right}{c != c};
% \path[falsch] (10) -- (7) \b{left,rotate=70,pos=0.8}{c == c};
% \path (12) -- (22);
% \path[wahr] (17) -- (18) \b{right}{laenge == 1};
% \path[falsch] (17) -- (22) \b{right,rotate=-20,pos=0.99}{laenge != 1};
% \path (18) -- (22);
% \path (22) -- (E);
% \end{bKontrollflussgraph}
% \end{verbatim}

% \subsubsection{TikZ: pin}

% Die Knoten erhalten sogenannte Pins, in denen Code-Ausschnitte der
% entsprechenden Anweisung zu sehen ist.

% |pin={[options]angle:text}|

% \begin{verbatim}
% \node[pin=\c{resultat = true;}] at (1,11) {18};
% \node[pin=180:\c{return resultat;}] at (-1,9) {22};
% \node[pin={[pin distance=3cm]\c{resultat = ...}}]
% \end{verbatim}

%    \begin{macrocode}
\RequirePackage{tikz}
\usetikzlibrary{positioning}
\tikzset{
  li kontrollfluss/.style={
    knoten/.style={
      circle,
      draw
    },
    usebox/.style={
      draw,
      rectangle,
      font=\scriptsize,
      anchor=west,
      align=left,
    },
    bedingung/.style={
      midway,
      draw=none,
      font=\scriptsize
    },
    knotenbeschriftung/.style={
      draw,
      rectangle,
      midway,
      font=\scriptsize
    },
    wahr/.style={
      thick
    },
    falsch/.style={
      dashed
    },
    every node/.style={
      circle,
      draw,
    },
    every edge/.append style={
      every node/.style={
        draw=none,
        bedingung,
      }
    },
    every path/.style={
      draw,
      ->,
    },
    every pin/.style={
      draw,
      dotted,
      rectangle,
      pin position=right
    },
    every pin edge/.style={
      dotted,
      arrows=-,
    }
  }
}
%    \end{macrocode}

% \subsubsection{Umgebungen}

% \begin{environment}{bKontrollflussgraph}
%    \begin{macrocode}
\NewDocumentEnvironment { bKontrollflussgraph } { O{} } {
  \begin{tikzpicture}[
    li kontrollfluss,
    #1
  ]
} {
  \end{tikzpicture}
}
%    \end{macrocode}
% \end{environment}

% \subsubsection{Makros}

% \begin{macro}{\bAnweisung}
%    \begin{macrocode}
\def\bAnweisung#1(#2,#3){\node[knoten] at (#2,#3) (#1) {#1};}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bBedingung}
% \bMakroFaulenzer{b}{liBedingung}
%    \begin{macrocode}
\def\bBedingung#1#2{node[bedingung,#1]{[\texttt{#2}]}}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bBedingungWahr}
% \bMakroFaulenzer{w}{liBedingungWahr}
%    \begin{macrocode}
\def\bBedingungWahr#1{node[bedingung,#1]{\texttt{[true]}}}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bBedingungFalsch}
% \bMakroFaulenzer{f}{liBedingungFalsch}
%    \begin{macrocode}
\def\bBedingungFalsch#1{node[bedingung,#1]{\texttt{[false]}}}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bKontrollCode}
% \bMakroFaulenzer{c}{liKontrollCode}
%    \begin{macrocode}
\def\bKontrollCode#1{{\tiny\texttt{\textcolor{gray}{#1}}}}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bKontrollTextzeileKnoten}
% \bMakroFaulenzer{k}{liKontrollTextzeileKnoten}
%    \begin{macrocode}
\def\bKontrollTextzeileKnoten#1{\raisebox{-2pt}{\tikz[scale=0.5,transform shape] \node[draw,circle]{#1};}}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bKontrollKnotenPfad}
% \bMakroFaulenzer{p}{liKontrollKnotenPfad}
%    \begin{macrocode}
\ExplSyntaxOn
\NewDocumentCommand { \bKontrollKnotenPfad }{ m }
{
  \seq_set_split:Nnn \l_tmpa_seq { - } { #1 }
  \seq_set_map:NNn \l_tmpa_seq \l_tmpa_seq {\bKontrollTextzeileKnoten{##1}}
  \seq_use:Nn \l_tmpa_seq { ~-~~ }
}
\ExplSyntaxOff
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}

%    \end{macrocode}
% \subsection{kopfzeile.sty}
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[1995/12/01]
\ProvidesPackage{bschlangaul-kopfzeile}[2021/08/20 Kopf-
und Fußzeilen mit Hilfe des Pakets fancyhdr.]
%    \end{macrocode}

%    \begin{macrocode}
\ExplSyntaxOn
%    \end{macrocode}

%    \begin{macrocode}
\RequirePackage{bschlangaul-meta}
%    \end{macrocode}

%    \begin{macrocode}
\cs_new:Npn \kopfzeile_schrift:n #1
{
  {
    \scriptsize
    #1
  }
}
%    \end{macrocode}

%    \begin{macrocode}
\cs_new:Npn \setze_kopf_fusszeilen:nn #1 #2
{
  \fancyhead{}
  \fancyhead[L]{\kopfzeile_schrift:n{\bMetaBschlangaulSammlung}}
  \fancyhead[C]{\kopfzeile_schrift:n{#1}}
  \fancyhead[R]{\kopfzeile_schrift:n{#2}}

  \fancyfoot{}
  \fancyfoot[L]{\kopfzeile_schrift:n{\bMetaHermineFriends}}
  \fancyfoot[C]{\kopfzeile_schrift:n{\bMetaEmail}}
  \fancyfoot[R]{\kopfzeile_schrift:n{\thepage}}

  \renewcommand{\headrulewidth}{0.4pt}
  \renewcommand{\footrulewidth}{0.4pt}
}
%    \end{macrocode}

%    \begin{macrocode}
\cs_new:Npn \setze_kopfzeile_oben_rechts:n #1
{
  \fancyhead[R] {
    \kopfzeile_schrift:n { #1 }
  }
}
%    \end{macrocode}

% Das Makro darf nicht in der Präambel aufgerufen werden, da es die
% Textbreite braucht.
%    \begin{macrocode}
\cs_new:Npn \repariere_kopfzeile_breite:
{
  \setlength{\headwidth}{\textwidth}
}
%    \end{macrocode}

%    \begin{macrocode}
\ExplSyntaxOff
%    \end{macrocode}

%    \begin{macrocode}

%    \end{macrocode}
% \subsection{literatur-dummy.sty}
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[1995/12/01]
\ProvidesPackage{bschlangaul-literatur-dummy}[2020/11/27]
%    \end{macrocode}

% \begin{macro}{\literatur}
%    \begin{macrocode}
\def\literatur{}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\footcite}
%    \begin{macrocode}
% \RequirePackage[stable,multiple]{footmisc}
\NewDocumentCommand{ \footcite } { o m }{}
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}

%    \end{macrocode}
% \subsection{literatur.sty}
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[1995/12/01]
\ProvidesPackage{bschlangaul-literatur}[2020/11/27]
%    \end{macrocode}

%    \begin{macrocode}
\RequirePackage{csquotes}
\RequirePackage[
  bibencoding=utf8,
  citestyle=authortitle,
  backend=biber,
]{biblatex}
\addbibresource{\LehramtInformatikRepository/Quellen/10_DB.bib}
\addbibresource{\LehramtInformatikRepository/Quellen/20_OOMUP.bib}
\addbibresource{\LehramtInformatikRepository/Quellen/30_AUD.bib}
\addbibresource{\LehramtInformatikRepository/Quellen/40_SOSY.bib}
\addbibresource{\LehramtInformatikRepository/Quellen/60_FUMUP.bib}
\addbibresource{\LehramtInformatikRepository/Quellen/70_THEO.bib}
\addbibresource{\LehramtInformatikRepository/Quellen/80_DDI.bib}
\addbibresource{\LehramtInformatikRepository/Quellen/Allgemein.bib}
\addbibresource{\LehramtInformatikRepository/Quellen/Examen.bib}
\addbibresource{\LehramtInformatikRepository/Quellen/Wikipedia.bib}
% To allow footnotes in the heading
\RequirePackage[stable,multiple]{footmisc}
%    \end{macrocode}

% \begin{macro}{\literatur}
%    \begin{macrocode}
\def\literatur{\printbibliography[heading=subbibliography]}
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}

%    \end{macrocode}
% \subsection{makros.sty}
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[1995/12/01]
\ProvidesPackage{bschlangaul-makros}[2020/11/27 Eine Sammlung von
häufig verwendeten Makros und Umgebungen, die thematisch zu keinem
anderen Paket passen]
%    \end{macrocode}

%    \begin{macrocode}
\RequirePackage{hyperref}
%    \end{macrocode}

%    \begin{macrocode}
\RequirePackage{graphicx}
%    \end{macrocode}

% Für die Umgebung |bQuellen| benötigt.
%    \begin{macrocode}
\RequirePackage{paralist}
%    \end{macrocode}

%    \begin{macrocode}
\ExplSyntaxOn
%    \end{macrocode}

% \begin{macro}{\inhaltsverzeichnis}
%    \begin{macrocode}
\def\inhaltsverzeichnis {
  \begin{mdframed}
    \begingroup
    \let\clearpage\relax
    \tableofcontents
    \endgroup
  \end{mdframed}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bEmph}
% |\bEmph| (|\marginpar| and |\emph|)
%    \begin{macrocode}
\def\bEmph#1
{
  \emph{#1}
  \marginpar{
    \tiny#1
  }
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\SLASH}
%    \begin{macrocode}
\newcommand\SLASH{\char`\\}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bPseudoUeberschrift}
% Text, der sich wie eine Überschrift verhält.
%    \begin{macrocode}
\newcommand{\bPseudoUeberschrift}[1]{
  \bigskip

  \par
  \noindent
  \textbf{#1}

  \medskip

  \keine_einrueckung:
}
%    \end{macrocode}
% \end{macro}

% \begin{environment}{bProjektSprache}
% |\begin{bProjektSprache}{NameProjektSprache} \end{bProjektSprache}|:
% Zum Einbetten von projekteigenen Minisprachen/DSLs (Domain-specific
% language) (\zB RelationenSchema). Der Inhalt der Umgebung wird nicht
% von TeX kompiliert, sondern von dem Java-Kommandozeilen-Programm
% |didaktik.java| verarbeitet.
%    \begin{macrocode}
\NewDocumentEnvironment { bProjektSprache }{ o +b } {} {}
%    \end{macrocode}
% \end{environment}

% \begin{environment}{liEinbettung}
%    \begin{macrocode}
\NewDocumentEnvironment { liEinbettung }{ o +b } {#2} {}
%    \end{macrocode}
% \end{environment}

% \subsubsection{Umgebungen, die Inhalte aus- und einblenden können}

% Die einfachste Möglichkeit, um den kompletten Inhalt einer Umgebung
% auszublenden ist die Verwendung |+b| in einer |xparse| erzeugten
% Umgebung. Manchmal funktioniert diese Methode nicht. In der
% Dokumentation von |xparse| steht, dass dieses Feature etwas
% experimentell ist.

% Eine andere Methode verwendet das exam-Package. Die Inhalt wird in
% eine Box verschoben, die dann einfach ignoriert wird.

% \begin{verbatim}
% \NewDocumentEnvironment{ bAdditum } { o }
% {
%   \ifADDITUM
%   \else
%     % Alles in eine Box verschieben und die dann ignorieren.
%     \setbox 0 \vbox
%     \bgroup
%   \fi

%   \begin{frame}
% } {
%   \end{frame}

%   \ifADDITUM
%   \else
%     \egroup
%   \fi
% }
% \end{verbatim}

% \begin{environment}{bAntwort}
% Zum Setzen von Antworten. Sie werden mit einem Kasten umgeben. Könnten
% eventuell ausgeblendet werden, wenn man nur die Lösung sehen will.
% \begin{macrocode}
\NewDocumentEnvironment{ bAntwort } { O{standard} }
{
  \ifANTWORT
  \else
    \setbox 0 \vbox
    \bgroup
  \fi

  \str_case:nn {#1} {
    {standard} {
      \def\beschriftung{}
      \mdfsetup{backgroundcolor=gray!1}
    }
    {richtig} {
      \def\beschriftung{richtig}
      \mdfsetup{backgroundcolor=green!5,linecolor=green}
    }
    {falsch} {
      \def\beschriftung{falsch}
      \mdfsetup{backgroundcolor=red!3,linecolor=red}
    }
    {muster} {
      \def\beschriftung{Musterlösung}
      \mdfsetup{backgroundcolor=green!12,linecolor=green}
    }
  }
  \ifx\beschriftung\empty\else
    \noindent
    \textbf{\beschriftung{}:}
  \fi
  \begin{mdframed}[
    frametitle={\scriptsize\mdseries Lösungsvorschlag},
    innertopmargin=6pt,
    frametitleaboveskip=-10pt,
    frametitlealignment=\raggedleft
  ]
}
{
  \end{mdframed}
  \ifANTWORT
  \else
    \egroup
  \fi
}
%    \end{macrocode}
% \end{environment}

% \begin{environment}{bAdditum}
% Zusätzliches Material bei Aufgaben, das
% zum Lösen der Aufgaben nicht unbedingt nötig ist, z. b.
% Hintergrundinformation, Test-Dateien, komplette Code-Dateien.
% \begin{macrocode}
\NewDocumentEnvironment{ bAdditum } { o }
{
  \ifADDITUM
  \else
    \setbox 0 \vbox
    \bgroup
  \fi

  \begin{mdframed}[backgroundcolor=yellow!5]
    \IfNoValueTF {#1}
    {
      \bPseudoUeberschrift{Additum}
    }
    {
      \bPseudoUeberschrift{Additum:~#1}
    }
}
{
  \end{mdframed}

  \ifADDITUM
  \else
    \egroup
  \fi
}
%    \end{macrocode}
% \end{environment}

% \begin{environment}{bExkurs}

% \begin{verbatim}
% \begin{bExkurs}[Linear rekursiv]
% Die häufigste Rekursionsform ist die lineare Rekursion, bei der in jedem
% Fall der rekursiven Definition höchstens ein rekursiver Aufruf vorkommen
% darf.
% \end{bExkurs}
% \end{verbatim}

% \begin{bExkurs}[Linear rekursiv]
% Die häufigste Rekursionsform ist die lineare Rekursion, bei der in jedem
% Fall der rekursiven Definition höchstens ein rekursiver Aufruf vorkommen
% darf.
% \end{bExkurs}

%    \begin{macrocode}
\NewDocumentEnvironment{ bExkurs }{ o +b }
{
  \ifEXKURS
    \vspace{0.2cm}%
    \begin{mdframed}[
      backgroundcolor=white,
      bottomline=false,
      innermargin=1cm,
      leftline=true,
      linecolor=black,
      linewidth=0.1cm,
      outermargin=1cm,
      rightline=false,
      topline=false,
    ]
      \footnotesize
      \noindent%
      \textbf{Exkurs:~#1}\par%
      \noindent%
      #2
    \end{mdframed}
    \vspace{0.2cm}
  \else
  \fi
}
{}
%    \end{macrocode}
% \end{environment}

% \begin{environment}{bQuellen}

% \url{https://tex.stackexchange.com/a/229004}

% \begin{verbatim}
% \begin{bQuellen}
% \item Quelle 1
% \item Quelle 2
% \end{bQuellen}
% \end{verbatim}

% \begin{bQuellen}
% \item Quelle 1
% \item Quelle 2
% \end{bQuellen}

%    \begin{macrocode}
\cs_new:Npn \listen_punkt:n #1
{
  \item #1
}
\NewDocumentEnvironment { bQuellen }{ +b }
{
  \seq_clear_new:N \l_quellen
  \seq_set_split:Nnn \l_quellen {\item} {#1}
  \seq_remove_all:Nn \l_quellen {}
  \begin{mdframed}[backgroundcolor=white!0]
    \footnotesize
    \noindent
    \textsf{\textbf{Weiterführende~Literatur:}}
    \medskip
    \begin{compactitem}
      \seq_map_function:NN \l_quellen {\listen_punkt:n}
    \end{compactitem}
  \end{mdframed}

  \keine_einrueckung:
} {}
%    \end{macrocode}
% \end{environment}

% \begin{macro}{\bFussnoteUrl}
% \cmd{\bFussnoteUrl}\oarg{zusätzlicher-text}\marg{url}
% |\bFussnoteUrl[zusätzlicher Text]{url}|: Eine HTTP-URL als Fußnote setzen.
%    \begin{macrocode}
\NewDocumentCommand { \bFussnoteUrl } { o m }
{
  \footnote{
    \url{#2}
    \IfNoValueTF{#1}
    {}
    {
     ~(#1)
    }
  }
}

%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bFussnoteLink}
% \cmd{\bFussnoteLink}\oarg{zusätzlicher-text}\marg{link-text}\marg{url}
% |\bFussnoteLink[zusätzlicher Text]{text}{url}|: Einen Link, d. h. einen Link-Text
% und eine URL als Fußnote setzen.
%    \begin{macrocode}
\NewDocumentCommand{ \bFussnoteLink } { o m m }
{
  \footnote{
    \href{#3}{#2}
    \IfNoValueTF{#1}
    {}
    {
    ~(#1)
    }
  }
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bLinie}
% Eine horizontale Linie
%    \begin{macrocode}
\def\bLinie{
  \par
  \noindent
  \rule
  {
    \textwidth
  }
  {
    0.4pt
  }
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\zB}
%    \begin{macrocode}
\def\zB{z.\,B.~}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\ZB}
%    \begin{macrocode}
\def\ZB{Z.\,B.~}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\dh}
%    \begin{macrocode}
\def\dh{d.\,h.~}
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}
\ExplSyntaxOff
%    \end{macrocode}

%    \begin{macrocode}

%    \end{macrocode}
% \subsection{master-theorem.sty}
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[1995/12/01]
\ProvidesPackage{bschlangaul-master-theorem}[2021/04/13]
%    \end{macrocode}

% \bFaulenzer{
%   O = bO,
%   o = bOmega,
%   T = bT,
%   t = bTheta,
% }

% \begin{verbatim}
% \bMasterVariablenDeklaration
% {3} % a
% {3} % b
% {\mathcal{O}(1)} % f(n)
%
% \bMasterFallRechnung
% % 1. Fall
% {für $\varepsilon = 4$: \\
% $f(n) = 5n^2 \in \O{n^{\log_2 {8 - 4}}} = \O{n^{\log_2 4}} = \O{n^2}$}
% % 2. Fall
% {$f(n) = 5n^2 \notin \t{n^{\log_2 {8}}} = \t{n^3}$}
% % 3. Fall
% {$f(n) = 5n^2 \notin \o{n^{\log_2 {8 + \varepsilon}}}$}
%
% \bMasterWolframLink{T[n]=9T[n/3]\%2B5n^2}
% \end{verbatim}

% \begin{verbatim}
% \bMasterVariablenDeklaration
% {} % a
% {} % b
% {} % f(n) ohne $mathe$
%
% \bMasterFallRechnung
% % 1. Fall
% {}
% % 2. Fall
% {}
% % 3. Fall
% {}
%
% $\Rightarrow T(n) \in \t{n^2 \cdot \log n}$
% \bMasterWolframLink{T[n]=9T[n/3]\%2B5n^2}
% \end{verbatim}

%    \begin{macrocode}
\ExplSyntaxOn
\RequirePackage{amsmath}
%    \end{macrocode}

% \begin{macro}{\bRundeKlammer}
%    \begin{macrocode}
\def\bRundeKlammer#1{
  \negthinspace \left( #1 \right)
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bTheta}
% |\bTheta{n^2}|: \bTheta{n^2}
%    \begin{macrocode}
\def\bThetaOhneMathe#1{
  \Theta \bRundeKlammer{#1}
}
\def\bTheta#1{
  \ifmmode
    \bThetaOhneMathe{#1}
  \else
    $\bThetaOhneMathe{#1}$
  \fi
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bOmega}
% |\bOmega{n^2}|: \bOmega{n^2}
%    \begin{macrocode}
\def\bOmegaOhneMathe#1{
  \Omega \bRundeKlammer{#1}
}
\def\bOmega#1{
  \ifmmode
    \bOmegaOhneMathe{#1}
  \else
    $\bOmegaOhneMathe{#1}$
  \fi
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bO}
% |\bO{n^2}|: \bO{n^2}
%    \begin{macrocode}
\def\bOOhneMathe#1{
  \mathcal{O} \bRundeKlammer{#1}
}
\def\bO#1{
  \ifmmode
    \bOOhneMathe{#1}
  \else
    $\bOOhneMathe{#1}$
  \fi
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bT}
% \bMakroFaulenzer{T}{liT}
% |\bT{16}{2}|: \bT{16}{2}
% |\bT{}{2}|: \bT{}{2}
%    \begin{macrocode}
\def\bTOhneMathe#1#2{
  \tl_if_blank:nTF {#1}
  {}
  {#1 \cdot }
  T
  \bRundeKlammer{\frac{n}{#2}}
}
\def\bT#1#2{
  \ifmmode
    \bTOhneMathe{#1}{#2}
  \else
    $\bTOhneMathe{#1}{#2}$
  \fi
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bRekursionsGleichung}
% |\bRekursionsGleichung|: \bRekursionsGleichung
%    \begin{macrocode}
\def\bRekursionsGleichung{
  $T(n) = \bT{a}{b} + f(n)$
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bBedingungEins}
% |\bBedingungEins|: \bBedingungEins
%    \begin{macrocode}
\def\bBedingungEins{
  $f(n) \in \bO{n^{\log\sb{b}a - \varepsilon}}$
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bBedingungZwei}
% |\bBedingungZwei|: \bBedingungZwei
%    \begin{macrocode}
\def\bBedingungZwei{
  $f(n) \in \bTheta{n^{\log\sb{b}a}}$
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bBedingungDrei}
% |\bBedingungDrei|: \bBedingungDrei
%    \begin{macrocode}
\def\bBedingungDrei{
  $f(n) \in \bOmega{n^{\log\sb{b}a + \varepsilon}}$
}
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}
\ExplSyntaxOff
%    \end{macrocode}

% \begin{macro}{\bMasterVariablen}
%    \begin{macrocode}
\def\bMasterVariablen{
  \begin{displaymath}
  T(n) = \bT{a}{b} + f(n)
  \end{displaymath}

  \begin{itemize}
  \item[$a =$]
  Anzahl der rekursiven Aufrufe, Anzahl der Unterprobleme in der
  Rekursion
  ($a \geq 1$).

  \item[$\textstyle{\frac{1}{b}} =$]
  Teil des Originalproblems, welches wiederum durch alle Unterprobleme
  repräsentiert wird, Anteil an der Verkleinerung des Problems ($b > 1$).

  \item[$f(n) =$]
  Kosten (Aufwand, Nebenkosten), die durch die Division des Problems und
  die Kombination der Teillösungen entstehen. Eine von $T(n)$
  unabhängige und nicht negative Funktion.
  \end{itemize}
  \footcite{wiki:master-theorem}
  \footcite[Seite 19-35]{aud:fs:2}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bMasterFaelle}
%    \begin{macrocode}
\def\bMasterFaelle{
  \begin{description}
  \item[1. Fall:]
  $T(n) \in \bTheta{n^{\log\sb{b}a}}$

  \hfill falls \bBedingungEins
  für $\varepsilon > 0$

  \item[2. Fall:]
  $T(n) \in \bTheta{n^{\log\sb{b}a} \cdot \log n}$

  \hfill falls \bBedingungZwei

  \item[3. Fall:]
  $T(n) \in \bTheta{f(n)}$

  \hfill falls \bBedingungDrei
  für $\varepsilon > 0$
  und ebenfalls für ein $c$ mit $0 < c < 1$ und alle hinreichend großen $n$
  gilt:
  $a \cdot f(\textstyle {\frac {n}{b}})\leq c \cdot f(n)$
  \end{description}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bMasterVariablenDeklaration}
%    \begin{macrocode}
\def\bMasterVariablenDeklaration#1#2#3{
  \begin{description}
    \item[Allgemeine Rekursionsgleichung:] \strut

    \bRekursionsGleichung

    \item[Anzahl der rekursiven Aufrufe ($a$):] \strut

    #1

    \item[Anteil Verkleinerung des Problems ($b$):] \strut

    um $\frac{1}{#2}$ also $b = #2$

    \item[Laufzeit der rekursiven Funktion ($f(n)$):] \strut

    $#3$

    \item[Ergibt folgende Rekursionsgleichung:] \strut

    $T(n) = \bT{#1}{#2} + #3$
  \end{description}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bMasterFallRechnung}
%    \begin{macrocode}
\def\bMasterFallRechnung#1#2#3{
  \begin{description}
  \item[1. Fall:] \bBedingungEins:

  #1

  \item[2. Fall:] \bBedingungZwei:

  #2

  \item[3. Fall:] \bBedingungDrei:

  #3
  \end{description}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bMasterExkurs}
%    \begin{macrocode}
\def\bMasterExkurs{
  \begin{bExkurs}[Master-Theorem]
  \bMasterVariablen

  \noindent
  Dann gilt:

  \bMasterFaelle
  \end{bExkurs}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bMasterWolframLink}
% Link zu Wolframalpha (+ durch Prozent 2B ersetzen)
%    \begin{macrocode}
\def\bMasterWolframLink#1{
  Berechne die Rekursionsgleichung auf WolframAlpha:
  \href{https://www.wolframalpha.com/input/?i=#1}{WolframAlpha}
}
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}

%    \end{macrocode}
% \subsection{mathe.sty}
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[1995/12/01]
\ProvidesPackage{bschlangaul-mathe}[2020/06/10]

% for example \ltimes \rtimes
%\RequirePackage{amssymb}
\RequirePackage{amsmath}

%%
% \mlq \mrq
%%
\DeclareMathSymbol{\mlq}{\mathord}{operators}{``}
\DeclareMathSymbol{\mrq}{\mathord}{operators}{`'}

%    \end{macrocode}
% \subsection{meta.sty}
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[1995/12/01]
\ProvidesPackage{bschlangaul-klassen-meta}[2021/09/10 Sammlung
von Textschnipseln, die das Projekt beschreiben]
%    \end{macrocode}

%    \begin{macrocode}
\ExplSyntaxOn
%    \end{macrocode}

%    \begin{macrocode}
\bLadePakete{grafik}
%    \end{macrocode}

% \subsubsection{Einfache Makros (Low level)}

% \begin{macro}{\bMetaBschlangaulSammlung}
%    \begin{macrocode}
\def\bMetaBschlangaulSammlung
{
  Die~Bschlangaul-Sammlung
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bMetaHermineFriends}
%    \begin{macrocode}
\def\bMetaHermineFriends
{
  Hermine~Bschlangaul~and~Friends
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bMetaEmail}
%    \begin{macrocode}
\def\bMetaEmail
{
  hermine.bschlangaul@gmx.net
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bMetaEmailLink}
%    \begin{macrocode}
\def\bMetaEmailLink
{
  \href
  {
    mailto:\bMetaEmail
  }
  {
    \bMetaEmail
  }
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bMetaUeberDasProjekt}
%    \begin{macrocode}
\def\bMetaUeberDasProjekt
{
  Eine~freie~Aufgabensammlung~mit~Lösungen~
  von~Studierenden~für~Studierende~
  zur~Vorbereitung~auf~die~1.~Staatsexamensprüfungen~
  des~Lehramts~Informatik~in~Bayern.
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bMetaCCLink}
%    \begin{macrocode}
\def\bMetaCCLink
{
  Diese~Materialsammlung~unterliegt~den~Bestimmungen~der~
  \href
  {
    https://creativecommons.org/licenses/by-nc-sa/4.0/deed.de
  }
  {
    Creative~Commons~Namensnennung-Nicht~kommerziell-Share~Alike~4.0~
    International-Lizenz
  }.
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bMetaHilfMit}
%    \begin{macrocode}
\def\bMetaHilfMit
{
  Hilf~mit!~

  Die~Hermine~schafft~das~nicht~alleine!~

  Das~ist~ein~Community-Projekt.~

  Verbesserungsvorschläge,~Fehlerkorrekturen,~weitere~Lösungen~sind~
  herzlich~willkommen~-~egal~wie~-~per~Pull-Request~oder~per~E-Mail~an~
  \bMetaEmailLink.
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bMetaHilfMit}
%    \begin{macrocode}
\def\bMetaQuelltext
{
  Der~\TeX-Quelltext~dieses~Dokuments~kann~unter~folgender~
  URL~aufgerufen~werden:~
}
%    \end{macrocode}
% \end{macro}

% \subsubsection{Zusammengesetzte Makros (High level)}

% Plaziert zwei Minipages nebeneinander. Die erste Umgebung ist
% für eine Logo gedacht, die zweite für einen Text
%    \begin{macrocode}
\cs_new:Npn \logo_dann_text:nn #1 #2
{
  \begin{center}
    \begin{minipage}[c]{5.5cm}
      #1
    \end{minipage}

    \begin{minipage}[c]{10cm}
      #2
    \end{minipage}
  \end{center}
}
%    \end{macrocode}

% \begin{macro}{\bLogoTextProjekt}
%    \begin{macrocode}
\def\bLogoTextProjekt
{
  \logo_dann_text:nn
  {
    \bGrafikLogo[width=5cm]
  }
  {
    {
      \bfseries
      \bMetaBschlangaulSammlung
    }
    \par

    \bMetaHermineFriends
    \par

    \medskip

    \begin{spacing}{1}
      \footnotesize
      \bMetaUeberDasProjekt
    \end{spacing}
  }
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bLogoTextCCLizenz}
%    \begin{macrocode}
\def\bLogoTextCCLizenz
{
  \logo_dann_text:nn
  {
    \centerline{\bGrafikCCLizenz[width=3cm]}
  }
  {
    \begin{spacing}{1}
      \scriptsize
      \bMetaCCLink
    \end{spacing}
  }
}
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}
\ExplSyntaxOff
%    \end{macrocode}

%    \begin{macrocode}

%    \end{macrocode}
% \subsection{minimierung.sty}
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[1995/12/01]
\ProvidesPackage{bschlangaul-minimierung}[2021/03/13 Für den
Minimierungsalgorithmus von einem NEA zu einem DEA]
%    \end{macrocode}

%    \begin{macrocode}
\bLadePakete{typographie}
%    \end{macrocode}

% \begin{verbatim}
% \let\z=\bZustandsnameTiefgestellt
% \let\f=\bFussnote
% \let\l=\bLeereZelle
% \let\Z=\bZustandsPaar
% \let\erklaerung=\bMinimierungErklaerung
%
% \begin{tabular}{|c||c|c|c|c|c|c|c|c|c|}
% \hline
% \z0 & \l  & \l  & \l  & \l  & \l  & \l  & \l  & \l  & \l  \\ \hline
% \z1 &     & \l  & \l  & \l  & \l  & \l  & \l  & \l  & \l  \\ \hline
% \z2 &     &     & \l  & \l  & \l  & \l  & \l  & \l  & \l  \\ \hline
% \z3 &     &     &     & \l  & \l  & \l  & \l  & \l  & \l  \\ \hline
% \z4 &     &     &     &     & \l  & \l  & \l  & \l  & \l  \\ \hline
% \z5 &     &     &     &     &     & \l  & \l  & \l  & \l  \\ \hline
% \z6 &     &     &     &     &     &     & \l  & \l  & \l  \\ \hline
% \z7 &     &     &     &     &     &     &     & \l  & \l  \\ \hline
% \z8 &     &     &     &     &     &     &     &     & \l  \\ \hline\hline
%     & \z0 & \z1 & \z2 & \z3 & \z4 & \z5 & \z6 & \z7 & \z8 \\ \hline
% \end{tabular}
%
% \bFussnoten
%
% \begin{liUebergangsTabelle}{0}{1}
% \Z01 & \Z10 & \Z23     \\
% \Z05 & \Z15 & \Z25 \f2 \\
% \Z15 & \Z05 & \Z35 \f2 \\
% \Z23 & \Z44 & \Z55     \\
% \Z24 & \Z44 & \Z55     \\
% \Z34 & \Z44 & \Z55     \\
% \end{liUebergangsTabelle}
%
% \end{verbatim}

% \begin{macro}{\bFussnote}
%    \begin{macrocode}
\def\bFussnote#1{$x_{#1}$}
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}
\def\li@fussnote@text#1#2{
  \bFussnote{#1}
  \quad
  {\footnotesize #2}
}
%    \end{macrocode}

% \begin{macro}{\bFussnoteEinsText}
%    \begin{macrocode}
\def\bFussnoteEinsText{
  \li@fussnote@text{1}
  {Paar aus End-/ Nicht-Endzustand kann nicht äquivalent sein.}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bFussnoteZweiText}
%    \begin{macrocode}
\def\bFussnoteZweiText{
  \li@fussnote@text{2}
  {Test, ob man mit der Eingabe zu einem bereits markiertem Paar kommt.}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bFussnoteDreiText}
%    \begin{macrocode}
\def\bFussnoteDreiText{
  \li@fussnote@text{3}
  {In weiteren Iterationen markierte Zustände.}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bFussnoteVierText}
%    \begin{macrocode}
\def\bFussnoteVierText{
  \li@fussnote@text{4}
  {…}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bFussnoten}
% \begin{bBeispiel}
%   \bFussnoten
% \end{bBeispiel}
%    \begin{macrocode}
\def\bFussnoten{
  \bigskip

  \noindent
  \bFussnoteEinsText

  \noindent
  \bFussnoteZweiText

  \noindent
  \bFussnoteDreiText

  \noindent
  \bFussnoteVierText
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bLeereZelle}
% |\bLeereZelle|: \bLeereZelle
% \bMakroFaulenzer{l}{liLeereZelle}
%    \begin{macrocode}
\def\bLeereZelle{$\emptyset$}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bZustandsPaarVariablenName}
%    \begin{macrocode}
\def\bZustandsPaarVariablenName{z}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bZustandsPaar}
%    \begin{macrocode}
\def\bZustandsPaar#1#2{
  $(
    \bZustandsPaarVariablenName_#1,
    \bZustandsPaarVariablenName_#2
  )$
}
%    \end{macrocode}
% \end{macro}

% \begin{environment}{liUebergangsTabelle}
%    \begin{macrocode}
\renewcommand{\arraystretch}{1.4}
\NewDocumentEnvironment{ liUebergangsTabelle } { m m } {
  \bPseudoUeberschrift{Übergangstabelle}
  \begin{center}
  \begin{tabular}{r||l|l}
  \textbf{Zustandspaar} & \textbf{#1} & \textbf{#2} \\\hline
} {
  \end{tabular}
  \end{center}
}
%    \end{macrocode}
% \end{environment}

% \begin{macro}{\bUeberschriftDreiecksTabelle}
% |\bUeberschriftDreiecksTabelle|: \bUeberschriftDreiecksTabelle
%    \begin{macrocode}
\ExplSyntaxOn
\def\bUeberschriftDreiecksTabelle{
  \bPseudoUeberschrift{Minimierungstabelle~(Table~filling)}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bMinimierungErklaerung}
% \bMakroFaulenzer{erklaerung}{liMinimierungErklaerung}
% \bMinimierungErklaerung
%    \begin{macrocode}
\def\bMinimierungErklaerung{
  %\footcite[Seite~19]{koenig}
  \bParagraphMitLinien{
    Der~Minimierungs-Algorithmus~(auch~Table-Filling-Algorithmus~genannt)~
    trägt~in~seinem~Verlauf~eine~Markierung~in~alle~
    diejenigen~Zellen~der~Tabelle~ein,~die~zueinander~nicht~äquivalente~
    Zustände~bezeichnen.~Die~Markierung~„$x\sb{n}$“~in~einer~Tabellenzelle~($i$,~
    $j$)~bedeutet~dabei,~dass~das~Zustandspaar~($i$,~$j$)~in~der~$k$-ten~
    Iteration~des~Algorithmus~markiert~wurde~und~die~Zustände~$i$~und~$j$~
    somit~zueinander~($k~-~1$)-äquivalent,~aber~nicht~$k$-äquivalent~und~
    somit~insbesondere~nicht~äquivalent~sind.~Bleibt~eine~Zelle~bis~zum~Ende~
    unmarkiert,~sind~die~entsprechenden~Zustände~zueinander~äquivalent.
  }
}
\ExplSyntaxOff
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}

%    \end{macrocode}
% \subsection{normalformen.sty}
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[1995/12/01]
\ProvidesPackage{bschlangaul-normalformen}[2020/12/10
Hilfsmakros zum Setzen von Normalformen, Funktionalen Abhänigkeiten,
Attributhülle]
%    \end{macrocode}

% Mathe für textit tex etc, typographie für geschweifte Klammer
%    \begin{macrocode}
\bLadePakete{mathe,typographie}
%    \end{macrocode}

%    \begin{macrocode}
\directlua{
  helfer = require('bschlangaul-helfer')
  normalformen = require('bschlangaul-normalformen')
}
%    \end{macrocode}

% \bFaulenzer{
%   ah = bAttributHuelle,
%   ahL = bLinksReduktion,
%   ahl = bLinksReduktionInline,
%   ahr = bRechtsReduktionInline,
%   fa = bFunktionaleAbhaengigkeit,
%   FA = bFunktionaleAbhaengigkeiten,
%   m = bAttributMenge,
%   r = bRelation,
%   u = underline,
% }

%    \begin{macrocode}
\def\bTeilen#1{
  \directlua{tex.print(normalformen.teilen('#1'))}
}
%    \end{macrocode}

% \begin{macro}{\bAttributHuelle}
% \bMakroFaulenzer{ah}{liAttributHuelle}
% |\ah{F, \m{A, B}}| \bAttributHuelle{F, \bAttributMenge{A, B}}
% Regulärer Ausdruck zum Konvertieren
% |AttrHülle\((.*)\)|
% |\\ah{$1}|
%    \begin{macrocode}
\def\bAttributHuelleOhneMathe#1{\text{AttrHülle}(#1)}
\def\bAttributHuelle#1{
\ifmmode
  \bAttributHuelleOhneMathe{#1}
\else
  $\bAttributHuelleOhneMathe{#1}$
\fi
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bAttributMenge}
% \bMakroFaulenzer{m}{liAttributMenge}
%    \begin{macrocode}
\def\bAttributMenge#1{\{ \textit{#1} \}}
%    \end{macrocode}
% \end{macro}

% \begin{environment}{liAHuelle}
%    \begin{macrocode}
\NewDocumentEnvironment{ liAHuelle } { +b } {
  \begingroup
  \footnotesize
  \begin{multline*}
    #1
  \end{multline*}
  \endgroup
} { }
%    \end{macrocode}
% \end{environment}

% \begin{macro}{\bLinksReduktion}
% Nur innerhalb von |liAHuelle| zu verwenden
% bzw. |multline|
% \bMakroFaulenzer{ahL}{liLinksReduktion}
% |\ahL{ursprüngliche linke Attributmenge}{ohne dieses Attribut}{Ergebnis}|
%    \begin{macrocode}
\def\bLinksReduktion#1#2#3{
  \shoveleft{
    \bAttributHuelleOhneMathe{FA,
    \bAttributMenge{#1 \string\ #2}} =
    } \\
  \shoveright{
    \bAttributMenge{#3}
  } \\
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bLinksReduktionInline}
% \bMakroFaulenzer{ahL}{liLinksReduktionInline}
% |\ahl{ursprüngliche linke Attributmenge}{ohne dieses Attribut}{Ergebnis}|
% |\ahl{A, E}{E}{A, E, F, B, \textbf{D}}|: \bLinksReduktionInline{A, E}{E}{A, E, F, B, \textbf{D}}
%    \begin{macrocode}
\def\bLinksReduktionInline#1#2#3{%
  {%
    \footnotesize%
    $\bAttributHuelleOhneMathe{F,
    \bAttributMenge{#1 \string\ #2}} =
    \bAttributMenge{#3}$
  }
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bLinksReduktionInline}
% \bMakroFaulenzer{ahr}{liLinksReduktionInline}
% |\ahr{gelöschte FA}{neue FA ohne rechts Attribut}{gegebene Attribute}{Ergebnis}|
%    \begin{macrocode}
\def\bRechtsReduktionInline#1#2#3#4{%
  {%
    \footnotesize%
    $\bAttributHuelleOhneMathe{
      F \setminus
      \bFunktionaleAbhaengigkeit{#1}
      \def\tmp{#2}\ifx\tmp\empty
      \else
        \cup \bFunktionaleAbhaengigkeit{#2}
      \fi
      ,
      \bAttributMenge{#3}
    } =
    \bAttributMenge{#4}$
  }
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bFunktionaleAbhaengigkeit}
% \bMakroFaulenzer{fa}{liFunktionaleAbhaengigkeit}
% |\fa{A, B -> C, D}|: \bFunktionaleAbhaengigkeit{A, B -> C, D}
% Regulärer Ausdruck zum Konvertieren: |\$(.*?) \\rightarrow (.*?)\$|
% |\\fa{$1 -> $2}|
%    \begin{macrocode}
\def\bFunktionaleAbhaengigkeit#1{%
  \directlua{normalformen.drucke_funk_abhaengigkeit('#1', false)}%
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bFunktionaleAbhaengigkeiten}
% \begin{verbatim}
% \FA[F]{
%   M -> M;
%   M -> N;
%   V -> T, P, PN;
%   P -> PN;
% }
% \end{verbatim}
%
% \begin{bBeispiel}
% \bFunktionaleAbhaengigkeiten[F]{
%   M -> M;
%   M -> N;
%   V -> T, P, PN;
%   P -> PN;
% }
% \end{bBeispiel}
% \bMakroFaulenzer{FA}{liFunktionaleAbhaengigkeiten}
% Regulärer Ausdruck zum Konvertieren:
% |\\item \$(.*) \\rightarrow (.*)\$|
% |\$(.*) \\rightarrow (.*)\$|
% |$1 -> $2;|
%    \begin{macrocode}
\NewDocumentCommand {\bFunktionaleAbhaengigkeiten} { O{FA} m } {
  \bGeschweifteKlammern
  {#1}
  {
    \begin{align*}
    \directlua{normalformen.drucke_funk_abhaengigkeiten('#2')}
    \end{align*}
  }
  {-0.5cm}
  {-1.7cm}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bRelation}
% \bMakroFaulenzer{r}{liRelation}
% |\r[R3]{\u{A}, B, C}|: \bRelation[R3]{\underline{A}, B, C}
% Regulärer Ausdruck zum Konvertieren:
% |\$(R.*)\((.*)\)\$|
% |\\bRelation[$1]{$2}|
%    \begin{macrocode}
\NewDocumentCommand {\bRelation} { O{R} m } {
  $\directlua{
    local name = helfer.konvertiere_tiefgestellt('#1')
    tex.print(name)
  }$(\textit{\,#2\,})
}
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}

%    \end{macrocode}
% \subsection{o-notation.sty}
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[1995/12/01]
\ProvidesPackage{bschlangaul-o-notation}[2021/09/08]
%    \end{macrocode}

% \bFaulenzer{
%   O = bONotationO,
% }

% \subsubsection{TeX-Markup-Beispiel: Funktionsgraphen mit pgfplots}

% \begin{verbatim}
% \begin{tikzpicture}
%   \begin{axis}[
%     xlabel=$n$,
%     legend entries={\f a, \f b, \f c, \f d, \f e},
%     ymax=500,
%     xmin=0,
%     xmax=7,
%     legend pos=north west,
%     domain=0:7
%   ]
%   \addplot{sqrt(x^5) + (4 * x) - 5};
%   \addplot{log2(log2(x))};
%   \addplot{2^x};
%   \addplot{x^2 * log10(x) + (2 * x)};
%   \addplot{4^x / (log2(x))};
% \end{axis}
% \end{tikzpicture}
% \end{verbatim}

%    \begin{macrocode}
\ExplSyntaxOn
%    \end{macrocode}

%    \begin{macrocode}
\RequirePackage{amssymb}
%    \end{macrocode}

%    \begin{macrocode}
\RequirePackage{pgfplots}
%    \end{macrocode}

% Für echte Teilmenge |\subsetneq|: $\subsetneq$
%    \begin{macrocode}
\RequirePackage{amssymb}
%    \end{macrocode}

% \begin{macro}{\bRundeKlammer}
%    \begin{macrocode}
\def\bRundeKlammer#1{
  \negthinspace \left( #1 \right)
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bONotationO}
% |\O{n^2}|: \bONotationO{n^2}
%    \begin{macrocode}
\cs_new:Npn \o_notation_O:n #1 {
  \mathcal{O} \bRundeKlammer{#1}
}
\def\bONotationO#1{
  \ifmmode
    \o_notation_O:n { #1 }
  \else
    $ \o_notation_O:n { #1 } $
  \fi
}
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}

%    \end{macrocode}
% \subsection{petri.sty}
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[1995/12/01]
\ProvidesPackage{bschlangaul-petri}[2020/12/03]
%    \end{macrocode}

% \bFaulenzer{
%   t = bPetriTransitionsName,
%   tp = bPetriTransPfeile,
%   k = bPetriErreichKnotenDrei,
% }

%    \begin{macrocode}
\RequirePackage{tikz}
\usetikzlibrary{petri,arrows.meta}
%    \end{macrocode}

% Für die Darstellungsmatrix
%    \begin{macrocode}
\RequirePackage{blkarray}
%    \end{macrocode}

% \begin{verbatim}
% \def\TmpA#1{
%   \bPetriSetzeSchluessel%
%   \pgfkeys{/petri/.cd,#1}%
%   \begin{tikzpicture}[li petri]
%   \node at (-0.25,-0.25) {};
%   \node at (\TmpX,\TmpY) {};
%
%   \begin{scope}[transform canvas={scale=\TmpScale},x=2cm,y=2cm,]
%     \node[place,tokens=\TmpPlaceOne,label=$p_1$] at (0,1) (p1) {};
%     \node[place,tokens=\TmpPlaceTwo,label=$p_2$] at (2,2) (p2) {};
%     \node[place,tokens=\TmpPlaceThree,label=east:$p_3$] at (2,0) (p3) {};
%
%     \node[transition,label=east:$t_1$,\TmpTransitionOne] at (2,1) {}
%       edge[pre] (p2)
%       edge[post] (p3);
%     \node[transition,label=$t_2$,\TmpTransitionTwo] at (1,1.5) {}
%       edge[pre] (p1)
%       edge[post] (p2);
%     \node[transition,label=$t_3$,\TmpTransitionThree] at (1,0.5) {}
%       edge[pre] (p3)
%       edge[post] (p1);
%     \node[transition,label=$t_4$,\TmpTransitionFour] at (1,1) {}
%       edge[pre] (p2)
%       edge[pre] (p3)
%       edge[post] (p1);
%   \end{scope}
%   \end{tikzpicture}
% }
% \end{verbatim}

% \begin{macro}{\bPetriSetzeSchluessel}
%    \begin{macrocode}
\def\bPetriSetzeSchluessel{%
  \def\TmpTransitionOne{}%
  \def\TmpTransitionTwo{}%
  \def\TmpTransitionThree{}%
  \def\TmpTransitionFour{}%
  \def\TmpTransitionFive{}%
  \def\TmpTransitionSix{}%
  \def\TmpTransitionSeven{}%
  \def\TmpTransitionEight{}%
  \def\TmpTransitionNine{}%
  \def\TmpTransitionTen{}%
  \pgfkeys{/petri/.cd,
    p1/.store in=\TmpPlaceOne,p1/.default=0,p1,
    p2/.store in=\TmpPlaceTwo,p2/.default=0,p2,
    p3/.store in=\TmpPlaceThree,p3/.default=0,p3,
    p4/.store in=\TmpPlaceFour,p4/.default=0,p4,
    p5/.store in=\TmpPlaceFive,p5/.default=0,p5,
    p6/.store in=\TmpPlaceSix,p6/.default=0,p6,
    p7/.store in=\TmpPlaceSeven,p7/.default=0,p7,
    p8/.store in=\TmpPlaceEight,p8/.default=0,p8,
    p9/.store in=\TmpPlaceNine,p9/.default=0,p9,
    p10/.store in=\TmpPlaceTen,p10/.default=0,p10,
    t1/.store in=\TmpTransitionOne,t1/.default=activated,
    t2/.store in=\TmpTransitionTwo,t2/.default=activated,
    t3/.store in=\TmpTransitionThree,t3/.default=activated,
    t4/.store in=\TmpTransitionFour,t4/.default=activated,
    t5/.store in=\TmpTransitionFive,t5/.default=activated,
    t6/.store in=\TmpTransitionSix,t6/.default=activated,
    t7/.store in=\TmpTransitionSeven,t7/.default=activated,
    t8/.store in=\TmpTransitionEight,t8/.default=activated,
    t9/.store in=\TmpTransitionNine,t9/.default=activated,
    t10/.store in=\TmpTransitionTen,t10/.default=activated,
    scale/.store in=\TmpScale,scale/.default=0.5,
    x/.store in=\TmpX,x/.default=5,
    y/.store in=\TmpY,y/.default=5,
  }%
}
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}
\tikzset{
  li petri/.style={
    activated/.style={
      very thick
    },
    inhibitor/.style={
      {Circle[open,length=2mm,fill=white]}-
    }
  }
}
%    \end{macrocode}

% \begin{macro}{\bPetriTransitionsName}
% \bMakroFaulenzer{t}{liPetriTransitionsName}
% |\$t_(\d+)\$| |\t$1|
%    \begin{macrocode}
\def\bPetriTransitionsNameOhneMathe#1{t\sb{#1}}
\def\bPetriTransitionsName#1{
  \ifmmode
    \bPetriTransitionsNameOhneMathe{#1}
  \else
    $\bPetriTransitionsNameOhneMathe{#1}$
  \fi
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bPetriErreichTransition}
% \bMakroFaulenzer{t}{liPetriErreichTransition}
%    \begin{macrocode}
\NewDocumentCommand{ \bPetriErreichTransition } { m m m O{} O{} } {
  \draw[->] (#1) edge[#4] node[pos=0.5,auto,sloped,#5]{$t\sb{#3}$} (#2);
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bPetriErreichKnotenDrei}
% \bMakroFaulenzer{k}{liPetriErreichKnotenDrei}
%    \begin{macrocode}
\def\bPetriErreichKnotenDrei#1#2#3{(#1,#2,#3)}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bPetriTransPfeile}
% \bMakroFaulenzer{tp}{liPetriTransPfeile}
%    \begin{macrocode}
\def\bPetriTransPfeile#1{$\rightarrow \hspace{0.4cm} \bPetriTransitionsName{#1} \hspace{0.35cm} \rightarrow$}
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}

%    \end{macrocode}
% \subsection{potenzmengen-konstruktion.sty}
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[1995/12/01]
\ProvidesPackage{bschlangaul-potenzmengen-konstruktion}[2021/02/21 Hilfsmakros
einzusetzen bei der Potenzmengen-Konstruktion (Potenzmengen-Algorithmus)]
%    \end{macrocode}

%    \begin{macrocode}
\bLadePakete{formale-sprachen}
\ExplSyntaxOn
%    \end{macrocode}

% \begin{verbatim}
% \def\z#1{
%   \bZustandsMengenSammlungNr{#1}{
%     {
%       {0} {0}
%       {1} {0,1}
%       {2} {0,2}
%       {3} {0,1,3}
%       {4} {0,2,3}
%       {5} {0,3}
%     }
%   }
% }
% \let\s=\bZustandsnameGross

% \begin{tabular}{l|l|l}
% Zustandsmenge & Eingabe $a$ & Eingabe $b$ \\\hline
% \z0 & \z0 & \z1 \\
% \z1 & \z2 & \z1 \\
% \z2 & \z0 & \z3 \\
% \z3 & \z4 & \z3 \\
% \z4 & \z5 & \z3 \\
% \z5 & \z5 & \z3\\
% \end{tabular}
% \end{verbatim}

% \begin{macro}{\bZustandsMengenSammlung}
% |\bZustandsMengenSammlung{nummer}{latex3 str_case:nn}|
%
% \begin{verbatim}
%   \def\z#1{
%     \bZustandsMengenSammlung{#1}{
%       {
%         {0} {z0}
%         {1} {z0, z1}
%         {2} {z0, z1, z2}
%         {3} {z0, z2}
%         {4} {z0, z1, z2, z3}
%         {5} {z0, z3}
%         {6} {z0, z2, z3}
%         {7} {z0, z1, z3}
%       }
%     }
%   }
% \end{verbatim}
%    \begin{macrocode}
\def\bZustandsMengenSammlung#1#2{
  \bZustandsnameGross{#1}
  {
    \footnotesize
    \bPotenzmenge{
      \str_case:nn {#1} #2
    }
  }
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bZustandsMengenSammlungNr}
%    \begin{macrocode}
\def\bZustandsMengenSammlungNr#1#2{
  \bZustandsnameGross{#1}
  {
    \footnotesize
    \bZustandsmengeNr{
      \str_case:nn {#1} #2
    }
  }
}
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}
\ExplSyntaxOff
%    \end{macrocode}

%    \begin{macrocode}

%    \end{macrocode}
% \subsection{pseudo.sty}
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[1995/12/01]
\ProvidesPackage{bschlangaul-pseudo}[2020/12/30 Paket zum Setzen
von Pseudo-Code, Hüll-Paket um algorithm2e]
%    \end{macrocode}

% \begin{verbatim}
% \begin{algorithm}[H]
% \KwData{$G = (V,E,w)$: ein zusammenhängender, ungerichteter,
% kantengewichteter Graph kruskal(G)}
% $E'\leftarrow \emptyset $\;
% $L\leftarrow E$\;
% Sortiere die Kanten in L aufsteigend nach ihrem Kantengewicht.\;
% \While{$L \neq \emptyset $}{
%   wähle eine Kante $e\in L$ mit kleinstem Kantengewicht\;
%   entferne die Kante e aus L\;
%   \If{der Graph $(V, E' \cup \lbrace e\rbrace)$ keinen Kreis enthält}{
%     $E'\leftarrow E'\cup \lbrace e\rbrace $\;
%   }
% }
% \KwResult{$M = (V,E')$ ist ein minimaler Spannbaum von G.}
% \caption{Minimaler Spannbaum nach Kruskal\footcite{wiki:kruskal}}
% \end{algorithm}
% \end{verbatim}

% \begin{algorithm}[H]
% \KwData{$G = (V,E,w)$: ein zusammenhängender, ungerichteter,
% kantengewichteter Graph kruskal(G)}
% $E'\leftarrow \emptyset $\;
% $L\leftarrow E$\;
% Sortiere die Kanten in L aufsteigend nach ihrem Kantengewicht.\;
% \While{$L \neq \emptyset $}{
%   wähle eine Kante $e\in L$ mit kleinstem Kantengewicht\;
%   entferne die Kante e aus L\;
%   \If{der Graph $(V, E' \cup \lbrace e\rbrace)$ keinen Kreis enthält}{
%     $E'\leftarrow E'\cup \lbrace e\rbrace $\;
%   }
% }
% \KwResult{$M = (V,E')$ ist ein minimaler Spannbaum von G.}
% \caption{Minimaler Spannbaum nach Kruskal\footcite{wiki:kruskal}}
% \end{algorithm}

%    \begin{macrocode}
\RequirePackage[german,boxruled]{algorithm2e}
%    \end{macrocode}

%    \begin{macrocode}

%    \end{macrocode}
% \subsection{pumping-lemma.sty}
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[1995/12/01]
\ProvidesPackage{bschlangaul-pumping-lemma}[2021/08/11 Enthält die
Definitionen für das Pumping-Lemma in der Regulären Sprache und
in der Kontextfreien Sprache]
%    \end{macrocode}

% \begin{macro}{\bPumpingRegulaer}
%    \begin{macrocode}
\def\bPumpingRegulaer{%
  Es sei $L$ eine reguläre Sprache. Dann gibt es eine Zahl $j$, sodass für
  alle Wörter $\omega \in L$ mit $|\omega| \geq j$ (jedes Wort $\omega$ in
  $L$ mit Mindestlänge $j$) jeweils eine Zerlegung $\omega = uvw$
  existiert, sodass die folgenden Eigenschaften erfüllt sind:

  \begin{enumerate}
  \item $|v| \geq 1$
  (Das Wort $v$ ist nicht leer.)

  \item $|uv| \leq j$
  (Die beiden Wörter $u$ und $v$ haben zusammen höchstens die Länge $j$.)

  \item Für alle $i = 0, 1, 2, \dots$ gilt $uv^iw \in L$
  (Für jede natürliche Zahl (mit $0$) $i$ ist das Wort $uv^{i}w$ in der
  Sprache $L$)
  \end{enumerate}

  Die kleinste Zahl $j$, die diese Eigenschaften erfüllt, wird
  Pumping-Zahl der Sprache $L$ genannt.\footcite{wiki:pumping-lemma}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bPumpingKontextfrei}
%    \begin{macrocode}
\def\bPumpingKontextfrei{%
  Es sei $L$ eine kontextfreie Sprache. Dann gibt es eine Zahl $j$, sodass
  sich alle Wörter $\omega \in L$ mit $|\omega| \geq j$ zerlegen lassen in
  $\omega = uvwxy$, sodass die folgenden Eigenschaften erfüllt sind:

  \begin{enumerate}
  \item $|vx| \geq 1$
  (Die Wörter $v$ und $x$ sind nicht leer.)

  \item $|vwx| \leq j$
  (Die Wörter $v$, $w$ und $x$ haben zusammen höchstens die Länge $j$.)

  \item Für alle $i \in \mathbb{N}_0$ gilt $u v^i w x^i y \in L$ (Für jede
  natürliche Zahl (mit $0$) $i$ ist das Wort $u v^i w x^i y$ in der
  Sprache $L$)
  \end{enumerate}
}
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}

%    \end{macrocode}
% \subsection{relationale-algebra.sty}
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[1995/12/01]
\ProvidesPackage{bschlangaul-relationale-algebra}[2020/12/11]
%    \end{macrocode}

%    \begin{macrocode}
\RequirePackage{amsmath}
%    \end{macrocode}

%    \begin{macrocode}
\RequirePackage{amssymb}
%    \end{macrocode}

% Zum Zeichen von Operatorenbäumen verwenden wir TikZ

% \begin{verbatim}
% \begin{tikzpicture}
%   \node
%     (pi) {$\pi_{\text{Kunde.Name, Kunde.Geburtsdatum}}$};

%   \node[below=of pi]
%     (theta join) {$\bowtie_{\text{Kunde.ID = Rechnung.Kunde}}$}
%     edge (pi);

%   \node[below left=of theta join]
%     {Kunde}
%     edge(theta join);

%   \node[below right=of theta join]
%     (sigma rechnung) {$\sigma_{\text{Summe < 100}}$}
%     edge (theta join);

%   \node[below=of sigma rechnung]
%     {Rechnung}
%     edge(sigma rechnung);
% \end{tikzpicture}
% \end{verbatim}
%
% \begin{bBeispiel}
% \begin{tikzpicture}
%   \node
%     (pi) {$\pi_{\text{Kunde.Name, Kunde.Geburtsdatum}}$};
%
%   \node[below=of pi]
%     (theta join) {$\bowtie_{\text{Kunde.ID = Rechnung.Kunde}}$}
%     edge (pi);
%
%   \node[below left=of theta join]
%     {Kunde}
%     edge(theta join);
%
%   \node[below right=of theta join]
%     (sigma rechnung) {$\sigma_{\text{Summe < 100}}$}
%     edge (theta join);
%
%   \node[below=of sigma rechnung]
%     {Rechnung}
%     edge(sigma rechnung);
% \end{tikzpicture}
% \end{bBeispiel}
%    \begin{macrocode}
\RequirePackage{tikz}
\usetikzlibrary{positioning}
%    \end{macrocode}

% Privates Makros, das zwei Querstriche erzeugt.
%    \begin{macrocode}
\def\o@join{\setbox0=\hbox{$\bowtie$}%
  \rule[-.02ex]{.25em}{.4pt}\llap{\rule[\ht0]{.25em}{.4pt}}%
}
%    \end{macrocode}

% \begin{macro}{\leftouterjoin}
% |A \leftouterjoin B|: $A \leftouterjoin B$
%    \begin{macrocode}
\def\leftouterjoin{\mathbin{\o@join\mkern-5.8mu\bowtie}}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\rightouterjoin}
% |A \rightouterjoin B|: $A \rightouterjoin B$
%    \begin{macrocode}
\def\rightouterjoin{\mathbin{\bowtie\mkern-5.8mu\o@join}}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\fullouterjoin}
% |A \fullouterjoin B|: $A \fullouterjoin B$
%    \begin{macrocode}
\def\fullouterjoin{\mathbin{\o@join\mkern-5.8mu\bowtie\mkern-5.8mu\o@join}}
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}

%    \end{macrocode}
% \subsection{rmodell.sty}
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[1995/12/01]
\ProvidesPackage{bschlangaul-rmodell}[2020/09/01
Makros und Umgebungen zum Setzen des Relationenmodells beim Thema
Datenbanken.]
\RequirePackage{soul}
%    \end{macrocode}

% \bFaulenzer{
%   a = bAttribut,
%   f = bFremd,
%   p = bPrimaer,
%   r = bRelationMenge,
% }

% \begin{macro}{\bPrimaer}
% |\bPrimaer{text}|: Unterstreichung für den Primärschlüssel
%    \begin{macrocode}
\def\bPrimaer#1{\ul{#1}}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bFremd}
% |\bFremd{text}|: Überstreichung für den Fremdschlüssel
%    \begin{macrocode}
\def\bFremd#1{{\setul{-0.9em}{}\ul{#1}}}
%    \end{macrocode}
% \end{macro}

% \begin{environment}{liRmodell}
% |\begin{liRmodell} \end{liRmodell}|: Kleinere Schrift und
% Schreibmaschinenschrift.
%    \begin{macrocode}
\def\li@Rmodell@Schrift{\footnotesize\ttfamily}
\ExplSyntaxOn
\NewDocumentEnvironment { liRmodell }
{ +b }
{
  \medskip
  {
    \linespread{2}
    \setlength{\parindent}{0pt}
    \li@Rmodell@Schrift#1
  }
  \medskip
} {}
\ExplSyntaxOff
%    \end{macrocode}
% \end{environment}

% \begin{macro}{\bRelationMenge}
% \bMakroFaulenzer{r}{liRelationMenge}
% |\bRelationMenge{name}{attribut, attribut}|: Umhüllen der Attribute
% mit geschweiften und dann eckigen Klammern.
%    \begin{macrocode}
\def\bRelationMenge#1#2{
\noindent
#1 : \{[ #2 ]\}
\par
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bAttribut}
% \bMakroFaulenzer{a}{liAttribut}
% |\bAttribut{text}|: Gleiche Schrift wie Umgebung |liRmodell|
%    \begin{macrocode}
\def\bAttribut#1{{\li@Rmodell@Schrift#1}}
%    \end{macrocode}
% \end{macro}

% \begin{environment}{liRelationenSchemaFormat}
% Dummy-Umgebung, zum Parsen durch Java gedacht.
%
% \begin{verbatim}
% \begin{liRelationenSchemaFormat}
% Springer(Startnummer*, Nachname, Vorname, Geburtsdatum, Körpergröße)
% Sprung(SID*, Beschreibung, Schwierigkeit)
% springt(SID[Sprung], Startnummer[Springer], Durchgang)
% \end{liRelationenSchemaFormat}
% \end{verbatim}

%    \begin{macrocode}
\NewDocumentEnvironment { liRelationenSchemaFormat }{ +b } {} {}
%    \end{macrocode}
% \end{environment}

%    \begin{macrocode}

%    \end{macrocode}
% \subsection{sortieren.sty}
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[1995/12/01]
\ProvidesPackage{bschlangaul-sortieren}[2020/06/10 Schaubilder
für händisches Sortieren bzw. einen Schreibtischlauf setzen]
%    \end{macrocode}

% \begin{verbatim}
% \tikz[
%   rectangle split parts=5,
% ]{
%   \node[li sortierung zahlenreihe] (reihe) {\nodepart{one} 2 \nodepart{two} 1 \nodepart{three} 3};
%   \bSortierPfeil{one}{two}
%   \bSortierPfeil{two}{three}
%   \bSortierMarkierung{two split south}{three split north}
%   \bSortierPfeilUnten{three}{one}
% }
% \end{verbatim}

% \begin{bBeispiel}
% \tikz[
%   rectangle split parts=5,
% ]{
%   \node[li sortierung zahlenreihe] (reihe) {\nodepart{one} 2 \nodepart{two} 1 \nodepart{three} 3};
%   \bSortierPfeil{one}{two}
%   \bSortierPfeil{two}{three}
%   \bSortierMarkierung{two split south}{three split north}
%   \bSortierPfeilUnten{three}{one}
% }
% \end{bBeispiel}

%    \begin{macrocode}
\RequirePackage{tikz}
\usetikzlibrary{shapes.multipart,positioning}
%    \end{macrocode}

% \begin{macro}{\bVertauschen}
% |\bVertauschen{1 2 >4 <3 5}|: Setze ein Schaubild mit Hilfe
% von TikZ. |<| und |>| werden dazu verwendet, um den Vertauschprozess
% zu visualisieren.
%    \begin{macrocode}
\def\bVertauschen#1{
  \directlua{
    local sortieren = require('bschlangaul-sortieren')
    sortieren('#1')
  }
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bSortierPfeil}
%    \begin{macrocode}
\def\bSortierPfeil#1#2{
  \draw[-latex] ([xshift=1mm]reihe.#1 north) -- ++(0,0.25) -| ([xshift=-1mm]reihe.#2 north);
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bSortierPfeilUnten}
%    \begin{macrocode}
\def\bSortierPfeilUnten#1#2{
  \draw[-latex] ([xshift=1mm]reihe.#1 south) -- ++(0,-0.25) -| ([xshift=-1mm]reihe.#2 south);
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bSortierMarkierung}
%    \begin{macrocode}
\def\bSortierMarkierung#1#2{\node[
  draw,
  very thick,
  fit=(reihe.#1) (reihe.#2),
  inner sep=0pt
] {};
}
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}
\tikzset{
  li sortierung zahlenreihe/.style={
    draw,
    thin,
    font=\large,
    rectangle split horizontal,
    rectangle split,
  }
}
%    \end{macrocode}

%    \begin{macrocode}
% https://tex.stackexchange.com/a/140895
\RequirePackage{forest,xstring}
\usetikzlibrary{calc}

\makeatletter
\pgfmathdeclarefunction{strrepeat}{2}{%
  \begingroup\pgfmathint{#2}\pgfmath@count\pgfmathresult
    \let\pgfmathresult\pgfutil@empty
    \pgfutil@loop\ifnum\pgfmath@count>0\relax
      \expandafter\def\expandafter\pgfmathresult\expandafter{\pgfmathresult#1}%
      \advance\pgfmath@count-1\relax
    \pgfutil@repeat\pgfmath@smuggleone\pgfmathresult\endgroup}
\makeatother

\def\myNodes{}

\ExplSyntaxOn
\newcommand*\sortList[1]{%
  \clist_sort:Nn#1{\int_compare:nNnTF{##1}>{##2}\sort_return_swapped:\sort_return_same:}}
\ExplSyntaxOff

\forestset{
  sort/.code={%
    \pgfmathparse{level()>\forestSortLevel}%
    \ifnum\pgfmathresult=0
      \StrSubstitute{\forestov{content}}{ }{,}[\myList]%
      \sortList\myList
      \StrSubstitute{\myList}{,}{ }[\myList]%
      \pgfmathparse{strrepeat("1",level())}%
      \xappto\myNodes{\noexpand\node at ($(\forestov{name}|-m)!-1!(\forestov{name})$)
        (m\forestov{name}) {\myList}}%
      \pgfmathparse{level()==\forestSortLevel}%
      \ifnum\pgfmathresult=1
        \forestOget{\forestov{@first}}{name}\forestFirst
        \forestOget{\forestov{@last}}{name}\forestLast
        \xappto\myNodes{{[<-]edge (\forestOv{\forestov{@first}}{name})
          \ifx\forestFirst\forestLast\else edge (\forestOv{\forestov{@last}}{name})\fi}}%
      \fi
      \ifnum\forestov{@parent}=0\else
        \xappto\myNodes{edge (m\forestOv{\forestov{@parent}}{name})}%
      \fi
      \gappto\myNodes{;}%
    \fi}}

\forestset{sort level/.code=%
  \pgfmathparse{#1}\let\forestSortLevel\pgfmathresult
  \pgfmathparse{strrepeat("1",\forestSortLevel+1)}\let\forestOnes\pgfmathresult}
%    \end{macrocode}

%    \begin{macrocode}

%    \end{macrocode}
% \subsection{spalten.sty}
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[1995/12/01]
\ProvidesPackage{bschlangaul-spalten}[2020/12/07 Lädt das Paket
„multicol“, damit mehrspaltiger Satz mit Hilfe der Umgebung „multicols“
realisiert werden kann.]
\RequirePackage{multicol}
%    \end{macrocode}

% \begin{macro}{\bSpaltenUmbruch}
% |\bSpaltenUmbruch|: Spezieller Spaltenumbruch, der den Inhalt
% mit Hilfe von |\vfill\strut| nach oben schiebt.
%    \begin{macrocode}
\def\bSpaltenUmbruch{\vfill\strut\columnbreak}
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}

%    \end{macrocode}
% \subsection{sql.sty}
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[1995/12/01]
\ProvidesPackage{bschlangaul-sql}[2021/09/02 Zu Setzen von SQL]
%    \end{macrocode}

% \bFaulenzer{
%   s = bSqlCode
% }

% \subsubsection{Latex-Markup-Beispiel}

% \begin{verbatim}
% \begin{bAdditum}[Übungsdatenbank]
% % Datenbankname: Personalverwaltung
% \begin{minted}{sql}
% CREATE TABLE Abteilung(
%   AbteilungsID INTEGER PRIMARY KEY,
%   Bezeichnung VARCHAR(30)
% );
%
% CREATE TABLE Mitarbeiter(
%   MitarbeiterID INTEGER PRIMARY KEY,
%   Vorname VARCHAR(30),
%   Vorgesetzter INTEGER REFERENCES Mitarbeiter(MitarbeiterID),
%   Telefonnummer VARCHAR(50),
%   Gehalt DOUBLE PRECISION
% );
%
% INSERT INTO Abteilung VALUES
%   (1,  'Buchhaltung');
%
% INSERT INTO Mitarbeiter
%   (MitarbeiterID, Vorname, Nachname, Vorgesetzter, AbteilungsID, Telefonnummer, Gehalt)
% VALUES
%   (1,  'Hans',   'Meier',    11,   4, '023/13432', 2335),
%   (2,  'Fred',   'Wolitz',   11,   2, '0233/413432', 1233);
% \end{minted}
% \index{SQL mit Übungsdatenbank}
% \end{bAdditum}
% \end{verbatim}

%    \begin{macrocode}
\bLadePakete{syntax}
%    \end{macrocode}

%    \begin{macrocode}
\RequirePackage{fancyvrb}
\DefineVerbatimEnvironment {bSqlErgebnis} {Verbatim}
{
 fontsize=\scriptsize
}
%    \end{macrocode}

% \begin{macro}{\bSqlCode}
% \bMakroFaulenzer{s}{liSqlCode}
%    \begin{macrocode}
\def\bSqlCode#1
{
  \mintinline{sql}|#1|
}
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}
\ExplSyntaxOff
%    \end{macrocode}

%    \begin{macrocode}

%    \end{macrocode}
% \subsection{struktogramm.sty}
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[1995/12/01]
\ProvidesPackage{bschlangaul-struktogramm}[2021/01/31 Lädt das
Paket struktex zum Setzen von Struktogrammen]
%    \end{macrocode}

%    \begin{macrocode}
\RequirePackage{struktex}
%    \end{macrocode}

%    \begin{macrocode}

%    \end{macrocode}
% \subsection{syntax.sty}
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[1995/12/01]
\ProvidesPackage{bschlangaul-syntax}[2020/06/10 Ein Hüll-Paket um
`minted`.]
%    \end{macrocode}

% Um das Paket |minted| benutzen zu können, muss |pygmentize|
% installiert sein. Außerdem müssen die TeX-Dateien mit der
% Kommandozeilen-Option |--shell-escape| kompiliert werden.

%    \begin{macrocode}
\ExplSyntaxOn
%    \end{macrocode}

%    \begin{macrocode}
\RequirePackage{hyperref}
%    \end{macrocode}

%    \begin{macrocode}
\RequirePackage{minted}
% pygmentize -L styles
\usemintedstyle{colorful}
%\BeforeBeginEnvironment{minted}{\begin{mdframed}}
%\AfterEndEnvironment{minted}{\end{mdframed}}
%\setminted{breaklines=true,linenos}
\setminted
{
  breaklines=true,
  linenos=false,
  fontsize=\footnotesize,
}
%    \end{macrocode}

% \begin{macro}{\bAssemblerCode}
%    \begin{macrocode}
\def\bAssemblerCode#1
{
  \mintinline{asm}|#1|
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bAssemblerDatei}
% |\bAssemblerDatei{relativer-pfad}|: Relativer Pfad zu einer
% Assembler-Datei.
%    \begin{macrocode}
\NewDocumentCommand { \bAssemblerDatei } { m }
{
  \inputminted{asm}{#1}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bMinispracheDatei}
% |\bMinispracheDatei{relativer-pfad}|: Relativer Pfad zu einer
% Minisprachen-Datei (Hochsprache für die Minimaschine von Albert
% Wiedemann).
%    \begin{macrocode}
\NewDocumentCommand { \bMinispracheDatei } { m }
{
  \inputminted{componentpascal}{#1}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bHaskellCode}
% |\bHaskellCode{haskell}|: Zum Setzen von Haskell-Code.
%    \begin{macrocode}
\def\bHaskellCode#1
{
  \mintinline{haskell}|#1|
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bHaskellDatei}
% |\bHaskellDatei{relativer-pfad}|: Relativer Pfad zu einer
% Haskell-Datei.
%    \begin{macrocode}
\NewDocumentCommand { \bHaskellDatei } { m }
{
  \inputminted{haskell}{#1}
}
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}
\ExplSyntaxOff
%    \end{macrocode}

%    \begin{macrocode}

%    \end{macrocode}
% \subsection{syntaxbaum.sty}
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[1995/12/01]
\ProvidesPackage{bschlangaul-syntaxbaum}[2021/02/14 Zum Setzen von
Syntaxbäumen mit Hilfe des Pakets tikz-qtree]
%    \end{macrocode}

% \subsection{TeX-Markup-Beispiel}

% \begin{verbatim}
% \begin{tikzpicture}[b syntaxbaum,level distance=1cm]
% \Tree [.S 0 [ 0 [.S $\varepsilon$ ] 0 ] 0 ]
% \end{tikzpicture}
% \end{verbatim}

% \begin{bBeispiel}
% \begin{tikzpicture}[b syntaxbaum,level distance=1cm]
% \Tree [.S 0 [ 0 [.S $\varepsilon$ ] 0 ] 0 ]
% \end{tikzpicture}
% \end{bBeispiel}

%    \begin{macrocode}
\RequirePackage{tikz-qtree}
%    \end{macrocode}

%    \begin{macrocode}
\tikzset{b syntaxbaum/.style={
    every internal node/.style={
      draw,circle
    },
    every leaf node/.style={
      draw,rectangle
    },
  }
}
%    \end{macrocode}

%    \begin{macrocode}

%    \end{macrocode}
% \subsection{synthese-algorithmus.sty}
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[1995/12/01]
\ProvidesPackage{bschlangaul-synthese-algorithmus}[2021/03/19
Hilfsmakros zum Setzen des Synthese-Algroithmuses zur Umformung einer
Relation in die 3. Normalform]
%    \end{macrocode}

%    \begin{macrocode}
\bLadePakete{
  normalformen,
  mathe,
  typographie
}
%    \end{macrocode}

%    \begin{macrocode}
\ExplSyntaxOn
%    \end{macrocode}

% \bFaulenzer{
%   schrittE = bSyntheseUeberErklaerung,
% }

% \subsubsection{TeX-Markup Grundgerüst}

% \begin{verbatim}
% \let\schrittE=\bSyntheseUeberErklaerung
% \begin{enumerate}
% \item \schrittE{1}
%
% \begin{enumerate}
% \item \schrittE{1-1}
% \item \schrittE{1-2}
% \item \schrittE{1-3}
% \item \schrittE{1-4}
% \end{enumerate}
%
% \item \schrittE{2}
% \item \schrittE{3}
% \item \schrittE{4}
% \end{enumerate}
% \end{verbatim}

% \subsubsection{TeX-Markup Linksreduktion}

% \begin{verbatim}
% \let\ahl=\bLinksReduktionInline
% \let\fa=\bFunktionaleAbhaengigkeit
% \let\m=\bAttributMenge
% \let\b=\textbf

% \bPseudoUeberschrift{\fa{C, E -> D, X}}
%
% $\m{D, X} \in$ \ahl{C, E}{E}{A, C, B, \b{D, X}}\\
% $\m{D, X} \notin$ \ahl{C, E}{C}{E, F}
%
% \bPseudoUeberschrift{\fa{C, E -> F}}
%
% $F \notin$ \ahl{C, E}{E}{A, C, B}\\
% $F \in$ \ahl{C, E}{C}{E, \b{F}}
% \end{verbatim}

% \subsubsection{TeX-Markup Rechtreduktion}

% \begin{verbatim}
% \let\ahr=\bRechtsReduktionInline
% \let\fa=\bFunktionaleAbhaengigkeit
%
% \bPseudoUeberschrift{F}
%
% $F \in$ \ahr{E -> F, X}{E -> F}{E}{E, \b{F}}
%
% \bPseudoUeberschrift{A}
%
% $A \notin$ \ahr{B -> A}{}{B}{B}\\
% $A \in$ \ahr{C -> A}{}{C}{\b{A},B,C}
% \end{verbatim}

% \subsubsection{TeX-Markup Relationen formen}

% \begin{verbatim}
% \let\r=\bRelation
% \let\u=\underline
%
% \r[R1]{\u{A, D}, E}\\
% \r[R2]{\u{B, C}, A, E}\\
% \r[R3]{\u{D}, B}
% \end{verbatim}

% \begin{bBeispiel}
% \let\schrittE=\bSyntheseUeberErklaerung
% \begin{enumerate}
% \item \schrittE{1}
%
% \begin{enumerate}
% \item \schrittE{1-1}
% \item \schrittE{1-2}
% \item \schrittE{1-3}
% \item \schrittE{1-4}
% \end{enumerate}
%
% \item \schrittE{2}
% \item \schrittE{3}
% \item \schrittE{4}
% \end{enumerate}
% \end{bBeispiel}

% \begin{macro}{\bSyntheseUeberschrift}
% \bMakroFaulenzer{schritt}{liSyntheseUeberschrift}
%    \begin{macrocode}
\def\bSyntheseUeberschrift#1
{
  {
    \bfseries
    \rmfamily
    \str_case:nn {#1} {
      {1} {Kanonische~Überdeckung}
      {1-1} {Linksreduktion}
      {1-2} {Rechtsreduktion}
      {1-3} {Löschen~leerer~Klauseln}
      {1-4} {Vereinigung}
      {2} {Relationsschemata~formen}
      {3} {Schlüssel~hinzufügen}
      {4} {Entfernung~überflüssiger~Teilschemata}
    }
  }
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bSyntheseErklaerung}
% \bMakroFaulenzer{erklaerung}{liSyntheseErklaerung}
%    \begin{macrocode}
\def\li@synthese@erklaerung@texte#1
{
  \str_case:nn {#1} {
    {1} {
      Die~kanonische~Überdeckung~-~also~die~kleinst~mögliche~noch~
      äquivalente~Menge~von~funktionalen~Abhängigkeiten~kann~in~vier~
      Schritten~erreicht~werden.
    }
    {1-1} {
      Führe~für~jede~funktionale~Anhängigkeit~
      $\alpha~\rightarrow~\beta~\in~F$~die~Linksreduktion~durch,~
      überprüfe~also~für~alle~
      $A~\in~\alpha$,~ob~$A$~überflüssig~ist,~d.~h.~ob~
      $\beta~\subseteq~\bAttributHuelle{F,~\alpha~-~A}.$
    }
    {1-2} {
      Führe~für~jede~(verbliebene)~funktionale~Abhängigkeit~$\alpha~
      \rightarrow~\beta$~die~Rechtsreduktion~durch,~überprüfe~also~für~
      alle~$B~\in~\beta$,~ob~$B~\in~\bAttributHuelle{F~-~(\alpha~
      \rightarrow~\beta)~\cup~(\alpha~\rightarrow~(\beta~-~B)),~
      \alpha}$~gilt.~In~diesem~Fall~ist~B~auf~der~rechten~Seite~
      überflüssig~und~kann~eleminiert~werden,~\dh~$\alpha~
      \rightarrow~\beta$~wird~durch~$\alpha~\rightarrow~(\beta~-~B)$~
      ersetzt.
    }
    {1-3} {
      Entferne~die~funktionalen~Abhängigkeiten~der~Form~$\alpha~
      \rightarrow~\emptyset$,~die~im~2.~Schritt~möglicherweise~
      entstanden~sind.
    }
    {1-4} {
      Fasse~mittels~der~Vereinigungsregel~funktionale~Abhängigkeiten~
      der~Form~$\alpha~\rightarrow~\beta\sb{1},~\dots,~\alpha~\rightarrow~
      \beta\sb{n}$,~so~dass~$\alpha~\rightarrow~\beta\sb{1}~\cup~\dots~\cup~
      \beta\sb{n}$~verbleibt.
    }
    % Kemper Seite 197
    {2} {
      Erzeuge~für~jede~funktionale~Abhängigkeit~$\alpha~\rightarrow~
      \beta~\in~F\sb{c}$~ein~Relationenschema~$\mathcal{R}\sb{\alpha}~
      :=~\alpha~\cup~\beta$.
    }
    {3} {
      Falls~eines~der~in~Schritt~2.~erzeugten~Schemata~$R\sb{\alpha}$~
      einen~Schlüsselkandidaten~von~$\mathcal{R}$~bezüglich~$F\sb{c}$~
      enthält,~sind~wir~fertig,~sonst~wähle~einen~Schlüsselkandidaten~
      $\mathcal{K}~\subseteq~\mathcal{R}$~aus~und~definiere~folgendes~
      zusätzliche~Schema:~$\mathcal{R}\sb{\mathcal{K}}~:=~\mathcal{K}$~
      und~$\mathcal{F}\sb{\mathcal{K}}~:=~\emptyset$
    }
    {4} {
      Eliminiere~diejenigen~Schemata~$R\sb{\alpha}$,~die~in~einem~
      anderen~Relationenschema~$R\sb{\alpha'}$~enthalten~sind,~d.~h.~
      $R\sb{\alpha}~\subseteq~R\sb{\alpha'}$.
    }
  }
}
\def\bSyntheseErklaerung#1
{
  {
    \itshape
    \footnotesize
    \bParagraphMitLinien{\li@synthese@erklaerung@texte{#1}}
  }
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bSyntheseUeberErklaerung}
% \bMakroFaulenzer{schrittE}{liSyntheseUeberErklaerung}
%    \begin{macrocode}
\def\bSyntheseUeberErklaerung#1
{
  \bSyntheseUeberschrift{#1}\par
  \bSyntheseErklaerung{#1}
}
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}
\ExplSyntaxOff

%    \end{macrocode}
% \subsection{tabelle.sty}
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[1995/12/01]
\ProvidesPackage{bschlangaul-tabelle}[2020/12/05 Lädt das Paket tabluarx]
%    \end{macrocode}

%    \begin{macrocode}
\RequirePackage{tabularx}
%    \end{macrocode}

%    \begin{macrocode}

%    \end{macrocode}
% \subsection{tex-dokumentation.sty}
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[1995/12/01]
\ProvidesPackage{bschlangaul-tex-dokumentation}[2021/09/12 Hilfsmakros
für die DTX-Dokumentation]
%    \end{macrocode}

%    \begin{macrocode}
\ExplSyntaxOn
%    \end{macrocode}

%    \begin{macrocode}
\RequirePackage{mdframed}
%    \end{macrocode}

%    \begin{macrocode}
\newenvironment{bBeispiel}
{
  \begin{mdframed}
}
{
  \end{mdframed}
}
%    \end{macrocode}

% \begin{macro}{\bMakroFaulenzer}
% \cmd{\bMakroFaulenzer}\marg{Abkürzung}\marg{Makroname ohne Schrägstrich}
%    \begin{macrocode}
\cs_new:Npn \let_abkuerzung:nn #1 #2
{
  \texttt
  {
    \textbackslash let
    \textbackslash#1
    =
    \textbackslash#2
  }
}
\def\bMakroFaulenzer #1 #2
{
  \par
  \noindent
  \textbf{Makro-Faulenzer:~}
  \let_abkuerzung:nn {#1}{#2}
  \par
}
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}
\prop_new:N \l_faulenzer_prop
%    \end{macrocode}

% \begin{macro}{\bFaulenzer}
%    \begin{macrocode}
\def\bFaulenzer#1
{
  \prop_clear:N \l_faulenzer_prop
  \prop_put_from_keyval:Nn \l_faulenzer_prop {#1}
  \subsubsection{Faulenzer}
  \prop_map_inline:Nn \l_faulenzer_prop
  {
    \noindent
    \let_abkuerzung:nn {##1} {##2}
    \par
  }
  \bigskip
}
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}
\ExplSyntaxOff
%    \end{macrocode}

%    \begin{macrocode}

%    \end{macrocode}
% \subsection{typographie.sty}
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[1995/12/01]
\ProvidesPackage{bschlangaul-typographie}[2021/03/20 Typographische Makros,
die das Erscheinungsbild verändern. Die Schriftdefinition sind in
formatierung.sty definiert.]
%    \end{macrocode}

%    \begin{macrocode}
\ExplSyntaxOn
%    \end{macrocode}

% Mit dem Packet wasysym gab es Unverträglichkeiten, deshalb verwenden wir fontawesome.
%    \begin{macrocode}
\RequirePackage{fontawesome}
%    \end{macrocode}

% \begin{macro}{\bErledigt}
% |\bErledigt|: \bErledigt
%    \begin{macrocode}
\let\bErledigt=\faCheckSquareO
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bNichtsZuTun}
% |\bNichtsZuTun|: \bNichtsZuTun
%    \begin{macrocode}
\def\bNichtsZuTun{$\emptyset$~Nichts~zu~tun}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bParagraphMitLinien}
% |\bParagraphMitLinien{Lorem ipsum...}|:
%
% \bParagraphMitLinien{Lorem ipsum dolor sit, ipsum dolor sit, ipsum
% dolor sit, ipsum dolor sit, ipsum dolor sit, ipsum dolor sit}
%    \begin{macrocode}
\def\bParagraphMitLinien#1
{
  \noindent
  \vrule height 2pt depth -1.6pt width 0.4cm
  \enspace
  #1
  \enspace
  \leaders\vrule height 2pt depth -1.6pt \hfill \null
  \par
  \medskip
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bGeschweifteKlammern}
% Große geschweifte Klammer mit Istgleich-Zeichen.
%
% \begin{bBeispiel}
% \bGeschweifteKlammern{Variable}{\begin{center}Inhalt\end{center}}{0cm}{0cm}
% \end{bBeispiel}
%    \begin{macrocode}
\def\bGeschweifteKlammern#1#2#3#4
{
  \par
  \medskip
  \noindent
  #1 \, $= \Bigl\{$
  \vspace{#3}
  #2
  \vspace{#4}
  \begin{flushright}$\Bigr\}$\end{flushright}
  \par
}
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}
\ExplSyntaxOff
%    \end{macrocode}

%    \begin{macrocode}

%    \end{macrocode}
% \subsection{uml.sty}
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[1995/12/01]
\ProvidesPackage{bschlangaul-uml}[2020/06/13 Ein Hüll-Paket um
`tikz-uml', das einige Design-Einstellungen vornimmt und manche
Erweiterung bereitstellt]
%    \end{macrocode}

%    \begin{macrocode}
\RequirePackage{tikz-uml}
%    \end{macrocode}

%    \begin{macrocode}
\RequirePackage{tikz-uml-activity}
%    \end{macrocode}

% Not compatible with wasysym
%    \begin{macrocode}
%\RequirePackage{mathabx}
\RequirePackage{wasysym}
%    \end{macrocode}

%    \begin{macrocode}
\usetikzlibrary{positioning}
%    \end{macrocode}

%    \begin{macrocode}
\tikzumlset{
  fill class=white!0,
  font=\footnotesize,
  fill object=white!0,
  fill note=white!0,
  fill state=white!0,
  % Use case
  fill usecase=white!0,
  fill system=white!0,
}
%    \end{macrocode}

% \begin{bBeispiel}

% \begin{tikzpicture}
% \umlclass{TicketHandel}{
%   \umlstatic{- system: TicketHandel} \\
%   - verkaufte Tickets : int
% }{
%   - TicketHandel() \\
%   \umlstatic{+ gibInstanz(): TicketHandel} \\
%   +ticketKaufen(kategorie: Kategorie) : Ticket \\
%   + gibVerkaufteTickets() : int
% }

% \umlclass[y=-4]{TicketDruckerei}{}{
%   + erstelleTicket(kategorie: Kategorie): Ticket
% }

% \umlclass[x=8,y=1,type=enumeration]{Kategorie}{
%   ERWACHSEN\\
%   KIND
% }{}

% \umlclass[x=8,y=-1.5,type=interface]{Ticket}{}{
%   gibPreis(): double
% }

% \umlclass[x=6,y=-4]{ErwachsenenTicket}{
%   \umlstatic{- preis: double = 15.0}
% }{}
% \umlclass[x=10,y=-4]{KinderTicket}{
%   \umlstatic{- preis: double = 10.0}
% }{}

% \umlVHVinherit{ErwachsenenTicket}{Ticket}
% \umlVHVinherit{KinderTicket}{Ticket}

% \umlHVHdep[stereo=use,pos stereo=1.8,anchor2=-150]{TicketDruckerei}{Ticket}
% \umldep[stereo=use,anchor1=-25]{TicketHandel}{Ticket}

% \umlVHVdep[arm1=-1cm,stereo=use,anchor1=-30,  pos stereo=1.5]{TicketDruckerei}{ErwachsenenTicket}
% \umlVHVdep[arm1=-1.5cm,stereo=use,anchor1=-150, pos stereo=1.5]{TicketDruckerei}{KinderTicket}

% \umluniassoc[arg1=,mult2=1,arg2=- druckerei,name=benutzt]{TicketHandel}{TicketDruckerei}
% \bUmlLeserichtung[pos=below left,dir=down,distance=0cm]{benutzt}
% \end{tikzpicture}
% \end{bBeispiel}

% \begin{macro}{\bUmlLeserichtung}
% \begin{verbatim}
% \umluniassoc[arg1=,mult2=1,arg2=- druckerei,name=benutzt]{TicketHandel}{TicketDruckerei}
% \bUmlLeserichtung[pos=below left,dir=down,distance=0cm]{benutzt}
% \end{verbatim}
%    \begin{macrocode}
\NewDocumentCommand{ \bUmlLeserichtung } { O{dir=right} m }
{
  \def\@liDirLeft{}
  \def\@liDirRight{ \RIGHTarrow}
  \pgfkeys{/lese/dir/.is choice}
  \pgfkeys{/lese/dir/up/.code={\def\@liDirRight{ \UParrow}}}
  \pgfkeys{/lese/dir/down/.code={\def\@liDirRight{ \DOWNarrow}}}
  \pgfkeys{/lese/dir/left/.code={\def\@liDirRight{}\def\@liDirLeft{\LEFTarrow }}}
  \pgfkeys{/lese/dir/right/.code={\def\@liDirRight{ \RIGHTarrow}}}

  \def\@liPos{above}
  \pgfkeys{/lese/pos/.code={\def\@liPos{##1}}}

  \def\@liDistance{0cm}
  \pgfkeys{/lese/distance/.code={\def\@liDistance{##1}}}

  \pgfkeys{/lese/.cd,#1}

  \node[\@liPos = \@liDistance of #2-middle] {
    \@liDirLeft{\footnotesize#2}\@liDirRight
  };
}
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}

%    \end{macrocode}
% \subsection{vollstaendige-induktion.sty}
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[1995/12/01]
\ProvidesPackage{bschlangaul-vollstaendige-induktion}[2021/07/01
Hilfsmakros zum Setzen der Vollständigen Induktion, vor allem die
Überschriften für die einzelnen Schritte]
%    \end{macrocode}

% \bFaulenzer{
%   m = bInduktionMarkierung,
%   e = bInduktionErklaerung,
% }

% \begin{verbatim}
% \begin{align*}
% C_{n+1}
% & = \frac
%     {(4 \cdot (\m{n + 1} - 1) + 2) \cdot \text{cn}(\m{n + 1} - 1)}
%     {\m{n + 1} + 1}
% & \e{Java nach Mathe}\\
% %
% & = \frac
%     {(4\m{n} + 2) \cdot \text{cn}(\m{n})}
%     {\m{n + 2}}
% & \e{addiert, subtrahiert}\\
% %
% & = \frac
%     {(4n + 2) \cdot \m{(2n)!}}
%     {(n + 2) \cdot \m{(n + 1)! \cdot n!}}
% & \e{für cn(n) Formel eingesetzt}\\
% %
% & = \frac
%     {(4n + 2) \cdot (2n)! \m{\cdot (n + 1)}}
%     {(n + 2) \cdot (n + 1)! \cdot n! \m{\cdot (n + 1)}}
% & \e{$(n + 1)$ multipliziert} \\
% %
% & = \frac
%     {(4n + 2) \cdot \m{(n + 1) \cdot (2n)!}}
%     {(n + 2) \cdot (n + 1)! \cdot \m{(n + 1) \cdot n!}}
% & \e{umsortiert} \\
% %
% & = \frac
%     {\m{(2(n + 1))!}}
%     {\m{(n + 2)! \cdot (n + 1)!}}
% & \e{Hilfsgleichungen verwendet}\\
% %
% & = \frac
%     {(2(\m{n + 1}))!}
%     {((\m{n + 1}) + 1)! \cdot (\m{n + 1})!}
% & \e{$(n + 1)$ verdeutlicht}\\
% \end{align*}
% \end{verbatim}

% Lade häufig benötigte Pakete
%    \begin{macrocode}
\bLadePakete{
  typographie,
  mathe,
  syntax
}
%    \end{macrocode}

%    \begin{macrocode}
\ExplSyntaxOn
%    \end{macrocode}

% \begin{macro}{\bInduktionMarkierung}
% Hilfsmakro um Teile von mathematischen Formeln markieren zu können.
% \bMakroFaulenzer{m}{liInduktionMarkierung}
%    \begin{macrocode}
\def\bInduktionMarkierung#1
{
  \textcolor{violet}{#1}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bInduktionErklaerung}
% Gedacht für die rechte Spalte in der align-Umgebung. Das text-Makro
% ist dann nicht mehr nötig.
% \bMakroFaulenzer{e}{liInduktionErklaerung}
%    \begin{macrocode}
\def\bInduktionErklaerung#1
{
  \scriptsize\text{#1}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bInduktionAnfang}
%    \begin{macrocode}
\def\bInduktionAnfang{
  \bPseudoUeberschrift{Induktionsanfang}

  % https://de.wikibooks.org/wiki/Mathe_für_Nicht-Freaks:_Vollständige_Induktion
  \bParagraphMitLinien{
    Beweise,~dass~$A(1)$~eine~wahre~Aussage~ist.
  }
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bInduktionVoraussetzung}
%    \begin{macrocode}
\def\bInduktionVoraussetzung{
  \bPseudoUeberschrift{Induktionsvoraussetzung}

  % https://de.wikibooks.org/wiki/Mathe_für_Nicht-Freaks:_Vollständige_Induktion
  \bParagraphMitLinien{
    Die~Aussage~$A(k)$~ist~wahr~für~ein~beliebiges~$k \in \mathbb{N}$.
  }
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bInduktionSchritt}
%    \begin{macrocode}
\def\bInduktionSchritt{
  \bPseudoUeberschrift{Induktionsschritt}

  % https://de.wikibooks.org/wiki/Mathe_für_Nicht-Freaks:_Vollständige_Induktion
  \bParagraphMitLinien{
    Beweise,~dass~wenn~$A(n=k)$~wahr~ist,~
    auch~$A(n=k+1)$~wahr~sein~muss.
  }
}
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}
\ExplSyntaxOff
%    \end{macrocode}

%    \begin{macrocode}

%    \end{macrocode}
% \subsection{wasserfall.sty}
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[1995/12/01]
\ProvidesPackage{bschlangaul-wasserfall}[2020/06/10 Zu Setzen des
Diagramms zum Wasserfallmodell]
%    \end{macrocode}

% \subsubsection{Latex-Markup-Beispiel}

% \begin{verbatim}
% \begin{tikzpicture}[b wasserfall]
% \node {Systemanforderung}; % A-1
% \node {Softwareanforderung};
% \node {Analyse};
% \node {Entwurf};
% \node {Implementierung};
% \node {Test};
% \node {Betrieb};
%
% \foreach \i [count=\j] in {2,...,7}
% {
%   \draw[->, thick] (A-\i) -| (A-\j);
%   \draw[->, thick] (A-\j) -| (A-\i);
% }
% \end{tikzpicture}
% \end{verbatim}

%    \begin{macrocode}
\RequirePackage{tikz}
%    \end{macrocode}

%    \begin{macrocode}
\usetikzlibrary{chains,positioning,shadows}
%    \end{macrocode}

%    \begin{macrocode}
\tikzset{
  b wasserfall/.style={
    >=stealth,
    node distance = 2mm and -8mm,
    start chain = A going below right,
    every node/.style = {
      draw,
      text width=24mm,
      minimum height=12mm,
      align=center,
      inner sep=1mm,
      fill=white,
      drop shadow={fill=black},
      on chain=A
    },
  }
}
%    \end{macrocode}

%    \begin{macrocode}

%    \end{macrocode}
% \subsection{wpkalkuel.sty}
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[1995/12/01]
\ProvidesPackage{bschlangaul-wpkalkuel}[2020/06/13 Hilfsmakros zum
Setzen des WP-Kalküls]
%    \end{macrocode}

% \bFaulenzer{
%   wp = bWpKalkuel,
%   equivalent = bWpEquivalent,
%   erklaerung = bWpErklaerung,
% }

%    \begin{macrocode}
\RequirePackage{amsmath}
%    \end{macrocode}

%    \begin{macrocode}
\ExplSyntaxOn
%    \end{macrocode}

% \begin{macro}{\bWpKalkuel}
% \bMakroFaulenzer{wp}{liWpKalkuel}
%    \begin{macrocode}
\def\bWpKalkuelOhneMathe#1#2
{
  \text{wp}(\texttt{\scriptsize"#1"},\thinspace #2)
}
\def\bWpKalkuel#1#2{
  \ifmmode
    \bWpKalkuelOhneMathe{#1}{#2}
  \else
    $\bWpKalkuelOhneMathe{#1}{#2}$
  \fi
}
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}
\cs_new:Npn \mathe_umgebung:n #1
{
  \medskip

  \hspace{1em}#1

  \medskip
}
%    \end{macrocode}

% \begin{macro}{\bWpPseudoMatheUmgebung}
%    \begin{macrocode}
\def\bWpPseudoMatheUmgebung#1
{
  \mathe_umgebung:n{$#1$}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bWpEquivalent}
% \bMakroFaulenzer{equivalent}{liWpEquivalent}
%    \begin{macrocode}
\def\bWpEquivalent#1
{
  \mathe_umgebung:n {
    $\equiv$
    \hspace{1em}
    $#1$
  }
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bWpErklaerung}
% \bMakroFaulenzer{erklaerung}{liWpErklaerung}
%    \begin{macrocode}
\newlength{\@Skip@Erklaerung@Reset}
\def\bWpErklaerung#1
{
  \setlength{\@Skip@Erklaerung@Reset}{\leftskip}
  \setlength{\leftskip}{0.5cm}

  \par
  \noindent
  {
    \scriptsize
    #1
  }
  \par

  \setlength{\leftskip}{\@Skip@Erklaerung@Reset}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bWpErklaerungVerzweigung}
%    \begin{macrocode}
\def\bWpErklaerungVerzweigung
{
  $\bWpKalkuelOhneMathe{if~\{~b~\}~then~\{~a1~\}~else~\{~a2~\}}{Q}
  \equiv
  (b \land \bWpKalkuelOhneMathe{a1}{Q})
  \lor
  (\neg b \land \bWpKalkuelOhneMathe{a2}{Q})$
}
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}
\ExplSyntaxOff
%    \end{macrocode}

%    \begin{macrocode}

%    \end{macrocode}
%\Finale
