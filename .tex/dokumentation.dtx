% \iffalse meta-comment
%<*internal>
\iffalse
%</internal>
%<*internal>
\fi
\def\nameofplainTeX{plain}
\ifx\fmtname\nameofplainTeX\else
  \expandafter\begingroup
\fi
%</internal>
%<*install>
\input docstrip.tex
\keepsilent
\askforoverwritefalse
\usedir{tex/latex/test}
\generate{
  \file{\jobname.sty}{\from{\jobname.dtx}{package}}
}
%</install>
%<install>\endbatchfile
%<*internal>
\usedir{source/latex/test}
\generate{
  \file{\jobname.ins}{\from{\jobname.dtx}{install}}
}
\nopreamble\nopostamble
\usedir{doc/latex/test}
\ifx\fmtname\nameofplainTeX
  \expandafter\endbatchfile
\else
  \expandafter\endgroup
\fi
%</internal>
% \fi
%
% \iffalse
%<*driver>
\ProvidesFile{test.dtx}
%</driver>
%<package>\NeedsTeXFormat{LaTeX2e}[1999/12/01]
%<package>\ProvidesPackage{test}
%<*package>
    [2021/03/27 v1.00 A new LaTeX package]
%</package>
%<*driver>
\documentclass{ltxdoc}
\usepackage[a4paper,margin=25mm,left=50mm,nohead]{geometry}
\usepackage[numbered]{hypdoc}
\usepackage{amsmath}
\usepackage{mdframed}

\newenvironment{liBeispiel}{
  \begin{mdframed}
}{
  \end{mdframed}
}

% dummy
\newcommand{\footcite}[2][]{}

% \|\\let\\(.*?)=\\(.*?)\|
% \liLet{$1}{$2}
\ExplSyntaxOn

\def\li@Let#1#2{
  \texttt{
    \textbackslash let
    \textbackslash#1
    =
    \textbackslash#2
  }
}

\def\liLet#1#2{
  \par
  \noindent
  \textbf{Let-Abkürzung:~}
  \li@Let{#1}{#2}
  \par
}

\prop_new:N \l_lets_prop

\def\liLets#1{
  \prop_clear:N \l_lets_prop
  \prop_put_from_keyval:Nn \l_lets_prop {#1}
  \liPseudoUeberschrift{Let-Abkürzungen}\par
  \prop_map_inline:Nn \l_lets_prop {\noindent\li@Let{##1}{##2}\par}
  \bigskip
}

\ExplSyntaxOff

\usepackage{lehramt-informatik-basis}

\liLadePakete{
  automaten,
  baum,
  cpm,
  cyk-algorithmus,
  entwurfsmuster,
  formale-sprachen,
  gantt,
  graph,
  komplexitaetstheorie,
  makros,
  master-theorem,
  mathe,
  minimierung,
  pseudo,
  synthese-algorithmus,
  typographie,
  uml,
}
\EnableCrossrefs
\CodelineIndex
\RecordChanges
\let\oldsubsection\subsection
\renewcommand\subsection{\clearpage\oldsubsection}
\begin{document}
  \DocInput{\jobname.dtx}
\end{document}
%</driver>
% \fi
%
% \GetFileInfo{\jobname.dtx}
% \DoNotIndex{\newcommand,\newenvironment,\def,\endinput}
%
%\title{\textsf{lehramt-informatik}}
%\author{Hermine Bschlangaul \thanks{E-mail: hermine.bschlangaul@gmx.net}}
%
%\maketitle
%\tableofcontents
%
%\StopEventually{^^A
%  \PrintChanges
%  \PrintIndex
%}
%
% \newpage
% \section{Implementation}
%
%    \begin{macrocode}
%    \end{macrocode}
% \subsection{aufgaben-einbinden.sty}
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[1995/12/01]
\ProvidesPackage{lehramt-informatik-aufgaben-einbinden}[2020/06/13]
%    \end{macrocode}

% \begin{macro}{\liAufgabe}
% Eine Aufgaben mit den Pfad relativ zu Wurzelverzeichnis dieses
% Repository einbinden.
%    \begin{macrocode}
\def\liAufgabe#1{
  \input{\LehramtInformatikRepository/#1.tex}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liExamensAufgabe}
% Eine Examensaufgaben mit den Pfad relativ zu Staatsexamen einbinden,
% z. B. |\liExamensAufgabe{46116/2015/09/Thema-2/Teilaufgabe-1/Aufgabe-3}|
%    \begin{macrocode}
\def\liExamensAufgabe#1{
  \input{\LehramtInformatikRepository/Staatsexamen/#1.tex}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liExamensAufgabeTTA}
%    \begin{macrocode}
\def\liExamensAufgabeTTA #1 / #2 / #3 : Thema #4 Teilaufgabe #5 Aufgabe #6 {
  \input{\LehramtInformatikRepository/Staatsexamen/#1/#2/#3/Thema-#4/Teilaufgabe-#5/Aufgabe-#6.tex}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liExamensAufgabeTA}
%    \begin{macrocode}
\def\liExamensAufgabeTA #1 / #2 / #3 : Thema #4 Aufgabe #5 {
  \input{\LehramtInformatikRepository/Staatsexamen/#1/#2/#3/Thema-#4/Aufgabe-#5.tex}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liExamensAufgabeA}
%    \begin{macrocode}
\def\liExamensAufgabeA #1 / #2 / #3 : Aufgabe #4 {
  \input{\LehramtInformatikRepository/Staatsexamen/#1/#2/#3/Aufgabe-#4.tex}
}
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}

%    \end{macrocode}
% \subsection{aufgaben-titel.sty}
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[1995/12/01]
\ProvidesPackage{lehramt-informatik-aufgaben-titel}[2020/07/07 Zum
Setzen von Aufgaben-Titel.]
%    \end{macrocode}

%    \begin{macrocode}
\ExplSyntaxOn
%    \end{macrocode}

% \begin{macro}{\liAufgabenTitel}
% Momentan eine dummy Makro das die Thematik enthält.
%    \begin{macrocode}
\def\liAufgabenTitel#1{
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liSetzeAufgabenTitel}
% Setzen des Titels über eine plist bzw über key-values. Das Makro
% sollte irgendwann einmal in |\liAufgabenTitel| umbenannt werden.
%
% Die Schlüssel-Werte-Paare sind in der Datei basis.sty definiert.
%
% \begin{verbatim}
% \liSetzeAufgabenTitel{
%   Titel = Aufgabe 2,
%   Thematik = Petri-Netz,
%   Fussnote = sosy:pu:4,
%   RelativerPfad = Staatsexamen/46116/2016/03/Thema-2/Teilaufgabe-1/Aufgabe-2.tex,
%   ExamenNummer = 46116,
%   ExamenJahr = 2016,
%   ExamenMonat = 03,
%   ExamenThemaNr = 2,
%   ExamenTeilaufgabeNr = 1,
%   ExamenAufgabeNr = 2,
% }
% \end{verbatim}
%    \begin{macrocode}
\def\liSetzeAufgabenTitel#1{

  \_setze_variablen_zurueck:

  \tl_clear:N \g_auf_examen_teilaufgabe_nr_tl

  \keys_set:nn { aufgabentitel } {
    #1
  }

  \_setze_relativen_pfad:

  \tl_if_empty:NTF \g_auf_titel_tl
  {
    \msg_fatal:nn { aufgabentitel } { kein-titel }
  }
  {
  }

  \_gib_examen_titel: {}

  \section{\_gib_aufgaben_titel:}

  \bigskip
}
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}
\ExplSyntaxOff
%    \end{macrocode}

%    \begin{macrocode}

%    \end{macrocode}
% \subsection{automaten.sty}
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[1995/12/01]
\ProvidesPackage{lehramt-informatik-automaten}[2021/02/14 Zum Setzen von Automaten]
%    \end{macrocode}

% \subsubsection{Endlicher Automat}

%    \begin{macrocode}
\liLadePakete{formale-sprachen}
%    \end{macrocode}

% \begin{verbatim}
% \begin{tikzpicture}[li automat]
% \node[state,initial,accepting] (0) {$z_0$};
% \node[state,right of=0] (1) {$z_1$};
%
% \path (0) edge[above] node{1} (1);
% \path (0) edge[loop,above] node{0} (0);
% \path (1) edge[loop,above] node{0} (1);
% \end{tikzpicture}
% \end{verbatim}

% \begin{liBeispiel}
% \begin{tikzpicture}[li automat]
% \node[state,initial,accepting] (0) {$z_0$};
% \node[state,right of=0] (1) {$z_1$};
%
% \path (0) edge[above] node{1} (1);
% \path (0) edge[loop,above] node{0} (0);
% \path (1) edge[loop,above] node{0} (1);
% \end{tikzpicture}
% \end{liBeispiel}

%    \begin{macrocode}
\RequirePackage{tikz}
\usetikzlibrary{arrows,automata,positioning}
\liLadePakete{mathe}
\directlua{
  automaten = require('lehramt-informatik-automaten')
}
%    \end{macrocode}

% \begin{macro}{\liAutomat}
% \cmd{\liAutomat}\oarg{automaten-name}\marg{zustaende=Z,alphabet=$\Sigma$,delta=$\delta$,ende=E,start=$z_0$}
%
% \begin{itemize}
% \item |\liAutomat{}|: \liAutomat{}
% \item |\liAutomat[A_1]{}|: \liAutomat[A_1]{}
% \item |\liAutomat{zustaende={z_0, z_1, z_2}}|: \liAutomat{zustaende={z_0, z_1, z_2}}
% \item |\liAutomat{alphabet={a,b}}|: \liAutomat{alphabet={a,b}}
% \item |\liAutomat{delta=d}|: \liAutomat{delta=d}
% \item |\liAutomat{ende={z_0, z_1, z_2}}|: \liAutomat{ende={z_0, z_1, z_2}}
% \item |\liAutomat{start=z_1}|: \liAutomat{start=z_1}
% \item |\liAutomat{dea}|: \liAutomat{dea}
% \item |\liAutomat{nea}|: \liAutomat{nea}
% \end{itemize}
%
%    \begin{macrocode}
\ExplSyntaxOn
\NewDocumentCommand {\liAutomat} { O{A} m } {
  \tl_set:Nn \l_zustaende_tl {Z}
  \tl_set:Nn \l_alphabet_tl {\Sigma}
  \tl_set:Nn \l_delta_tl {\delta}
  \tl_set:Nn \l_ende_tl {E}
  \tl_set:Nn \l_start_tl {z\sb{0}}
  \tl_set:Nn \l_typ_tl {}

  \keys_define:nn { automat } {
    zustaende .code:n = {\tl_set:Nn \l_zustaende_tl {\liMenge{##1}}},
    alphabet .code:n = {\tl_set:Nn \l_alphabet_tl {\liMenge{##1}}},
    delta .code:n = {\tl_set:Nn \l_delta_tl {##1}},
    ende .code:n = {\tl_set:Nn \l_ende_tl {\liMenge{##1}}},
    start .code:n = {\tl_set:Nn \l_start_tl {##1}},
    dea .value_forbidden:n = true,
    dea .code:n = {\tl_set:Nn \l_typ_tl {\sb{\text{DEA}}}},
    nea .value_forbidden:n = true,
    nea .code:n = {\tl_set:Nn \l_typ_tl {\sb{\text{NEA}}}},
  }

  \keys_set:nn { automat } { #2 }

  $#1 \l_typ_tl = (
    \l_zustaende_tl,
    \l_alphabet_tl,
    \l_delta_tl,
    \l_ende_tl,
    \l_start_tl
  )$
}
\ExplSyntaxOff
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liAutomatenKante}
% \liLet{k}{liAutomatenKante}
%    \begin{macrocode}
\def\liAutomatenKante#1#2#3#4{
  \path (#1) edge[#4] node{#3} (#2);
}
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}
\tikzset{
  li automat/.style={
    ->,
    node distance=2cm
  },
}
%    \end{macrocode}

% \newpage\subsubsection{Kellerautomat}

% \begin{verbatim}
% \begin{tikzpicture}[li kellerautomat,node distance=5cm]
% \node[state,initial] (0) {$z_0$};
% \node[state,right of=0,accepting] (1) {$z_1$};
%
% \liKellerKante[above,loop]{0}{0}{
%   1, KELLERBODEN, E KELLERBODEN;
%   0, KELLERBODEN, KELLERBODEN;
% }
%
% \liKellerKante[above]{0}{1}{
%   EPSILON, E, EPSILON;
%   1, E, EPSILON;
%   0, E, EPSILON;
% }
%
% \liKellerKante[above,loop]{1}{2}{
%   EPSILON, KELLERBODEN, EPSILON;
%   1, KELLERBODEN, KELLERBODEN;
%   0, KELLERBODEN, KELLERBODEN;
% }
% \end{tikzpicture}
% \end{verbatim}

% \begin{liBeispiel}
% \begin{tikzpicture}[li kellerautomat,node distance=5cm]
% \node[state,initial] (0) {$z_0$};
% \node[state,right of=0,accepting] (1) {$z_1$};
%
% \liKellerKante[above,loop]{0}{0}{
%   1, KELLERBODEN, E KELLERBODEN;
%   0, KELLERBODEN, KELLERBODEN;
% }
%
% \liKellerKante[above]{0}{1}{
%   EPSILON, E, EPSILON;
%   1, E, EPSILON;
%   0, E, EPSILON;
% }
%
% \liKellerKante[above,loop]{1}{2}{
%   EPSILON, KELLERBODEN, EPSILON;
%   1, KELLERBODEN, KELLERBODEN;
%   0, KELLERBODEN, KELLERBODEN;
% }
% \end{tikzpicture}
% \end{liBeispiel}

% \begin{macro}{\liKellerAutomat}
% \cmd{\liKellerAutomat}\oarg{automaten-name}
% \\\marg{zustaende=Z,alphabet=$\Sigma$,kelleralphabet=$\Gamma$,delta=$\delta$,start=$z_0$,kellerboden=\#,ende=E}
%
% \begin{verbatim}
% \liKellerAutomat{
%   zustaende={z_0, z_1, z_2},
%   alphabet={a, b, c},
%   kelleralphabet={\#, A},
%   ende={z_2},
% }
% \end{verbatim}
%
% \begin{liBeispiel}
% \liKellerAutomat{
%   zustaende={z_0, z_1, z_2},
%   alphabet={a, b, c},
%   kelleralphabet={\#, A},
%   ende={z_2},
% }
% \end{liBeispiel}
%
%    \begin{macrocode}
\ExplSyntaxOn
\NewDocumentCommand {\liKellerAutomat} { O{K} m } {
  \tl_set:Nn \l_zustaende_tl {Z}
  \tl_set:Nn \l_alphabet_tl {\Sigma}
  \tl_set:Nn \l_kelleralphabet_tl {\Gamma}
  \tl_set:Nn \l_delta_tl {\delta}
  \tl_set:Nn \l_start_tl {z\sb{0}}
  \tl_set:Nn \l_kellerboden_tl {\#}
  \tl_set:Nn \l_ende_tl {E}

  \keys_define:nn { kellerautomat } {
    zustaende .code:n = {\tl_set:Nn \l_zustaende_tl {\liMenge{##1}}},
    alphabet .code:n = {\tl_set:Nn \l_alphabet_tl {\liMenge{##1}}},
    kelleralphabet .code:n = {\tl_set:Nn \l_kelleralphabet_tl {\liMenge{##1}}},
    delta .code:n = {\tl_set:Nn \l_delta_tl {##1}},
    start .code:n = {\tl_set:Nn \l_start_tl {##1}},
    kellerboden .code:n = {\tl_set:Nn \l_kellerboden_tl {##1}},
    ende .code:n = {\tl_set:Nn \l_ende_tl {\liMenge{##1}}},
  }

  \keys_set:nn { kellerautomat } { #2 }

  $#1 = (
    \l_zustaende_tl,
    \l_alphabet_tl,
    \l_kelleralphabet_tl,
    \l_delta_tl,
    \l_start_tl,
    \l_kellerboden_tl,
    \l_ende_tl
  )$
}
\ExplSyntaxOff
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liKellerUebergang}
% \liLet{u}{liKellerUebergang}
%
% |\liKellerUebergang{a, KELLERBODEN, A; b KELLERBODEN, EPSILON}|
%
% \begin{liBeispiel}
%   \liKellerUebergang{a, KELLERBODEN, A; b, KELLERBODEN, EPSILON}
% \end{liBeispiel}
%
% Regulärer Ausdruck zum Konvertieren:
% |\((.*), (.*), (.*)\)|
% |\\u{$1 $2 $3}|
%    \begin{macrocode}
\ExplSyntaxOn
\def\liKellerUebergang#1{
  \directlua{automaten.drucke_keller_uebergaenge('#1')}
}
\ExplSyntaxOff
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liKellerKante}
% \cmd{\liKellerKante}\oarg{tikz-optionen}\marg{von}\marg{zu}\marg{übergange}
% \liLet{k}{liKellerKante}
%    \begin{macrocode}
\NewDocumentCommand{\liKellerKante} { O{above} m m m  } {
  \path (#2) edge[#1] node{\liKellerUebergang{#4}} (#3);
}
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}
\tikzset{
  li keller knoten/.style={
    text width=2cm,
    align=center,
    font=\footnotesize,
  },
  li kellerautomat/.style={
    li automat,
    every edge/.append style={
      every node/.style={
        li keller knoten
      }
    }
  }
}
%    \end{macrocode}

% \subsubsection{Turingmaschine}

%    \begin{macrocode}
\RequirePackage{amssymb}
%    \end{macrocode}

% \begin{macro}{\liTuringLeerzeichen}
% \begin{liBeispiel}
% \liTuringLeerzeichen
% \end{liBeispiel}
%    \begin{macrocode}
\def\liTuringLeerzeichen{\Box}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liTuringMaschine}
% \cmd{\liTuringMaschine}\oarg{automaten-name}
% \\\marg{zustaende=Z,alphabet=$\Sigma$,bandalphabet=$\Gamma$,delta=$\delta$,start=$z_0$,leerzeichen=\liTuringLeerzeichen,ende=E}
%
% \begin{verbatim}
% \liTuringMaschine{
%   zustaende={z_0, z_1, z_2},
%   alphabet={a, b, c},
%   bandalphabet={\liTuringLeerzeichen, A},
%   ende={z_2},
% }
% \end{verbatim}
%
% \begin{liBeispiel}
% \liTuringMaschine{
%   zustaende={z_0, z_1, z_2},
%   alphabet={a, b, c},
%   bandalphabet={\liTuringLeerzeichen, A},
%   ende={z_2},
% }
% \end{liBeispiel}
%
%    \begin{macrocode}
\ExplSyntaxOn
\NewDocumentCommand {\liTuringMaschine} { O{TM} m } {
  \tl_set:Nn \l_zustaende_tl {Z}
  \tl_set:Nn \l_alphabet_tl {\Sigma}
  \tl_set:Nn \l_bandalphabet_tl {\Gamma}
  \tl_set:Nn \l_delta_tl {\delta}
  \tl_set:Nn \l_start_tl {z\sb{0}}
  \tl_set:Nn \l_leerzeichen_tl {\liTuringLeerzeichen}
  \tl_set:Nn \l_ende_tl {E}

  \keys_define:nn { kellerautomat } {
    zustaende .code:n = {\tl_set:Nn \l_zustaende_tl {\liMenge{##1}}},
    alphabet .code:n = {\tl_set:Nn \l_alphabet_tl {\liMenge{##1}}},
    bandalphabet .code:n = {\tl_set:Nn \l_bandalphabet_tl {\liMenge{##1}}},
    delta .code:n = {\tl_set:Nn \l_delta_tl {##1}},
    start .code:n = {\tl_set:Nn \l_start_tl {##1}},
    leerzeichen .code:n = {\tl_set:Nn \l_leerzeichen_tl {##1}},
    ende .code:n = {\tl_set:Nn \l_ende_tl {\liMenge{##1}}},
  }

  \keys_set:nn { kellerautomat } { #2 }

  $\text{#1} = (
    \l_zustaende_tl,
    \l_alphabet_tl,
    \l_bandalphabet_tl,
    \l_delta_tl,
    \l_start_tl,
    \l_leerzeichen_tl,
    \l_ende_tl
  )$
}
\ExplSyntaxOff
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liTuringUebergangZelle}
% Formatiert einen Zustandsübergang für eine Übergangstabelle.
% \liLet{t}{liTuringUebergangZelle}
% |\liTuringUebergangZelle{z_1, LEER, R}|: \liTuringUebergangZelle{z_1, LEER, R}
% |\liTuringUebergangZelle{z1, leer, l}|: \liTuringUebergangZelle{z_1, LEER, l}
%    \begin{macrocode}
\ExplSyntaxOn
\def\liTuringUebergangZelle#1{
  \directlua{tex.print(automaten.gib_einen_turing_uebergang('#1'))}
}
\ExplSyntaxOff
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liTuringUebergaenge}
% Nur in den TikZ-Grafiken zu verwenden. Setzt Zeilenumbrüche ans Ende.
% Nicht für die Tabelle geeignet.
% \liLet{t}{liTuringUebergaenge}
% \noindent
% \liTuringUebergaenge{z_1, LEER, l; LEER, LEER, r}
%    \begin{macrocode}
\ExplSyntaxOn
\def\liTuringUebergaenge#1{
  \directlua{automaten.drucke_turing_uebergaenge('#1')}
}
\ExplSyntaxOff
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liTuringKante}
% \cmd{\liTuringKante}\oarg{tikz-optionen}\marg{zustand-oder-lese}\marg{schreibe}\marg{richtung}
% \liLet{t}{liTuringKante}
%    \begin{macrocode}
\NewDocumentCommand{\liTuringKante} { O{above} m m m  } {
  \path (#2) edge[#1] node{\liTuringUebergaenge{#4}} (#3);
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liTuringUeberfuehrung}
%    \begin{macrocode}
\def\liTuringUeberfuehrung{
  $\delta : Z \times \Gamma \rightarrow Z \times \Gamma \times \{ L, R, N \}$
}
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}
\tikzset{
  li turingmaschine/.style={
    li automat,
    every edge/.append style={
      every node/.style={
        li keller knoten
      }
    }
  }
}
%    \end{macrocode}

%    \begin{macrocode}

%    \end{macrocode}
% \subsection{basis.sty}
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[1995/12/01]
\ProvidesPackage{lehramt-informatik-basis}[2020/11/27]
%    \end{macrocode}

%    \begin{macrocode}
\RequirePackage{xparse}
%    \end{macrocode}

%    \begin{macrocode}
\ExplSyntaxOn
%    \end{macrocode}

% \begin{macro}{\liLadePakete}
%    \begin{macrocode}
\NewDocumentCommand{\liLadePakete}{ m }
{
  \clist_map_inline:nn { #1 } { \RequirePackage{lehramt-informatik-##1} }
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liLadeAllePakete}
%    \begin{macrocode}
\def\liLadeAllePakete{
  \liLadePakete{
    aufgaben-einbinden,
    automaten,
    baum,
    checkbox,
    chomsky-normalform,
    cpm,
    cyk-algorithmus,
    entwurfsmuster,
    er,
    formale-sprachen,
    gantt,
    grafik,
    graph,
    hanoi,
    kontrollflussgraph,
    makros,
    master-theorem,
    mathe,
    minimierung,
    normalformen,
    petri,
    potenzmengen-konstruktion,
    pseudo,
    quicksort,
    relationale-algebra,
    rmodell,
    sortieren,
    spalten,
    struktogramm,
    syntax,
    syntaxbaum,
    synthese-algorithmus,
    tabelle,
    typographie,
    uml,
    vollstaendige-induktion,
    wasserfall,
    wpkalkuel,
  }
}
%    \end{macrocode}
% \end{macro}

% Definition einer Komma-getrennten-Liste mit deren Hilfe die
% vielen globalen Token-List-Variablen definiert werden können.
%    \begin{macrocode}
\clist_new:N \g_auf_schluessel_clist
\clist_set:Nn \g_auf_schluessel_clist {
  titel,
  thematik,
  fussnote,
  fussnote_seite,
  relativer_pfad,
  examen_nummer,
  examen_jahr,
  examen_monat,
  examen_thema_nr,
  examen_teilaufgabe_nr,
  examen_aufgabe_nr,
}
%    \end{macrocode}

% Initialisierung der globalen Token-List-Variablen |\g_auf_***_tl|.
% |auf| steht für Aufgabe.
%    \begin{macrocode}
\clist_map_inline:Nn \g_auf_schluessel_clist {
  \tl_new:c {g_auf_#1_tl}
}
%    \end{macrocode}

% Funktion über alle globalen Token-List-Variablen zurückzusetzten.
%    \begin{macrocode}
\cs_new:Npn \_setze_variablen_zurueck: {
  \clist_map_inline:Nn \g_auf_schluessel_clist {
    \tl_clear:c {g_auf_##1_tl}
  }
}
%    \end{macrocode}

%    \begin{macrocode}
\keys_define:nn { aufgabentitel }
{
  Titel .tl_gset:N = \g_auf_titel_tl,
  Thematik .tl_gset:N = \g_auf_thematik_tl,
  Fussnote .tl_gset:N = \g_auf_fussnote_tl,
  FussnoteSeite .tl_gset:N = \g_auf_fussnote_seite_tl,
  RelativerPfad .tl_gset:N = \g_auf_relativer_pfad_tl,
  ExamenNummer .tl_gset:N = \g_auf_examen_nummer_tl,
  ExamenJahr .tl_gset:N = \g_auf_examen_jahr_tl,
  ExamenMonat .tl_gset:N = \g_auf_examen_monat_tl,
  ExamenThemaNr .tl_gset:N = \g_auf_examen_thema_nr_tl,
  ExamenTeilaufgabeNr .tl_gset:N = \g_auf_examen_teilaufgabe_nr_tl,
  ExamenAufgabeNr .tl_gset:N = \g_auf_examen_aufgabe_nr_tl,
}
%    \end{macrocode}

%    \begin{macrocode}
\cs_gset:Npn \_setze_relativen_pfad: {
  \tl_if_empty:NTF \g_auf_relativer_pfad_tl
  {
    \bool_if:nTF
    {
      ! \tl_if_empty_p:N \g_auf_examen_nummer_tl &&
      ! \tl_if_empty_p:N \g_auf_examen_jahr_tl &&
      ! \tl_if_empty_p:N \g_auf_examen_monat_tl
    }
    {
      \tl_gset:Nn \g_auf_relativer_pfad_tl {
        Staatsexamen /
        \g_auf_examen_nummer_tl /
        \g_auf_examen_jahr_tl /
        \g_auf_examen_monat_tl /
        \tl_if_empty:NTF \g_auf_examen_thema_nr_tl {} { Thema - \g_auf_examen_thema_nr_tl / }
        \tl_if_empty:NTF \g_auf_examen_teilaufgabe_nr_tl {} { Teilaufgabe - \g_auf_examen_teilaufgabe_nr_tl / }
        \tl_if_empty:NTF \g_auf_examen_aufgabe_nr_tl {} { Aufgabe - \g_auf_examen_aufgabe_nr_tl .tex }
      }
    }
    {}
  }
  {}
}
%    \end{macrocode}

%    \begin{macrocode}
\cs_gset:Npn \_gib_examen_titel: {
  \cs_set:Nn \_trenner: { \, / \, }
  \bool_if:nTF
  {
    ! \tl_if_empty_p:N \g_auf_examen_nummer_tl &&
    ! \tl_if_empty_p:N \g_auf_examen_jahr_tl &&
    ! \tl_if_empty_p:N \g_auf_examen_monat_tl &&
    ! \tl_if_empty_p:N \g_auf_examen_aufgabe_nr_tl
  }
  {
    {
      \footnotesize
      \par
      \noindent
      Staatsexamen ~
      \g_auf_examen_nummer_tl \_trenner:
      \g_auf_examen_jahr_tl \_trenner:

      \tl_case:Nn \g_auf_examen_monat_tl
      {
        { 03 } { Frühjahr }
        { 09 } { Herbst }
      } \_trenner:

      \tl_if_empty:NTF \g_auf_examen_thema_nr_tl {} {
        Thema ~ Nr. ~ \g_auf_examen_thema_nr_tl \_trenner:
      }
      \tl_if_empty:NTF \g_auf_examen_teilaufgabe_nr_tl {} {
        Teilaufgabe ~ Nr. ~ \g_auf_examen_teilaufgabe_nr_tl \_trenner:
      }
      \tl_if_empty:NTF \g_auf_examen_aufgabe_nr_tl {} {
        Aufgabe ~ Nr. ~ \g_auf_examen_aufgabe_nr_tl
      }
      \par
      \bigskip
    }
  }
}
%    \end{macrocode}

%    \begin{macrocode}
\cs_new:Npn \_gib_github_url: {
  \tl_if_empty:NTF \g_auf_relativer_pfad_tl {} {
    Github :~\href{
      \LehramtInformatikGithubRawDomain /
      \LehramtInformatikGithubTexRepo /
      \LehramtInformatikGitBranch /
      \g_auf_relativer_pfad_tl
    }{
      \g_auf_relativer_pfad_tl
    }
  }
}
%    \end{macrocode}

%    \begin{macrocode}
\cs_new:Npn \_gib_aufgaben_titel: {
  \g_auf_titel_tl

  \tl_if_empty:NTF \g_auf_thematik_tl
  {}
  {
   \, ~ [
    \g_auf_thematik_tl
   ]
  }
}
%    \end{macrocode}

%    \begin{macrocode}
\msg_new:nnn { aufgabentitel } { kein-titel }
  { Der~Schlüssel~ist~zwingend~notwendig }
%    \end{macrocode}

%    \begin{macrocode}
\ExplSyntaxOff
%    \end{macrocode}

% |\def\LehramtInformatikRepository{/pfad/zum/repository}|
%    \begin{macrocode}
\input /etc/lehramt-informatik.config.tex
%    \end{macrocode}

% biblatex not working with lualatex and babel
%    \begin{macrocode}
% \RequirePackage{polyglossia}
% \setmainlanguage{german}
%    \end{macrocode}

%    \begin{macrocode}

%    \end{macrocode}
% \subsection{baum.sty}
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[1995/12/01]
\ProvidesPackage{lehramt-informatik-bbaum}[2020/06/13 Zum Setzen von
Binär- und AVL-Bäumen. Hüll-Paket um TikZ and tikz-qtree.]
%    \end{macrocode}

%    \begin{macrocode}
\RequirePackage{tikz}
%    \end{macrocode}

% für |li binaer baum|
%    \begin{macrocode}
\RequirePackage{tikz-qtree}
%    \end{macrocode}

% Für b baum
%    \begin{macrocode}
\usetikzlibrary{shapes.multipart}
%    \end{macrocode}

% \newpage\subsubsection{Binärbaum}

% TikZ-Stil: |li binaer baum|: Knoten als Kreise, Kanten als Pfeile.

% \begin{verbatim}
% \begin{tikzpicture}[li binaer baum]
% \Tree
% [.7
%   [.2
%     [.1 ]
%     [.5 ]
%   ]
%   \edge[blank]; \node[blank]{};
% ]
% \end{tikzpicture}
% \end{verbatim}

% \begin{liBeispiel}
% \begin{tikzpicture}[li binaer baum]
% \Tree
% [.7
%   [.2
%     [.1 ]
%     [.5 ]
%   ]
%   \edge[blank]; \node[blank]{};
% ]
% \end{tikzpicture}
% \end{liBeispiel}

% \index{tikz: li binaer baum}
%    \begin{macrocode}
\tikzset{
  li binaer baum/.style={
    shorten <=2pt,
    shorten >=2pt,
    ->,
    every tree node/.style={
      minimum width=2em,
      draw,
      rectangle
    },
    blank/.style={
      draw=none
    },
    edge from parent/.style={
      draw,
      edge from parent path={(\tikzparentnode) -- (\tikzchildnode)}
    },
    level distance=1cm,
    every label/.style={
      gray,
      font=\footnotesize,
      label position=0,
      label distance=0cm,
    }
  },
}
%    \end{macrocode}

% \newpage\subsubsection{AVL-Baum}

% \begin{verbatim}
% \begin{tikzpicture}[li binaer baum]
% \Tree
% [.\node[label=-1]{5};
%   [.\node[label=-1]{2};
%     [.\node[label=0]{1}; ]
%     \edge[blank]; \node[blank]{};
%   ]
%   [.\node[label=0]{7}; ]
% ]
% \end{tikzpicture}
% \end{verbatim}

% \begin{liBeispiel}
% \begin{tikzpicture}[li binaer baum]
% \Tree
% [.\node[label=-1]{5};
%   [.\node[label=-1]{2};
%     [.\node[label=0]{1}; ]
%     \edge[blank]; \node[blank]{};
%   ]
%   [.\node[label=0]{7}; ]
% ]
% \end{tikzpicture}
% \end{liBeispiel}

% \newpage\subsubsection{B-Baum}

% \begin{verbatim}
% \begin{tikzpicture}[
%   scale=0.8,
%   transform shape,
%   li bbaum,
%   level 1/.style={level distance=10mm,sibling distance=32mm},
%   level 2/.style={level distance=10mm,sibling distance=20mm},
% ]
% \node {10 \nodepart{two} 33}
%   child {node {8}
%     child {node {5}}
%     child {node {9}}
%   }
%   child {node {20}
%     child {node {15}}
%     child {node {31}}
%   }
%   child {node {50}
%     child {node {45}}
%     child {node {60 \nodepart{two} 80}}
%   }
% ;
% \end{tikzpicture}
% \end{verbatim}

% \begin{liBeispiel}
% \begin{tikzpicture}[
%   scale=0.8,
%   transform shape,
%   li bbaum,
%   level 1/.style={level distance=10mm,sibling distance=32mm},
%   level 2/.style={level distance=10mm,sibling distance=20mm},
% ]
% \node {10 \nodepart{two} 33}
%   child {node {8}
%     child {node {5}}
%     child {node {9}}
%   }
%   child {node {20}
%     child {node {15}}
%     child {node {31}}
%   }
%   child {node {50}
%     child {node {45}}
%     child {node {60 \nodepart{two} 80}}
%   }
% ;
% \end{tikzpicture}
% \end{liBeispiel}

% \index{tikz: bbaum}
%    \begin{macrocode}
\tikzset{
  li bbaum knoten/.style={
    rectangle split parts=10,
    rectangle split,
    rectangle split horizontal,
    rectangle split ignore empty parts,
    draw,
    fill=white
  },
  li bbaum/.style={
    every node/.style={
      li bbaum knoten
    },
    level 1/.style={
      level distance=12mm,
      sibling distance=25mm,
    },
    every child/.style={
      shorten <= 2pt,
      shorten >= 6pt,
      ->,
    },
    level 2/.style={
      level distance=9mm,
      sibling distance=15mm,
    },
  }
}
%    \end{macrocode}

%    \begin{macrocode}

%    \end{macrocode}
% \subsection{checkbox.sty}
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[1995/12/01]
\ProvidesPackage{lehramt-informatik-checkbox}[2020/12/14 Zum Setzen von
Multiple-Choice-Fragen. Simulation von Kästchen zum ankreuzen]
\RequirePackage{amssymb}
%    \end{macrocode}

% \begin{macro}{\liRichtig}
% Angekreuztes Kästchen (nur innerhalb der |itemize|-Umgebung zu verwenden.
%    \begin{macrocode}
\def\liRichtig{\item[$\boxtimes$]}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liFalsch}
% Nicht angekreuztes Kästchen (nur innerhalb der |itemize|-Umgebung zu verwenden.
%    \begin{macrocode}
\def\liFalsch{\item[$\square$]}
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}

%    \end{macrocode}
% \subsection{chomsky-normalform.sty}
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[1995/12/01]
\ProvidesPackage{lehramt-informatik-chomsky-normalform}[2021/03/26
Hilfsmakros zum Setzen des Algorithmus zum Erreichen der Chomsky-Normalform]

\ExplSyntaxOn

\liLadePakete{typographie}
%    \end{macrocode}

% \begin{macro}{\liChomskyUeberschrift}
% \liLet{schritt}{liChomskyUeberschrift}
%    \begin{macrocode}
\def\liChomskyUeberschrift#1{
  {
    \bfseries
    \sffamily
    \str_case:nn {#1} {
      {1} {Elimination~der~$\varepsilon$-Regeln}
      {2} {Elimination~von~Kettenregeln}
      {3} {Separation~von~Terminalzeichen}
      {4} {Elimination~von~mehrelementigen~Nonterminalketten}
    }
  }
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liChomskyErklaerung}
% \liLet{erklaerung}{liChomskyErklaerung}
%  Hoffmann Seite 180
%    \begin{macrocode}
\def\li@chomsky@erklaerung@texte#1{
  \str_case:nn {#1} {
    %
    {1} {
      Alle~Regeln~der~Form~$A~\rightarrow~\varepsilon$~werden~eliminiert.~
      Die~Ersetzung~von~$A$~wird~durch~$\varepsilon$~in~allen~anderen~
      Regeln~vorweggenommen.
    }
    {2} {
      Jede~Produktion~der~Form~$A~\rightarrow~B$~mit~$A,~B~\in~S$~wird~
      als~Kettenregel~bezeichnet.~Diese~tragen~nicht~zur~Produktion~
      von~Terminalzeichen~bei~und~lassen~sich~ebenfalls~eliminieren.
    }
    {3} {
      Jedes~Terminalzeichen~$\sigma$,~das~in~Kombination~mit~anderen~
      Symbolen~auftaucht,~wird~durch~ein~neues~Nonterminal~
      $S\sb{\sigma}$~ersetzt~und~die~Menge~der~Produktionen~durch~die~
      Regel~$S\sb{\sigma}~\rightarrow~\sigma$~ergänzt.
    }
    {4} {
      Alle~Produktionen~der~Form~
      $A\rightarrow~B\sb{1}~B\sb{2}~\dots~B\sb{n}$~
      werden~in~die~Produktionen~
      $A~\rightarrow~
      A\sb{n-1}~B\sb{n},~A\sb{n-1}~\rightarrow~
      A\sb{n-2}~B\sb{n-1},~\dots,~
      A\sb{2}~\rightarrow~B\sb{1}~B\sb{2}$~zerteilt.~
      Nach~der~Ersetzung~sind~alle~längeren~Nonterminalketten~
      vollständig~heruntergebrochen~und~die~Chomsky-Normalform~erreicht.
    }
  }
}
\def\liChomskyErklaerung#1{
  {
    \itshape
    \footnotesize
    \liParagraphMitLinien{\li@chomsky@erklaerung@texte{#1}}
  }
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liChomskyUeberErklaerung}
% \liLet{schrittE}{liChomskyUeberErklaerung}
%    \begin{macrocode}
\def\liChomskyUeberErklaerung#1{
  \liChomskyUeberschrift{#1}\par
  \liChomskyErklaerung{#1}
}
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}
\ExplSyntaxOff

%    \end{macrocode}
% \subsection{cpm.sty}
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[1995/12/01]
\ProvidesPackage{lehramt-informatik-cpm}[2020/09/03]
\RequirePackage{tikz}
%    \end{macrocode}

%    \begin{macrocode}
\liLadePakete{mathe}
%    \end{macrocode}

% \liLets{
%   f = footnotesize,
%   FZ = liCpmFruehesterI,
%   SZ = liCpmSpaetesterI,
%   v = liCpmVon,
%   vz = liCpmVonZu,
%   z = liCpmZu,
% }

% \begin{tikzpicture}[scale=0.8,transform shape]
% \liCpmEreignis{1}{0}{2}
% \liCpmEreignis{2}{1}{4}
% \liCpmEreignis{3}{1}{0}
% \liCpmEreignis{4}{3}{4}
% \liCpmEreignis{5}{3}{2}
% \liCpmEreignis{6}{3}{0}
% \liCpmEreignis{7}{5}{4}
% \liCpmEreignis{8}{5}{2}
% \liCpmEreignis{9}{5}{0}
% \liCpmEreignis{10}{7}{2}

% \liCpmVorgang{1}{2}{10}
% \liCpmVorgang{1}{3}{22}
% \liCpmVorgang{1}{5}{6}
% \liCpmVorgang{1}{6}{5}
% \liCpmVorgang{3}{6}{8}
% \liCpmVorgang{2}{5}{5}
% \liCpmVorgang{2}{4}{8}
% \liCpmVorgang{4}{7}{12}
% \liCpmVorgang{7}{8}{3}
% \liCpmVorgang{7}{10}{6}
% \liCpmVorgang{9}{10}{9}
% \liCpmVorgang{6}{9}{11}
% \liCpmVorgang{8}{10}{7}
% \liCpmVorgang{4}{5}{1}

% \liCpmVorgang[schein]{5}{6}{}
% \liCpmVorgang[schein]{5}{8}{}
% \end{tikzpicture}

% \begin{macro}{\liCpmEreignis}
% |liCpmEreignis\{(.*)\}\((.*),(.*)\)| -> |liCpmEreignis{$1}{$2}{$3}|
%    \begin{macrocode}
\ExplSyntaxOn
\NewDocumentCommand { \liCpmEreignis } { O{} m m m  } {
  \tl_set:Nn \l_name_tl {}

  \keys_define:nn { cpmEreignis } {
    name .code:n = {\tl_set:Nn \l_name_tl {##1}},
  }

  \keys_set:nn { cpmEreignis } { #1 }

  \tl_if_empty:NT \l_name_tl {
    \tl_set:Nn \l_name_tl {#2}
  }

  \node[circle,draw] (\l_name_tl) at (#3,#4) {#2};
}
\ExplSyntaxOff
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liCpmVorgang}
% |liCpmVORGANG\((.*)>(.*)\)\{(.*)\}|
%    \begin{macrocode}
\ExplSyntaxOn
\NewDocumentCommand { \liCpmVorgang } { O{} m m m  } {
  \tl_set:Nn \l_schein_tl {}
  \tl_set:Nn \l_kritisch_tl {}

  \keys_define:nn { cpmVorgang } {
    schein .code:n = {\tl_set:Nn \l_schein_tl {dashed}},
    kritisch .code:n = {\tl_set:Nn \l_kritisch_tl {thick}},
  }

  \keys_set:nn { cpmVorgang } { #1 }

  \path[->,\l_schein_tl,\l_kritisch_tl] (#2) edge node[auto,sloped] {#4} (#3);
}
\ExplSyntaxOff
%    \end{macrocode}
% \end{macro}

% \subsubsection{Hilfsmakros für Zeitpunkt-Tabelle}

% \begin{verbatim}
% \begin{tabular}{|l||l|l|l|l|l|l|l|l|}
% \hline
% $i$ & 1 & 2 & 3  & 4 & 5  & 6  & 7  & 8  \\\hline\hline
% \FZ & 0 & 5 & 18 & 7 & 19 & 26 & 22 & 30 \\\hline
% \SZ & 0 & 5 & 18 & 9 & 19 & 26 & 24 & 30 \\\hline
% GP  & 0 & 0 & 0  & 2 & 0  & 0  & 2  & 0  \\\hline
% \end{tabular}
% \end{verbatim}

% \begin{macro}{\liCpmVonZu}
% \liLet{vz}{liCpmVonZu}
% |\liCpmVonZu{1}(2-3)|: \liCpmVonZu{1}(2-3)
%    \begin{macrocode}
\def\liCpmVonZuOhneMathe#1(#2-#3){#1_{\scriptscriptstyle(#2\rightarrow#3)}}
\def\liCpmVonZu#1(#2-#3){%
  \ifmmode%
    \liCpmVonZuOhneMathe{#1}(#2-#3)%
  \else%
    $\liCpmVonZuOhneMathe{#1}(#2-#3)$%
  \fi%
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liCpmVon}
% \liLet{v}{liCpmVon}
% |\liCpmVon{1}(2)|: \liCpmVon{1}(2)
%    \begin{macrocode}
\def\liCpmVonOhneMathe#1(#2){#1_{\scriptscriptstyle(\rightarrow#2)}}
\def\liCpmVon#1(#2){%
  \ifmmode%
    \liCpmVonOhneMathe{#1}(#2)%
  \else%
    $\liCpmVonOhneMathe{#1}(#2)$%
  \fi%
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liCpmZu}
% \liLet{z}{liCpmZu}
% |\liCpmZu{1}(2)|: \liCpmZu{1}(2)
%    \begin{macrocode}
\def\liCpmZuOhneMathe#1(#2){#1_{\scriptscriptstyle(\leftarrow#2)}}
\def\liCpmZu#1(#2){%
  \ifmmode%
    \liCpmZuOhneMathe{#1}(#2)%
  \else%
    $\liCpmZuOhneMathe{#1}(#2)$%
  \fi%
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liCpmSpaetesterI}
% Spätester Zeitpunkt, zu dem Ereignis $i$ eintreten kann
% \liLet{SZ}{liCpmSpaetesterI}
%    \begin{macrocode}
\def\liCpmSpaetesterI{$SZ_i$}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liCpmFruehesterI}
% Frühester Zeitpunkt, zu dem Ereignis $i$ eintreten kann.
% \liLet{FZ}{liCpmFruehesterI}
%    \begin{macrocode}
\def\liCpmFruehesterI{$FZ_i$}
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}

%    \end{macrocode}
% \subsection{cyk-algorithmus.sty}
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[1995/12/01]
\ProvidesPackage{lehramt-informatik-cyk-algorithmus}[2021/06/18 Hilfsmakros
zum Setzen des CYK-Algorithmus]
%    \end{macrocode}

% \begin{verbatim}
% \begin{tabular}{|c|c|c|c|c|c|}
% a     & c     & b     & c     & a     & b \\\hline\hline
%
% $R_a$ & $R_c$ & $R_b$ & $R_c$ & $R_a$ & $R_b$ \l6
% B     & A     & A     & B     & C \l5
% S     & -     & S     & S \l4
% -     & -     & - \l3
% -     & - \l2
% S \l1
% \end{tabular}
% \end{verbatim}

% \begin{macro}{\liKurzeTabellenLinie}
% \liLet{l}{liKurzeTabellenLinie}
%    \begin{macrocode}
\def\liKurzeTabellenLinie#1{\\\cline{1-#1}}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liWortInSprache}
% \liWortInSprache{abc}[L(Y)]
%    \begin{macrocode}
\NewDocumentCommand{ \liWortInSprache } { m O{L(G)} } {
  \bigskip
  \noindent
  $\Rightarrow #1 \in #2$
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liWortNichtInSprache}
% \liWortNichtInSprache{abc}
%    \begin{macrocode}
\NewDocumentCommand{ \liWortNichtInSprache } { m O{L(G)} } {
  \bigskip
  \noindent
  $\Rightarrow #1 \notin #2$
}
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}

%    \end{macrocode}
% \subsection{entwurfsmuster.sty}
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[1995/12/01]
\ProvidesPackage{lehramt-informatik-entwurfsmuster}[2021/05/06 Hilfsmakros
zum Setzen von Entwurfsmuster/Design Patterns]

\RequirePackage{lehramt-informatik-uml}
%    \end{macrocode}

% \subsubsection{Abstrakte Fabrik}

% \begin{macro}{\liEntwurfsAbstrakteFabrikUml}
% \begin{liBeispiel}
% \liEntwurfsAbstrakteFabrikUml
% \end{liBeispiel}
%    \begin{macrocode}
\def\liEntwurfsAbstrakteFabrikUml{
  \begin{tikzpicture}
    \umlclass[type=abstract]{AbstrakteFabrik}{}{
      erzeugeProduktA()\\
      erzeugeProduktB()\\
    }
    \umlclass[below left=1cm and -1.5cm of AbstrakteFabrik]{Fabrik1}{}{
      erzeugeProduktA()\\
      erzeugeProduktB()\\
    }
    \umlclass[below right=1cm and -1.5cm of AbstrakteFabrik]{Fabrik2}{}{
      erzeugeProduktA()\\
      erzeugeProduktB()\\
    }
    \umlVHVinherit{Fabrik1}{AbstrakteFabrik}
    \umlVHVinherit{Fabrik2}{AbstrakteFabrik}

    \umlsimpleclass[right=3cm of AbstrakteFabrik,type=abstract]{AbstraktesProduktA}
    \umlsimpleclass[below left=1cm and -1cm of AbstraktesProduktA]{ProduktA1}
    \umlsimpleclass[below right=1cm and -1cm of AbstraktesProduktA]{ProduktA2}
    \umlVHVinherit{ProduktA1}{AbstraktesProduktA}
    \umlVHVinherit{ProduktA2}{AbstraktesProduktA}

    \umlsimpleclass[above right=0cm and 1cm of AbstraktesProduktA]{Klient}

    \umlsimpleclass[below=4.5cm of AbstraktesProduktA,type=abstract]{AbstraktesProduktB}
    \umlsimpleclass[below left=1cm and -1cm of AbstraktesProduktB]{ProduktB1}
    \umlsimpleclass[below right=1cm and -1cm of AbstraktesProduktB]{ProduktB2}
    \umlVHVinherit{ProduktB1}{AbstraktesProduktB}
    \umlVHVinherit{ProduktB2}{AbstraktesProduktB}

    \umlVHVdep[arm1=-1.3cm,arm2=-1cm]{Fabrik1}{ProduktA1}
    \umlVHVdep[arm2=-1cm]{Fabrik1}{ProduktB1}

    \umlVHVdep[arm1=-1.8cm,arm2=-1.5cm]{Fabrik2}{ProduktA2}
    \umlVHVdep[arm2=-1.5cm]{Fabrik2}{ProduktB2}

    \umluniassoc[anchor2=25]{Klient}{AbstrakteFabrik}
    \umlVHuniassoc[arm1=-1cm]{Klient}{AbstraktesProduktA}
    \umlVHuniassoc{Klient}{AbstraktesProduktB}
  \end{tikzpicture}
}
%    \end{macrocode}
% \end{macro}

% \subsubsection{Adapter}

% \begin{macro}{\liEntwurfsAdapterUml}
% \begin{liBeispiel}
% \liEntwurfsAdapterUml
% \end{liBeispiel}
%    \begin{macrocode}
\def\liEntwurfsAdapterUml{
  \begin{tikzpicture}
    \umlsimpleclass[x=1,y=3]{Klient}{}{}
    \umlclass[x=4,y=3,type=interface]{Ziel}{}{agiere()}
    \umlclass[x=4,y=0]{Adapter}{}{agiere()}
    \umlclass[x=8,y=1.5]{Dienst}{}{agiereSpeziell()}

    \umlreal{Adapter}{Ziel}
    \umluniassoc{Klient}{Ziel}
    \umlinherit{Adapter}{Dienst}

    \umlnote[x=7,y=-1,width=2cm]{Adapter}{agiereSpeziell()}
  \end{tikzpicture}
  \footcite[so ähnlich wie GoF]{wiki:adapter}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liEntwurfsAdapterAkteure}
% \begin{liBeispiel}
% \liEntwurfsAdapterAkteure
% \end{liBeispiel}
%    \begin{macrocode}
\def\liEntwurfsAdapterAkteure{
  \begin{description}

    \item[Ziel (Target)]

    Das Ziel definiert die Schnittstelle, die der Klient nutzen kann.

    \item[Klient (Client)]

    Der Klient nutzt Dienste über inkompatible Schnittstellen und greift
    dabei auf adaptierte Schnittstellen zurück.

    \item[Dienst (Adaptee)]

    Der Dienst bietet wiederzuverwendende Dienstleistungen mit fest
    definierter Schnittstelle an.

    \item[Adapter]

    Der Adapter adaptiert die Schnittstelle des Dienstes auf die
    Schnittstelle zum Klienten.\footcite{wiki:adapter}

  \end{description}
}
%    \end{macrocode}
% \end{macro}

% \subsubsection{Beobachter}

% \begin{macro}{\liEntwurfsBeobachterUml}
% \begin{liBeispiel}
% \liEntwurfsBeobachterUml
% \end{liBeispiel}
%    \begin{macrocode}
\def\liEntwurfsBeobachterUml{
  \begin{tikzpicture}
    \umlclass[x=0,y=0,type=abstract]{Gegenstand}{}{
      + registriere(beobachter: Beobachter): void\\
      + entferne(beobachter: Beobachter): void\\
      + benachrichtige(beobachter: Beobachter): void\\
    }
    \umlclass[x=0,y=-3]{KonkreterGegenstand}{}{
      + setzteZustand(zustand: Zustand): void
    }
    \umlinherit{KonkreterGegenstand}{Gegenstand}

    \umlclass[x=8,y=0,type=interface]{Beobachter}{}{
      + aktualisiere(zustand: Zustand): void
    }
    \umlclass[x=8,y=-3]{KonkreterBeobachter}{}{
      + aktualisiere(zustand: Zustand): void
    }
    \umlreal{KonkreterBeobachter}{Beobachter}

    \umlHVHaggreg[arg1=beobachter,pos1=0.8,mult2=*,pos2=2.5]
    {KonkreterGegenstand}{Beobachter}
  \end{tikzpicture}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liEntwurfsBeobachterAkteure}
% \begin{liBeispiel}
% \liEntwurfsBeobachterAkteure
% \end{liBeispiel}
%    \begin{macrocode}
\def\liEntwurfsBeobachterAkteure{
  \begin{description}
    \item[Gegenstand / Subjekt (Subject / Observable)]

    Ein Subjekt (beobachtbares Objekt, auf Englisch publisher, also
    „Veröffentlicher“, genannt) hat eine Liste von Beobachtern, ohne
    deren konkrete Typen zu kennen. Es bietet eine Schnittstelle zur An-
    und Abmeldung von Beobachtern und eine Schnittstelle zur
    Benachrichtigung von Beobachtern über Änderungen an.\footcite[Seite
    251]{gof}

    \item[Beobachter (Observer)]

    Die Beobachter (auf Englisch auch subscriber, also „Abonnent“,
    genannt) definieren eine Aktualisierungsschnittstelle.

    \item[konkreter/s Gegenstand / Subjekt (ConcreteSubject / ConcreteObservable)]

    Ein konkretes Subjekt (konkretes, beobachtbares Objekt) speichert
    den relevanten Zustand und benachrichtigt alle Beobachter bei
    Zustandsänderungen über deren Aktualisierungsschnittstelle. Es
    verfügt über eine Schnittstelle zur Erfragung des aktuellen
    Zustands.

    \item[Konkrete Beobachter (ConcreteObserver)]

    Konkrete Beobachter verwalten die Referenz auf ein konkretes
    Subjekt, dessen Zustand sie beobachten und speichern und dessen
    Zustand konsistent ist. Sie implementieren eine
    Aktualisierungsschnittstelle unter Verwendung der
    Abfrageschnittstelle des konkreten Subjekts.
    \footcite{wiki:beobachter}
  \end{description}
}
%    \end{macrocode}
% \end{macro}

% \subsubsection{Dekorierer}

% \begin{macro}{\liEntwurfsDekoriererUml}
% \begin{liBeispiel}
% \liEntwurfsDekoriererUml
% \end{liBeispiel}
%    \begin{macrocode}
\def\liEntwurfsDekoriererUml{
  \begin{tikzpicture}
    \umlclass[type=abstract]{Komponente}{}{agiere()}
    \umlclass[below left=1.5cm and 0cm of Komponente]{KonkreteKomponente}{}{agiere()}
    \umlclass[below right=1.5cm and 0cm of Komponente,type=abstract]{Dekorierer}{}{agiere()}

    \umlVHVreal{KonkreteKomponente}{Komponente}
    \umlVHVreal{Dekorierer}{Komponente}

    \umlclass[below left=1.5cm and 0cm of Dekorierer]{KonkreterDekoriererA}{}{agiere()}
    \umlclass[below right=1.5cm and 0cm of Dekorierer]{KonkreterDekoriererB}{}{agiere()}

    \umlVHVinherit{KonkreterDekoriererA}{Dekorierer}
    \umlVHVinherit{KonkreterDekoriererB}{Dekorierer}

    \umlHVHaggreg[arm1=2cm]{Dekorierer}{Komponente}
    \footcite{wiki:dekorierer}
  \end{tikzpicture}
}
%    \end{macrocode}
% \end{macro}

% \subsubsection{Einzelstück}

% \begin{macro}{\liEntwurfsEinzelstueckUml}
% Quelle nach der deutschen Wikipedia
% \begin{liBeispiel}
% \liEntwurfsEinzelstueckUml
% \end{liBeispiel}
%    \begin{macrocode}
\def\liEntwurfsEinzelstueckUml{
  \begin{tikzpicture}
    \umlclass{Einzelstück}{
    \umlstatic{- instanz: Einzelstück}\\
    }{
    - Einzelstück()\\
    + gibInstanz(): Einzelstück
    }
  \end{tikzpicture}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liEntwurfsEinzelstueckAkteure}
% Quelle: frei überstetzt aus GoF
% \begin{liBeispiel}
% \liEntwurfsEinzelstueckAkteure
% \end{liBeispiel}
%    \begin{macrocode}
\def\liEntwurfsEinzelstueckAkteure{
  \begin{description}
    \item[Einzelstück (Singleton)]

    stellt eine statische Methode bereit, mit deren Hilfe die Klienten
    nur auf eine einzige Instanz der Klasse zugreifen können.
  \end{description}
}
%    \end{macrocode}
% \end{macro}

% \subsubsection{Erbauer}

% \begin{macro}{\liEntwurfsErbauerUml}
% Quelle nach der deutschen Wikipedia
% \begin{liBeispiel}
% \liEntwurfsErbauerUml
% \end{liBeispiel}
%    \begin{macrocode}
\def\liEntwurfsErbauerUml{
  \begin{tikzpicture}
    \umlsimpleclass[x=7,y=0]{Produkt}{}{}
    \umlclass[x=4,y=3,type=interface]{Erbauer}{}{+ baueTeil()}
    \umlclass[x=4,y=0]{KonkreterErbauer}{}{
      + baueTeil()\\
      gibErgebnis()}
    \umlclass[x=0,y=3]{Direktor}{}{baue()}

    \umluniaggreg[arg2=erbauer,pos2=0.7,mult2=1]{Direktor}{Erbauer}
    \umluniassoc{KonkreterErbauer}{Produkt}
    \umlinherit{KonkreterErbauer}{Erbauer}

  \umlnote[x=0,y=0,width=3cm]{Direktor}{
    foreach item in structure\\
    erbauer.baueTeil()
  }
  \end{tikzpicture}
  \footcite{wiki:erbauer}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liEntwurfsErbauerAkteure}
% Quelle: deutsche Wikipedia
% \begin{liBeispiel}
% \liEntwurfsErbauerAkteure
% \end{liBeispiel}
%    \begin{macrocode}
\def\liEntwurfsErbauerAkteure{
  \begin{description}
    \item[Erbauer]

    Der Erbauer spezifiziert eine abstrakte Schnittstelle zur Erzeugung der
    Teile eines komplexen Objektes.

    \item[KonkreterErbauer]

    Der konkrete Erbauer erzeugt die Teile des komplexen Objekts durch
    Implementierung der Schnittstelle. Außerdem definiert und verwaltet er
    die von ihm erzeugte Repräsentation des Produkts. Er bietet auch eine
    Schnittstelle zum Auslesen des Produkts.

    \item[Direktor]

    Der Direktor konstruiert ein komplexes Objekt unter Verwendung der
    Schnittstelle des Erbauers. Der Direktor arbeitet eng mit dem Erbauer
    zusammen: Er weiß, welche Baureihenfolge der Erbauer verträgt oder
    benötigt. Der Direktor entkoppelt somit den Konstruktionsablauf vom
    Klienten.

    \item[Produkt]

    Das Produkt repräsentiert das zu konstruierende komplexe Objekt.
    \footcite{wiki:erbauer}
  \end{description}
}
%    \end{macrocode}
% \end{macro}

% \subsubsection{Fabrikmethode}

% \begin{macro}{\liEntwurfsFabrikmethodeUml}
% Quelle nach der deutschen Wikipedia
% \begin{liBeispiel}
% \liEntwurfsFabrikmethodeUml
% \end{liBeispiel}
%    \begin{macrocode}
\def\liEntwurfsFabrikmethodeUml{
  \begin{tikzpicture}
    \umlsimpleclass[type=abstract]{Produkt}
    \umlsimpleclass[below=2cm of Produkt]{KonkretesProdukt}
    \umlinherit{KonkretesProdukt}{Produkt}

    \umlclass[type=abstract,right=4cm of Produkt]{Erzeuger}{}{
      \textit{erzeugeProdukt()}\\
    }
    \umlclass[below=1.2cm of Erzeuger]{KonkreterErzeuger}{}{
    erzeugeProdukt()
    }
    \umlinherit{KonkreterErzeuger}{Erzeuger}

    \umldep{KonkreterErzeuger}{KonkretesProdukt}
  \end{tikzpicture}
}
%    \end{macrocode}
% \end{macro}

% \subsubsection{Kompositum}

% \begin{macro}{\liEntwurfsKompositumUml}
% \begin{liBeispiel}
% \liEntwurfsKompositumUml
% \end{liBeispiel}
%    \begin{macrocode}
\def\liEntwurfsKompositumUml{
  \begin{tikzpicture}
    \umlclass[x=2.5,y=3,type=abstract]{Komponente}{}{
      \textit{+agiere()}\\
      \textit{+fügeKindHinzu()}\\
      \textit{+entferneKind()}\\
      \textit{+gibKind()}
    }
    \umlclass[x=0]{Blatt}{}{+ agiere()}
    \umlclass[x=5]{Kompositum}{}{
      +agiere()\\
      +fügeKindHinzu()\\
      +entferneKind()\\
      +gibKind()
    }

    \umlVHVinherit{Kompositum}{Komponente}
    \umlVHVinherit{Blatt}{Komponente}
    \umlHVHaggreg[anchor1=east,arm1=1.5cm,arg1=eltern,mult1=1,arg2=kind,mult2=0..*,pos2=2.9,pos1=0.4]{Kompositum}{Komponente}
  \end{tikzpicture}
}
%    \end{macrocode}
% \end{macro}

% \subsubsection{Modell-Präsentation-Steuerung}

% \begin{macro}{\liEntwurfsModellPraesentationSteuerungUml}
% \begin{liBeispiel}
% \liEntwurfsModellPraesentationSteuerungUml
% \end{liBeispiel}
%    \begin{macrocode}
\def\liEntwurfsModellPraesentationSteuerungUml{
  \begin{tikzpicture}
    \umlclass[x=-4cm,type=role]{Präsentation}{}{+aktualisiere()}
    \umlclass[x=4cm,type=role]{Steuerung}{}{+führeAus()}
    \umlclass[y=-4cm,type=role]{Modell}{
      -zustand
    }{
      +aktualisiere()\\
      +frageAn()
    }

    \umluniassoc[arg2=-modell,mult2=1,mult1=*]{Präsentation}{Modell}
    \umluniassoc[arg2=-modell,mult2=1,mult1=*]{Steuerung}{Modell}
    \umlassoc[arg1=präsentation,mult1=1..*,arg2=steuerung,mult2=1..*]{Präsentation}{Steuerung}
  \end{tikzpicture}
  \liFussnoteUrl{http://www.cs.sjsu.edu/~pearce/modules/lectures/ood2/mvc/index.htm}
}
%    \end{macrocode}
% \end{macro}

% \subsubsection{Zustand}

% \begin{macro}{\liEntwurfsZustandUml}
% Quelle: Englische Wikipedia, so ähnlich wie in GoF
% \begin{liBeispiel}
% \liEntwurfsZustandUml
% \end{liBeispiel}
%    \begin{macrocode}
\def\liEntwurfsZustandUml{
  \begin{tikzpicture}
    \umlclass[x=-1,y=3]{Kontext}{}{+beantrage()}
    \umlclass[x=3,y=3,type=interface]{Zustand}{}{+agiere()}
    \umlclass[x=1,y=0]{KonkreterZustandA}{}{+agiere()}
    \umlclass[x=5,y=0]{KonkreterZustandB}{}{+agiere()}

    \umlVHVreal{KonkreterZustandA}{Zustand}
    \umlVHVreal{KonkreterZustandB}{Zustand}

    \umlaggreg[arg=zustand,pos=0.4]{Kontext}{Zustand}

    \umlnote[x=-2.5,y=0,width=2.5cm]{Kontext}{zustand.agiere()}
  \end{tikzpicture}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liEntwurfsZustandAkteure}
% Quelle: Deutsche Wikipedia
% \begin{liBeispiel}
% \liEntwurfsZustandAkteure
% \end{liBeispiel}
%    \begin{macrocode}
\def\liEntwurfsZustandAkteure{
  \begin{description}
    \item[Kontext (Context)]

    definiert die clientseitige Schnittstelle und verwaltet die separaten
    Zustandsklassen.

    \item[State (Zustand)]

    definiert eine einheitliche Schnittstelle aller Zustandsobjekte und
    implementiert gegebenenfalls ein Standardverhalten.

    \item[KontreterZustand (ConcreteState)]

    implementiert das Verhalten, das mit dem Zustand des Kontextobjektes
    verbunden ist.
  \end{description}
}
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}

%    \end{macrocode}
% \subsection{er.sty}
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[1995/12/01]
\ProvidesPackage{lehramt-informatik-er}[2020/06/13 Zum Setzen von
ER-Diagrammen]
\RequirePackage{tikz-er2}
\usetikzlibrary{positioning}
\RequirePackage{soul}
\RequirePackage{MnSymbol}
%    \end{macrocode}

% \liLets{
%   a = liErMpAttribute,
%   d = liErDatenbankName,
%   e = liErMpEntity,
%   r = liErMpRelationship,
% }

%    \begin{macrocode}
\ExplSyntaxOn
%    \end{macrocode}

% \begin{macro}{\liErEntity}
%    \begin{macrocode}
\def\liErEntity#1{\textbf{#1}}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liErRelationship}
%    \begin{macrocode}
\def\liErRelationship#1{\ul{#1}}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liErAttribute}
%    \begin{macrocode}
\def\liErAttribute#1{\emph{#1}}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liErMpEntity}
% mp = marginpar
% \liLet{e}{liErMpEntity}
%    \begin{macrocode}
\def\liErMpEntity#1{
  \liErEntity{#1}
  \marginpar{
    \liErEntity{\tiny{}\medsquare{}~E:~#1}
  }
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liErMpRelationship}
% \liLet{r}{liErMpRelationship}
%    \begin{macrocode}
\def\liErMpRelationship#1{
  \liErRelationship{#1}
  \marginpar{
    \liErRelationship{\tiny{}\meddiamond{}~R:~#1}
  }
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liErMpAttribute}
% \liLet{a}{liErMpAttribute}
%    \begin{macrocode}
\def\liErMpAttribute#1{
  \liErAttribute{#1}
  \marginpar{
    \liErAttribute{\tiny{}\medcircle{}~A:~#1}
  }
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liErDatenbankName}
% \liLet{d}{liErDatenbankName}
% datenbank name
%    \begin{macrocode}
\def\liErDatenbankName#1{
  {
    \footnotesize\texttt{(#1)}
  }
}
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}
\ExplSyntaxOff
%    \end{macrocode}

%    \begin{macrocode}

%    \end{macrocode}
% \subsection{formale-sprachen.sty}
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[1995/12/01]
\ProvidesPackage{lehramt-informatik-formale-sprachen}[2021/02/21 Hilfsmakros
zum Setzen von mathematischen Formeln bei dem Thema Formale Sprachen]

\directlua{
  formale_sprachen = require('lehramt-informatik-formale-sprachen')
}

\RequirePackage{hyperref}
\RequirePackage{lehramt-informatik-mathe}
%    \end{macrocode}

% \begin{macro}{\liMenge}
% |$\liMenge{a, b, c}$|: $\liMenge{a, b, c}$
% \liLet{m}{liMenge}
%    \begin{macrocode}
\def\liMengeOhneMathe#1{\{ #1 \}}
\def\liMenge#1{%
\ifmmode%
\liMengeOhneMathe{#1}%
\else%
$\liMengeOhneMathe{#1}$%
\fi%
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liEpsilon}
% |\liEpsilon|: \liEpsilon
%
% \liLet{e}{liEpsilon}
%    \begin{macrocode}
\def\liEpsilon{$\varepsilon$}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liPotenzmenge}
% Umgeben mit geschweiften Klammern in einer Mathematik-Umgebung
%    \begin{macrocode}
\def\erzeuge@tiefgestellt#1{\directlua{formale_sprachen.erzeuge_tiefgestellt('#1')}}
\def\liPotenzmengeOhneMathe#1{\{ \erzeuge@tiefgestellt{#1} \}}
\def\liPotenzmenge#1{$\liPotenzmengeOhneMathe{#1}$}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liZustandsmenge}
% |\liZustandsmenge{z1, z2}|: |$\{ z_1, z_2 \}$|
%    \begin{macrocode}
\let\liZustandsmengeOhneMathe=\liPotenzmengeOhneMathe
\let\liZustandsmenge=\liPotenzmenge
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liUeberfuehrungsFunktion}
% |\liUeberfuehrungsFunktion{z0, a}|: |$\delta(z_0, a)$|
% \liLet{d}{liUeberfuehrungsFunktion}
%    \begin{macrocode}
\def\liUeberfuehrungsFunktionOhneMathe#1{\delta(\erzeuge@tiefgestellt{#1})}
\def\liUeberfuehrungsFunktion#1{
\ifmmode
  \liUeberfuehrungsFunktionOhneMathe{#1}
\else
  $\liUeberfuehrungsFunktionOhneMathe{#1}$
\fi
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liAlphabet}
% |\liAlphabet{a, b}| (|$\Sigma = \{ a, b \}$|): \liAlphabet{a, b}
%    \begin{macrocode}
\def\liAlphabet#1{$\Sigma = \{ #1 \}$}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liBandAlphabet}
% |\liBandAlphabet{\liTuringLeerzeichen}|: \liBandAlphabet{\liTuringLeerzeichen}
%    \begin{macrocode}
\def\liBandAlphabet#1{$\Gamma = \Sigma \cup \{ #1 \}$}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liZustandsBuchstabe}
%    \begin{macrocode}
\def\liZustandsBuchstabe{z}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liZustandsBuchstabeGross}
%    \begin{macrocode}
\def\liZustandsBuchstabeGross{Z}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liZustandsmengeNr}
%    \begin{macrocode}
\def\zustandsnamens@liste#1#2{
  $
    \{
      \directlua{formale_sprachen.erzeuge_zustandsnamens_liste('#1', '#2')}
    \}
  $
}
\def\liZustandsmengeNr#1{\zustandsnamens@liste{\liZustandsBuchstabe}{#1}}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liZustandsmengeNrGross}
%    \begin{macrocode}
\def\liZustandsmengeNrGross#1{\zustandsnamens@liste{\liZustandsBuchstabeGross}{#1}}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liZustandsname}
% |\liZustandsname{1}|: |$z_1$|
%    \begin{macrocode}
\def\liZustandsname#1{$\liZustandsBuchstabe_#1$}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liZustandsnameGross}
% |\liZustandsnameGross{1}|: |$Z_1$|
%    \begin{macrocode}
\def\liZustandsnameGross#1{$\liZustandsBuchstabeGross_#1$}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liAbleitung}
% |\liAbleitung{S -> aB -> ab}|: \liAbleitung{S -> aB -> ab}
%    \begin{macrocode}
\def\liAbleitung#1{$\directlua{formale_sprachen.formatiere_ableitung('#1')}$}
%    \end{macrocode}
% \end{macro}

% \begin{environment}{liProduktionsRegeln}
% \begin{verbatim}
% \begin{liProduktionsRegeln}[P_1]
%   S -> S A B | EPSILON,
%   B A -> A B,
%   A A -> a a,
%   B B -> b b
% \end{liProduktionsRegeln}
% \end{verbatim}
%
%    \begin{macrocode}
\NewDocumentEnvironment { liProduktionsRegeln }
{ O{P} +b }
{
  \noindent
  $#1 = \{$
  \vspace{-0.2cm}
  \begin{align*}
    \directlua{formale_sprachen.produktions_regeln('#2')}
  \end{align*}
  \vspace{-1.5cm}
  \begin{flushright}\}\end{flushright}
} {}
%    \end{macrocode}
% \end{environment}

% \begin{macro}{\liProduktionen}
% |\liProduktionen{S -> A, A -> a}|: \liProduktionen{S -> A, A -> a}
%    \begin{macrocode}
\def\liProduktionen#1{
  \liMenge{\directlua{formale_sprachen.produktions_regeln('#1', true)}}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liZustandsnameTiefgestellt}
% Automatisch tiefgestellte Nummerierung |\z1|
% \liLet{z}{liZustandsnameTiefgestellt}
%    \begin{macrocode}
\def\liZustandsnameTiefgestellt#1{
  \ifmmode
    \liZustandsBuchstabe\sb{#1}
  \else
    $\liZustandsBuchstabe\sb{#1}$
  \fi
}
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}
\ExplSyntaxOn
%    \end{macrocode}

% \begin{macro}{\liAusdruck}
% |\liAusdruck[L_2]{a_1,a_2,\dots,a_n}{n \in N}|: \liAusdruck[L_2]{a_1,a_2,\dots,a_n}{n \in N}
%
% Ohne „=“: |\liAusdruck[]{x}{y}|: \liAusdruck[]{x}{y}
%
% Regulärer Ausdruck zum Konvertieren:
% \begin{verbatim}
% \$(.*) += +\\\{ *(.*?)( *\\, *)?\|( *\\, *)?(.*?) *\\\}\$
% \\liAusdruck[$1]{$2}{$5}
% \end{verbatim}
%    \begin{macrocode}
\NewDocumentCommand{ \liAusdruck } { O{L} m m } {
  $
   \tl_if_empty:nTF {#1} {} {#1 =}
   \{
    \, #2 \,
    |
    \, #3 \,
  \}$
}
\ExplSyntaxOff
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liFlaci}
% Link zur flaci.com Website: |\liFlaci{Grxk1oczg}|: \liFlaci{Grxk1oczg}
%    \begin{macrocode}
\def\liFlaci#1{%
  \par
  {%
    \scriptsize
    Der Automat auf flaci.com (FLACI: Formale Sprachen, abstrakte
    Automaten, Compiler und Interpreter) Ein Projekt der Hochschule
    Zittau/Görlitz und der Pädagogischen Hochschule Schwyz:
    \href{https://flaci.com/#1}{flaci.com/#1}%
  }%
  \par
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liGrammatik}
% \cmd{\liGrammatik}\oarg{grammtik-name}\marg{variablen=V,alphabet=$\Sigma$,produktionen=P,start=S}
%
% |\liGrammatik{variablen={}, alphabet={}}|
%
% \begin{itemize}
% \item |\liGrammatik{}|: \liGrammatik{}
% \item |\liGrammatik[G_1]{}|: \liGrammatik[G_1]{}
% \item |\liGrammatik{variablen={S,A,B}}|: \liGrammatik{variablen={S,A,B}}
% \item |\liGrammatik{alphabet={a,b}}|: \liGrammatik{alphabet={a,b}}
% \item |\liGrammatik{start=X}|: \liGrammatik{start=X}
% \end{itemize}
%
%    \begin{macrocode}
\ExplSyntaxOn
\NewDocumentCommand {\liGrammatik} { O{G} m } {
  \tl_set:Nn \l_variablen_tl {V}
  \tl_set:Nn \l_alphabet_tl {\Sigma}
  \tl_set:Nn \l_produktionen_tl {P}
  \tl_set:Nn \l_start_tl {S}

  \keys_define:nn { grammatik } {
    variablen .code:n = {\tl_set:Nn \l_variablen_tl {\liMenge{##1}}},
    alphabet .code:n = {\tl_set:Nn \l_alphabet_tl {\liMenge{##1}}},
    produktionen .code:n = {\tl_set:Nn \l_produktionen_tl {\liProduktionen{##1}}},
    start .code:n = {\tl_set:Nn \l_start_tl {##1}},
  }

  \keys_set:nn { grammatik } { #2 }

  $#1 = (
    \l_variablen_tl,
    \l_alphabet_tl,
    \l_produktionen_tl,
    \l_start_tl
  )$
}
\ExplSyntaxOff
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}

%    \end{macrocode}
% \subsection{formatierung.sty}
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[1995/12/01]
\ProvidesPackage{lehramt-informatik-formatierung}[2020/11/27]
%    \end{macrocode}

% \subsubsection{Schriftarten / Typographie}
%    \begin{macrocode}
\RequirePackage{mathpazo}
\RequirePackage[no-math]{fontspec}
\setmainfont{texgyrepagella}
\setsansfont{QTAncientOlive}
\RequirePackage{sectsty}
\allsectionsfont{\fontspec{QTAncientOlive}}
%    \end{macrocode}

% \subsubsection{Farben}
%    \begin{macrocode}
\RequirePackage{xcolor}
\definecolor{infogray}{rgb}{0.97,0.97,0.97}
%    \end{macrocode}

% \subsubsection{Überschriften}
%    \begin{macrocode}
\RequirePackage{titlesec}
\titleformat{\chapter}[display]{\sffamily\bfseries}{}{0pt}{\LARGE}
\titlespacing{\chapter}{0pt}{0pt}{*1}
\titleformat{\paragraph}[hang]{\sffamily\normalsize\bfseries}{\theparagraph}{1em}{}
\setcounter{secnumdepth}{0}
%    \end{macrocode}

% \subsubsection{Listen}
%    \begin{macrocode}
\RequirePackage{paralist}
\renewcommand\labelitemi{-}
\renewcommand\labelitemii{-}
\renewcommand\labelitemiii{-}
\renewcommand\labelitemiv{-}
% Counter: enumi enumii enumiii enumiv
% Styles: \arabic{counter} \alph{counter} \Alph{counter} \roman{counter} \Roman{counter}
\renewcommand{\labelenumi}{(\alph{enumi})}
\renewcommand{\labelenumii}{(\roman{enumii})}
%    \end{macrocode}

% \subsubsection{Kasten}
%    \begin{macrocode}
\RequirePackage{mdframed}
\mdfsetup{backgroundcolor=infogray}
%    \end{macrocode}

% \begin{environment}{liKasten}
%    \begin{macrocode}
\NewDocumentEnvironment { liKasten }{ } {
  \begin{mdframed}[backgroundcolor=white!0]
} {
  \end{mdframed}
}
%    \end{macrocode}
% \end{environment}

% \subsubsection{Header}
%    \begin{macrocode}
\RequirePackage{fancyhdr}
\fancyhead[L,C,R]{}
\fancyfoot[L]{}
\fancyfoot[C]{}
\fancyfoot[R]{\thepage}
\pagestyle{fancy}
\renewcommand{\headrulewidth}{0pt}
\renewcommand{\footrulewidth}{0pt}
%    \end{macrocode}

%    \begin{macrocode}

%    \end{macrocode}
% \subsection{gantt.sty}
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[1995/12/01]
\ProvidesPackage{lehramt-informatik-gantt}[2020/09/05]
%    \end{macrocode}

% \begin{verbatim}
% \begin{ganttchart}[x unit=0.75cm, y unit chart=0.8cm]{0}{11}
% \gantttitlelist{0,...,11}{1} \\
% \ganttbar[name=1]{1}{0}{1} \\
% \ganttbar[name=2]{2}{2}{4} \\
% \ganttbar[name=3]{3}{3}{3} \\
% \ganttbar[name=4]{4}{6}{7} \\
% \ganttbar[name=5]{5}{7}{11}
%
% \node at (1) {2};
% \node at (2) {3};
% \node at (3) {1};
% \node at (4) {2};
% \node at (5) {5};
%
% \ganttlink[link type=f-f]{3}{2}
% \ganttlink[link type=f-s]{1}{2}
% \ganttlink[link type=f-s]{1}{3}
% \ganttlink[link type=f-s]{2}{4}
% \ganttlink[link type=s-s]{4}{5}
% \end{ganttchart}
% \end{verbatim}

% \begin{ganttchart}[x unit=0.75cm, y unit chart=0.8cm]{0}{11}
% \gantttitlelist{0,...,11}{1} \\
% \ganttbar[name=1]{1}{0}{1} \\
% \ganttbar[name=2]{2}{2}{4} \\
% \ganttbar[name=3]{3}{3}{3} \\
% \ganttbar[name=4]{4}{6}{7} \\
% \ganttbar[name=5]{5}{7}{11}
%
% \node at (1) {2};
% \node at (2) {3};
% \node at (3) {1};
% \node at (4) {2};
% \node at (5) {5};
%
% \ganttlink[link type=f-f]{3}{2}
% \ganttlink[link type=f-s]{1}{2}
% \ganttlink[link type=f-s]{1}{3}
% \ganttlink[link type=f-s]{2}{4}
% \ganttlink[link type=s-s]{4}{5}
% \end{ganttchart}

%    \begin{macrocode}
\RequirePackage{tikz-uml}
\RequirePackage{pgfgantt}
\setganttlinklabel{f-s}{}
\setganttlinklabel{s-s}{}
\setganttlinklabel{f-f}{}
\setganttlinklabel{s-f}{}
%    \end{macrocode}

%    \begin{macrocode}

%    \end{macrocode}
% \subsection{grafik.sty}
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[1995/12/01]
\ProvidesPackage{lehramt-informatik-grafik}[2020/12/27 Lädt das Paket
TikZ, um Grafiken zeichnen zu können.]
\RequirePackage{tikz}

%    \end{macrocode}
% \subsection{graph.sty}
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[1995/12/01]
\ProvidesPackage{lehramt-informatik-graph}[2020/06/09]
\RequirePackage{tikz}
%    \end{macrocode}

% Für die die Adjazenzliste (xrightarrow)
%    \begin{macrocode}
\RequirePackage{amsmath}
%    \end{macrocode}

% Für Adjazenz-Matrix

% \begin{verbatim}
% \[
% \begin{blockarray}{ccccc}
%    & a & b & c & d & e \\
% \begin{block}{c(cccc)}
%  a & 0 & 1 & 0 & 4 & 0 \\
%  b & 0 & 0 & 0 & 1 & 3 \\
%  c & 0 & 0 & 0 & 1 & 0 \\
%  d & 4 & 1 & 1 & 0 & 2 \\
%  e & 0 & 0 & 0 & 0 & 0 \\
% \end{block}
% \end{blockarray}
% \]
% \end{verbatim}

% \[
% \begin{blockarray}{ccccc}
%    & a & b & c & d & e \\
% \begin{block}{c(cccc)}
%  a & 0 & 1 & 0 & 4 & 0 \\
%  b & 0 & 0 & 0 & 1 & 3 \\
%  c & 0 & 0 & 0 & 1 & 0 \\
%  d & 4 & 1 & 1 & 0 & 2 \\
%  e & 0 & 0 & 0 & 0 & 0 \\
% \end{block}
% \end{blockarray}
% \]

%    \begin{macrocode}
\RequirePackage{blkarray}
%    \end{macrocode}

%    \begin{macrocode}
\usetikzlibrary{arrows.meta}
%    \end{macrocode}

% \begin{verbatim}
% \begin{tikzpicture}[li graph]
% \node (a) at (0,0) {a};
% \node (b) at (1,1) {b};
% \node (c) at (4,1) {c};
% \node (d) at (3,0) {d};
% \node (e) at (3,3) {e};
%
% \path[->] (a) edge (b);
% \path (b) edge (d);
% \path[->] (b) edge node {3} (e);
% \path (c) edge (d);
% \path (d) edge node {4} (a);
% \path[->] (d) edge node {2} (e);
% \end{tikzpicture}
% \end{verbatim}

% \begin{liBeispiel}
% \begin{tikzpicture}[li graph]
% \node (a) at (0,0) {a};
% \node (b) at (1,1) {b};
% \node (c) at (4,1) {c};
% \node (d) at (3,0) {d};
% \node (e) at (3,3) {e};
% \path[->] (a) edge (b);
% \path (b) edge (d);
% \path[->] (b) edge node {3} (e);
% \path (c) edge (d);
% \path (d) edge node {4} (a);
% \path[->] (d) edge node {2} (e);
% \end{tikzpicture}
% \end{liBeispiel}

%    \begin{macrocode}
\tikzset{
  li graph/.style={
    every node/.style={
      rectangle,
      draw,
    },
    every edge/.style={
      >={Stealth[black]},
      draw,
    },
    every edge/.append style={
      every node/.style={
        sloped,
        auto,
      }
    }
  },
  li markierung/.style={
    ultra thick,
  }
}
%    \end{macrocode}

% \begin{environment}{liGraphenFormat}
% Dummy-Umgebung, zum Parsen durch Java gedacht.
%
% \begin{verbatim}
% \begin{liGraphenFormat}
% a: 0 0
% b: 1 1
% c: 4 1
% d: 3 0
% e: 2 2
% a -> b
% b -- d
% b -> e: 3
% c -- d
% d -> e: 2
% d -- a: 4
% \end{liGraphenFormat}
% \end{verbatim}

%    \begin{macrocode}
\NewDocumentEnvironment { liGraphenFormat }{ +b } {} {}
%    \end{macrocode}
% \end{environment}

%    \begin{macrocode}

%    \end{macrocode}
% \subsection{hanoi.sty}
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[1995/12/01]
\ProvidesPackage{lehramt-informatik-hanoi}[2020/12/19 Paket zum Setzen
von Hanoi-Grafiken]
%    \end{macrocode}

% Quelle: \url{https://kleinco.de/latex-snippets/7/tikz-towers-of-hanoi-illustration-for-latex-documents/}

%    \begin{macrocode}
\RequirePackage{tikz}
\RequirePackage{xcolor}
%    \end{macrocode}

% \begin{macro}{\liHanoi}
% |\liHanoi{anzahl-scheiben}{gewicht-scheibe/turm-nr,gewicht-scheibe/turm-nr}|,
% \zB: |\liHanoi{4}{4/1,3/1,2/3,1/2}|
%    \begin{macrocode}
\def\li@mset #1[#2]=#3{%
	\expandafter\xdef\csname #1#2\endcsname{#3}
}
\def\li@mget #1[#2]{%
	\csname #1#2\endcsname
}
\def\li@minc #1[#2]+=#3{%
	\pgfmathparse{\li@mget #1[#2]+#3}%
	\li@mset #1[#2]=\pgfmathresult
}

\def\liHanoi#1#2{
  \edef\li@numdiscs{#1}
  \def\li@sequence{#2}
  \begin{tikzpicture}[line width=4mm,brown!40,line cap=round,xscale=3]
    % init colors
    \foreach[count=\j] \c in {red,green!80!black,blue,orange,violet,gray,yellow!80!black,purple,cyan,black}
    \li@mset col[\j]={\c};
    % draw poles and init pole counters
    \foreach \j in {1,2,3}{
      \li@mset pos[\j]=0
      \draw (\j,-.5) -- +(0, .5 + .5*\li@numdiscs);
    }
    % draw base
    \draw (.5,-.5) -- +(3,0);
    % draw discs
    \foreach[count=\k] \i/\j in \li@sequence{
      \draw[draw={\li@mget col[\i]}] (\j,\li@mget pos[\j]) +(-.4*\i/\li@numdiscs,0) -- +(.4*\i/\li@numdiscs,0) node[pos=.5,white,font=\sffamily] {\i};
      \li@minc pos[\j]+={.5}
    }
  \end{tikzpicture}
}
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}

%    \end{macrocode}
% \subsection{komplexitaetstheorie.sty}
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[1995/12/01]
\ProvidesPackage{lehramt-informatik-komplexitaetstheorie}[2021/07/08 Zum
Setzen von Karps NP-vollständigen Problemen, Hilfsmakros für die
Polynomialzeitreduktion.]
%    \end{macrocode}

% \liLets{
%   p = liProblemName,
%   r = liPolynomiellReduzierbar,
% }

%    \begin{macrocode}
\liLadePakete{mathe}
%    \end{macrocode}

% \begin{macro}{\liStrich}
% |$L, \liStrich{L}$|: $L, \liStrich{L}$
%    \begin{macrocode}
\def\liStrich#1{#1^\prime}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liProblemName}
% Zu Setzen von Problemnamen wie zum Beispiel SAT, COL, VERTEX COVER
% \liLet{p}{liProblemName}
%    \begin{macrocode}
\def\liProblemName#1{\texttt{#1}}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liPolynomiellReduzierbar}
% \liLet{r}{liPolynomiellReduzierbar}
%    \begin{macrocode}
\NewDocumentCommand{ \liPolynomiellReduzierbar } { m O{p}  m } {
\begin{displaymath}
  \liProblemName{#1}
  \preceq_{#2}
  \liProblemName{#3}
\end{displaymath}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liProblemVertexCover}
%    \begin{macrocode}
\def\liProblemVertexCover{%
%
Das \textbf{Knotenüberdeckungsproblem} (\liProblemName{VERTEX COVER})
fragt, ob zu einem gegebenen einfachen Graphen und einer natürlichen
Zahl $k$ eine Knotenüberdeckung der Größe von höchstens $k$ existiert.
\footcite{wiki:knotenueberdeckung}

Das heißt, ob es eine aus maximal $k$ Knoten bestehende Teilmenge $U$
der Knotenmenge gibt, so dass jede Kante des Graphen mit
mindestens einem Knoten aus $U$ verbunden ist.
\footcite[Seite 78]{theo:fs:4}%
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liProblemSubsetSum}
% Kein Karp-21-Problem
%    \begin{macrocode}
\def\liProblemSubsetSum{%
%
Das \textbf{Teilsummenproblem} (\liProblemName{SUBSET SUM} oder
\liProblemName{SSP}) ist ein spezielles Rucksackproblem.
\footcite{wiki:teilsummenproblem}
Gegeben sei eine Menge von ganzen Zahlen $I = \{w_1, w_2, \dots, w_n
\}$. Gesucht ist eine Untermenge, deren Elementsumme maximal, aber nicht
größer als eine gegebene obere Schranke $c$ ist.
\footcite[Seite 74]{theo:fs:4}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liProblemSubsetSum}
% Kein Karp-21-Problem
%    \begin{macrocode}
\def\liProblemSat{%
Das \textbf{Erfüllbarkeitsproblem der Aussagenlogik} \liProblemName{SAT}
und \liProblemName{k-SAT} mit $k \geq 3$, $k \in \mathbb{N}$ (Satz von
Cook) fragt, ob eine aussagenlogische Formel erfüllbar
ist.\footcite{wiki:sat} Das Erfüllbarkeitsproblem der
\emph{Aussagenlogik} ist in exponentieller Zeit in Abhängigkeit der
Anzahl der Variablen mit Hilfe einer Wahrheitstabelle entscheidbar.
Diese \emph{Wahrheitstabelle} kann nicht in polynomieller Zeit
aufgestellt werden.
\footcite[Seite 71]{theo:fs:4}
}
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}

%    \end{macrocode}
% \subsection{kontrollflussgraph.sty}
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[1995/12/01]
\ProvidesPackage{lehramt-informatik-kontrollflussgraph}[2020/11/07]
%    \end{macrocode}

%    \begin{macrocode}
\RequirePackage{tikz}
\usetikzlibrary{positioning}
\tikzset{
  li kontrollfluss/.style={
    knoten/.style={
      circle,
      draw
    },
    usebox/.style={
      draw,
      rectangle,
      font=\scriptsize,
      anchor=west,
      align=left,
    },
    bedingung/.style={
      midway,
      draw=none,
      font=\scriptsize
    },
    knotenbeschriftung/.style={
      draw,
      rectangle,
      midway,
      font=\scriptsize
    },
    wahr/.style={
      thick
    },
    falsch/.style={
      dashed
    },
    every node/.style={
      circle,
      draw,
    },
    every edge/.append style={
      every node/.style={
        draw=none,
        bedingung,
      }
    },
    every path/.style={
      draw,
      ->,
    },
    every pin/.style={
      draw,
      dotted,
      rectangle,
      pin position=right
    },
    every pin edge/.style={
      dotted,
      arrows=-,
    }
  }
}
%    \end{macrocode}

% \begin{environment}{liKontrollflussgraph}
%    \begin{macrocode}
\NewDocumentEnvironment { liKontrollflussgraph } { O{} } {
  \begin{tikzpicture}[
    li kontrollfluss,
    #1
  ]
} {
  \end{tikzpicture}
}
%    \end{macrocode}
% \end{environment}

% \begin{macro}{\liAnweisung}
%    \begin{macrocode}
\def\liAnweisung#1(#2,#3){\node[knoten] at (#2,#3) (#1) {#1};}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liBedingung}
% \liLet{b}{liBedingung}
%    \begin{macrocode}
\def\liBedingung#1#2{node[bedingung,#1]{[\texttt{#2}]}}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liBedingungWahr}
% \liLet{bWahr}{liBedingungWahr}
%    \begin{macrocode}
\def\liBedingungWahr#1{node[bedingung,#1]{\texttt{[true]}}}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liBedingungFalsch}
% \liLet{bFalsch}{liBedingungFalsch}
%    \begin{macrocode}
\def\liBedingungFalsch#1{node[bedingung,#1]{\texttt{[false]}}}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liKontrollCode}
% \liLet{c}{liKontrollCode}
%    \begin{macrocode}
\def\liKontrollCode#1{{\tiny\texttt{\textcolor{gray}{#1}}}}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liKontrollTextzeileKnoten}
% \liLet{k}{liKontrollTextzeileKnoten}
%    \begin{macrocode}
\def\liKontrollTextzeileKnoten#1{\raisebox{-2pt}{\tikz[scale=0.5,transform shape] \node[draw,circle]{#1};}}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liKontrollKnotenPfad}
% \liLet{p}{liKontrollKnotenPfad}
%    \begin{macrocode}
\ExplSyntaxOn
\NewDocumentCommand { \liKontrollKnotenPfad }{ m }
{
  \seq_set_split:Nnn \l_tmpa_seq { - } { #1 }
  \seq_set_map:NNn \l_tmpa_seq \l_tmpa_seq {\liKontrollTextzeileKnoten{##1}}
  \seq_use:Nn \l_tmpa_seq { ~-~~ }
}
\ExplSyntaxOff
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}

%    \end{macrocode}
% \subsection{literatur-dummy.sty}
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[1995/12/01]
\ProvidesPackage{lehramt-informatik-literatur-dummy}[2020/11/27]
%    \end{macrocode}

% \begin{macro}{\literatur}
%    \begin{macrocode}
\def\literatur{}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\footcite}
%    \begin{macrocode}
% \RequirePackage[stable,multiple]{footmisc}
\NewDocumentCommand{ \footcite } { o m }{}
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}

%    \end{macrocode}
% \subsection{literatur.sty}
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[1995/12/01]
\ProvidesPackage{lehramt-informatik-literatur}[2020/11/27]
%    \end{macrocode}

%    \begin{macrocode}
\RequirePackage{csquotes}
\RequirePackage[
  bibencoding=utf8,
  citestyle=authortitle,
  backend=biber,
]{biblatex}
\addbibresource{\LehramtInformatikRepository/Quellen/10_DB.bib}
\addbibresource{\LehramtInformatikRepository/Quellen/20_OOMUP.bib}
\addbibresource{\LehramtInformatikRepository/Quellen/30_AUD.bib}
\addbibresource{\LehramtInformatikRepository/Quellen/40_SOSY.bib}
\addbibresource{\LehramtInformatikRepository/Quellen/60_FUMUP.bib}
\addbibresource{\LehramtInformatikRepository/Quellen/70_THEO.bib}
\addbibresource{\LehramtInformatikRepository/Quellen/80_DDI.bib}
\addbibresource{\LehramtInformatikRepository/Quellen/Allgemein.bib}
\addbibresource{\LehramtInformatikRepository/Quellen/Examen.bib}
\addbibresource{\LehramtInformatikRepository/Quellen/Wikipedia.bib}
% To allow footnotes in the heading
\RequirePackage[stable,multiple]{footmisc}
%    \end{macrocode}

% \begin{macro}{\literatur}
%    \begin{macrocode}
\def\literatur{\printbibliography[heading=subbibliography]}
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}

%    \end{macrocode}
% \subsection{makros.sty}
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[1995/12/01]
\ProvidesPackage{lehramt-informatik-makros}[2020/11/27 Eine Sammlung von
häufig verwendeten Makros und Umgebungen, die thematisch zu keinem
anderen Paket passen]
%    \end{macrocode}

%    \begin{macrocode}
\RequirePackage{hyperref}
%    \end{macrocode}

%    \begin{macrocode}
\RequirePackage{graphicx}
%    \end{macrocode}

% Für die Umgebung |liQuellen| benötigt.
%    \begin{macrocode}
\RequirePackage{paralist}
%    \end{macrocode}

% \begin{macro}{\inhaltsverzeichnis}
%    \begin{macrocode}
\def\inhaltsverzeichnis {
  \begin{mdframed}
    \begingroup
    \let\clearpage\relax
    \tableofcontents
    \endgroup
  \end{mdframed}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\memph}
% |\mephm| (|\marginpar| and |\emph|)
%    \begin{macrocode}
\newcommand{\memph}[1]{\emph{#1}\marginpar{\tiny#1}}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\SLASH}
%    \begin{macrocode}
\newcommand\SLASH{\char`\\}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liPseudoUeberschrift}
% Text, der sich wie eine Überschrift verhält.
%    \begin{macrocode}
\newcommand{\liPseudoUeberschrift}[1]{
\bigskip
\noindent
\textsf{\textbf{#1}}
\noindent
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liBeschriftung}
% Ähnlich dem Makro |\liPseudoUeberschrift{}|. Am Ende des Textes wird
% ein Doppelpunktzeichen angehängt.
%    \begin{macrocode}
\newcommand{\liBeschriftung}[1]{
\par
\noindent
\medskip
\textbf{#1}:
\medskip
\noindent
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\hinweis}
%    \begin{macrocode}
\def\hinweis#1{{\footnotesize[#1]}}
%    \end{macrocode}
% \end{macro}

% \begin{environment}{liProjektSprache}
% |\begin{liProjektSprache}{NameProjektSprache} \end{liProjektSprache}|:
% Zum Einbetten von projekteigenen Minisprachen/DSLs (Domain-specific
% language) (\zB RelationenSchema). Der Inhalt der Umgebung wird nicht
% von TeX kompiliert, sondern von dem Java-Kommandozeilen-Programm
% |didaktik.java| verarbeitet.
%    \begin{macrocode}
\NewDocumentEnvironment { liProjektSprache }{ o +b } {} {}
%    \end{macrocode}
% \end{environment}

% \begin{environment}{liEinbettung}
%    \begin{macrocode}
\NewDocumentEnvironment { liEinbettung }{ o +b } {#2} {}
%    \end{macrocode}
% \end{environment}

% \begin{environment}{liAntwort}
% Zum Setzen von Antworten. Sie werden mit einem Kasten umgeben. Könnten
% eventuell ausgeblendet werden, wenn man nur die Lösung sehen will.
% \begin{macrocode}
\RequirePackage{xparse}
\ExplSyntaxOn
\NewDocumentEnvironment{ liAntwort } { O{standard} }
{
  \str_case:nn {#1} {
    {standard} {
      \def\beschriftung{}
      \mdfsetup{backgroundcolor=gray!5,linecolor=gray}
    }
    {richtig} {
      \def\beschriftung{richtig}
      \mdfsetup{backgroundcolor=green!5,linecolor=green}
    }
    {falsch} {
      \def\beschriftung{falsch}
      \mdfsetup{backgroundcolor=red!3,linecolor=red}
    }
    {muster} {
      \def\beschriftung{Musterlösung}
      \mdfsetup{backgroundcolor=green!12,linecolor=green}
    }
  }
  \ifx\beschriftung\empty\else
  \noindent
  \textbf{\beschriftung{}:}
  \fi
  \begin{mdframed}
}
{\end{mdframed}}
%    \end{macrocode}
% \end{environment}

% \begin{environment}{liAdditum}
% Zusätzliches Material bei Aufgaben, das
% zum Lösen der Aufgaben nicht unbedingt nötig ist, z. b.
% Hintergrundinformation, Test-Dateien, komplette Code-Dateien.
% \begin{macrocode}
\NewDocumentEnvironment{ liAdditum } { o }
{
  \begin{mdframed}[backgroundcolor=yellow!5]
  \IfNoValueTF {#1}
  { \liPseudoUeberschrift{Additum} }
  { \liPseudoUeberschrift{Additum:~#1} }
}
{\end{mdframed}}
%    \end{macrocode}
% \end{environment}

% \begin{environment}{liExkurs}

% \begin{verbatim}
% \begin{liExkurs}[Linear rekursiv]
% Die häufigste Rekursionsform ist die lineare Rekursion, bei der in jedem
% Fall der rekursiven Definition höchstens ein rekursiver Aufruf vorkommen
% darf.
% \end{liExkurs}
% \end{verbatim}

% \begin{liExkurs}[Linear rekursiv]
% Die häufigste Rekursionsform ist die lineare Rekursion, bei der in jedem
% Fall der rekursiven Definition höchstens ein rekursiver Aufruf vorkommen
% darf.
% \end{liExkurs}

%    \begin{macrocode}
\NewDocumentEnvironment{ liExkurs }{o +b}{
  \vspace{0.2cm}%
  \begin{mdframed}[
    backgroundcolor=white,
    bottomline=false,
    innermargin=1cm,
    leftline=true,
    linecolor=black,
    linewidth=0.1cm,
    outermargin=1cm,
    rightline=false,
    topline=false,
  ]
  \footnotesize
  \noindent%
  \textbf{Exkurs:~#1}\par%
  \noindent%
  #2
  \end{mdframed}
  \vspace{0.2cm}
}{}
%    \end{macrocode}
% \end{environment}

% \begin{environment}{liQuellen}

% \url{https://tex.stackexchange.com/a/229004}

% \begin{verbatim}
% \begin{liQuellen}
% \item Quelle 1
% \item Quelle 2
% \end{liQuellen}
% \end{verbatim}

% \begin{liQuellen}
% \item Quelle 1
% \item Quelle 2
% \end{liQuellen}

%    \begin{macrocode}
\cs_new:Npn \listen@punkt #1 {\item #1}
\NewDocumentEnvironment { liQuellen }{ +b }
{
  \seq_clear_new:N \l_quellen
  \seq_set_split:Nnn \l_quellen {\item} {#1}
  \seq_remove_all:Nn \l_quellen {}
  \begin{mdframed}[backgroundcolor=white!0]
  \footnotesize
  \noindent
  \textsf{\textbf{Weiterführende~Literatur:}}
  \medskip
  \begin{compactitem}
  \seq_map_function:NN \l_quellen {\listen@punkt}
  \end{compactitem}
  \end{mdframed}
  %
  \makeatletter
  \par\@afterindentfalse\@afterheading
  \makeatother
} {}
%    \end{macrocode}
% \end{environment}

% \begin{environment}{liLernkartei}
%    \begin{macrocode}
\NewDocumentEnvironment { liLernkartei }{ m +b }
{
  \begin{mdframed}
  \footnotesize
  \noindent%
  \textbf{Lernkarteikarte:~#1}\par%
  \noindent%
  #2
  \end{mdframed}
} {}
%    \end{macrocode}
% \end{environment}

% \begin{environment}{liDiagramm}
% |\begin{liDiagramm}{beschriftung}\end{liDiagramm}|: Zu
% setzen einer Graphik bzw eines Diagramms.
%    \begin{macrocode}
\NewDocumentEnvironment { liDiagramm }{ m +b }
{
  \begin{mdframed}[backgroundcolor=white!0]
  \small
  \noindent%
  \textit{#1}:
  \begin{center}
  #2
  \medskip
  \end{center}
  \end{mdframed}
} {}
\ExplSyntaxOff
%    \end{macrocode}
% \end{environment}

% \begin{macro}{\liFussnoteUrl}
% \cmd{\liFussnoteUrl}\oarg{zusätzlicher-text}\marg{url}
% |\liFussnoteUrl[zusätzlicher Text]{url}|: Eine HTTP-URL als Fußnote setzen.
%    \begin{macrocode}
\NewDocumentCommand{\liFussnoteUrl} { o m } {
  \footnote{\url{#2}\IfNoValueTF{#1}{}{ (#1)}}
}

%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liFussnoteLink}
% \cmd{\liFussnoteLink}\oarg{zusätzlicher-text}\marg{link-text}\marg{url}
% |\liFussnoteLink[zusätzlicher Text]{text}{url}|: Einen Link, d. h. einen Link-Text
% und eine URL als Fußnote setzen.
%    \begin{macrocode}
\NewDocumentCommand{\liFussnoteLink} { o m m } {
  \footnote{\href{#3}{#2}\IfNoValueTF{#1}{}{ (#1)}}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\zB}
%    \begin{macrocode}
\def\zB{z.\,B. }
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\ZB}
%    \begin{macrocode}
\def\ZB{Z.\,B. }
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\dh}
%    \begin{macrocode}
\def\dh{d.\,h. }
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}

%    \end{macrocode}
% \subsection{master-theorem.sty}
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[1995/12/01]
\ProvidesPackage{lehramt-informatik-master-theorem}[2021/04/13]
%    \end{macrocode}

% \liLets{
%   O = liO,
%   o = liOmega,
%   T = liT,
%   t = liTheta,
% }

%    \begin{macrocode}
\ExplSyntaxOn
\RequirePackage{amsmath}
%    \end{macrocode}

% \begin{macro}{\liRundeKlammer}
%    \begin{macrocode}
\def\liRundeKlammer#1{
  \negthinspace \left( #1 \right)
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liTheta}
% |\liTheta{n^2}|: \liTheta{n^2}
%    \begin{macrocode}
\def\liThetaOhneMathe#1{
  \Theta \liRundeKlammer{#1}
}
\def\liTheta#1{
  \ifmmode
    \liThetaOhneMathe{#1}
  \else
    $\liThetaOhneMathe{#1}$
  \fi
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liOmega}
% |\liOmega{n^2}|: \liOmega{n^2}
%    \begin{macrocode}
\def\liOmegaOhneMathe#1{
  \Omega \liRundeKlammer{#1}
}
\def\liOmega#1{
  \ifmmode
    \liOmegaOhneMathe{#1}
  \else
    $\liOmegaOhneMathe{#1}$
  \fi
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liO}
% |\liO{n^2}|: \liO{n^2}
%    \begin{macrocode}
\def\liOOhneMathe#1{
  \mathcal{O} \liRundeKlammer{#1}
}
\def\liO#1{
  \ifmmode
    \liOOhneMathe{#1}
  \else
    $\liOOhneMathe{#1}$
  \fi
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liT}
% \liLet{T}{liT}
% |\liT{16}{2}|: \liT{16}{2}
% |\liT{}{2}|: \liT{}{2}
%    \begin{macrocode}
\def\liTOhneMathe#1#2{
  \tl_if_blank:nTF {#1}
  {}
  {#1 \cdot }
  T
  \liRundeKlammer{\frac{n}{#2}}
}
\def\liT#1#2{
  \ifmmode
    \liTOhneMathe{#1}{#2}
  \else
    $\liTOhneMathe{#1}{#2}$
  \fi
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liRekursionsGleichung}
% |\liRekursionsGleichung|: \liRekursionsGleichung
%    \begin{macrocode}
\def\liRekursionsGleichung{
  $T(n) = \liT{a}{b} + f(n)$
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liBedingungEins}
% |\liBedingungEins|: \liBedingungEins
%    \begin{macrocode}
\def\liBedingungEins{
  $f(n) \in \liO{n^{\log\sb{b}a - \varepsilon}}$
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liBedingungZwei}
% |\liBedingungZwei|: \liBedingungZwei
%    \begin{macrocode}
\def\liBedingungZwei{
  $f(n) \in \liTheta{n^{\log\sb{b}a}}$
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liBedingungDrei}
% |\liBedingungDrei|: \liBedingungDrei
%    \begin{macrocode}
\def\liBedingungDrei{
  $f(n) \in \liOmega{n^{\log\sb{b}a + \varepsilon}}$
}
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}
\ExplSyntaxOff
%    \end{macrocode}

% \begin{macro}{\liMasterVariablen}
%    \begin{macrocode}
\def\liMasterVariablen{
  \begin{displaymath}
  T(n) = \T{a}{b} + f(n)
  \end{displaymath}

  \begin{itemize}
  \item[$a =$]
  Anzahl der Unterprobleme in der Rekursion

  \item[$\textstyle{\frac{1}{b}} =$]
  Teil des Originalproblems, welches wiederum durch alle Unterprobleme
  repräsentiert wird

  \item[$f(n) =$]
  Kosten (Aufwand, Nebenkosten), die durch die Division des Problems und
  die Kombination der Teillösungen entstehen
  \end{itemize}
  \footcite{wiki:master-theorem}
  \footcite[Seite 19-35 (PDF 11-24)]{aud:fs:2}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liMasterFaelle}
%    \begin{macrocode}
\def\liMasterFaelle{
  \begin{description}
  \item[1. Fall:]
  $T(n) \in \t{n^{\log_{b}a}}$

  \hfill falls \liBedingungEins
  für $\varepsilon > 0$

  \item[2. Fall:]
  $T(n) \in \t{n^{\log_{b}a} \cdot \log n}$

  \hfill falls \liBedingungZwei

  \item[3. Fall:]
  $T(n) \in \t{f(n)}$

  \hfill falls \liBedingungDrei
  für $\varepsilon > 0$
  und ebenfalls für ein $c$ mit $0 < c < 1$ und alle hinreichend großen $n$
  gilt:
  $a \cdot f(\textstyle {\frac {n}{b}})\leq c \cdot f(n)$
  \end{description}
}
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}

%    \end{macrocode}
% \subsection{mathe.sty}
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[1995/12/01]
\ProvidesPackage{lehramt-informatik-mathe}[2020/06/10]

% for example \ltimes \rtimes
%\RequirePackage{amssymb}
\RequirePackage{amsmath}

%%
% \mlq \mrq
%%
\DeclareMathSymbol{\mlq}{\mathord}{operators}{``}
\DeclareMathSymbol{\mrq}{\mathord}{operators}{`'}

%    \end{macrocode}
% \subsection{minimierung.sty}
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[1995/12/01]
\ProvidesPackage{lehramt-informatik-mathe}[2021/03/13 Für den
Minimierungsalgorithmus von einem NEA zu einem DEA]
%    \end{macrocode}

%    \begin{macrocode}
\liLadePakete{typographie}
%    \end{macrocode}

% \begin{verbatim}
% \let\z=\liZustandsnameTiefgestellt
% \let\f=\liFussnote
% \let\l=\liLeereZelle
% \let\Z=\liZustandsPaar
% \let\erklaerung=\liMinimierungErklaerung
%
% \begin{tabular}{|c||c|c|c|c|c|c|c|c|c|}
% \hline
% \z0 & \l  & \l  & \l  & \l  & \l  & \l  & \l  & \l  & \l  \\ \hline
% \z1 &     & \l  & \l  & \l  & \l  & \l  & \l  & \l  & \l  \\ \hline
% \z2 &     &     & \l  & \l  & \l  & \l  & \l  & \l  & \l  \\ \hline
% \z3 &     &     &     & \l  & \l  & \l  & \l  & \l  & \l  \\ \hline
% \z4 &     &     &     &     & \l  & \l  & \l  & \l  & \l  \\ \hline
% \z5 &     &     &     &     &     & \l  & \l  & \l  & \l  \\ \hline
% \z6 &     &     &     &     &     &     & \l  & \l  & \l  \\ \hline
% \z7 &     &     &     &     &     &     &     & \l  & \l  \\ \hline
% \z8 &     &     &     &     &     &     &     &     & \l  \\ \hline\hline
%     & \z0 & \z1 & \z2 & \z3 & \z4 & \z5 & \z6 & \z7 & \z8 \\ \hline
% \end{tabular}
%
% \liFussnoten
%
% \begin{liUebergangsTabelle}{0}{1}
% \Z01 & \Z10 & \Z23     \\
% \Z05 & \Z15 & \Z25 \f2 \\
% \Z15 & \Z05 & \Z35 \f2 \\
% \Z23 & \Z44 & \Z55     \\
% \Z24 & \Z44 & \Z55     \\
% \Z34 & \Z44 & \Z55     \\
% \end{liUebergangsTabelle}
%
% \end{verbatim}

% \begin{macro}{\liFussnote}
%    \begin{macrocode}
\def\liFussnote#1{$x_{#1}$}
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}
\def\li@fussnote@text#1#2{
  \liFussnote{#1}
  \quad
  {\footnotesize #2}
}
%    \end{macrocode}

% \begin{macro}{\liFussnoteEinsText}
%    \begin{macrocode}
\def\liFussnoteEinsText{
  \li@fussnote@text{1}
  {Paar aus End-/ Nicht-Endzustand kann nicht äquivalent sein.}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liFussnoteZweiText}
%    \begin{macrocode}
\def\liFussnoteZweiText{
  \li@fussnote@text{2}
  {Test, ob man mit der Eingabe zu einem bereits markiertem Paar kommt.}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liFussnoteDreiText}
%    \begin{macrocode}
\def\liFussnoteDreiText{
  \li@fussnote@text{3}
  {In weiteren Iterationen markierte Zustände.}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liFussnoteVierText}
%    \begin{macrocode}
\def\liFussnoteVierText{
  \li@fussnote@text{4}
  {…}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liFussnoten}
% \begin{liBeispiel}
%   \liFussnoten
% \end{liBeispiel}
%    \begin{macrocode}
\def\liFussnoten{
  \bigskip

  \noindent
  \liFussnoteEinsText

  \noindent
  \liFussnoteZweiText

  \noindent
  \liFussnoteDreiText

  \noindent
  \liFussnoteVierText
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liLeereZelle}
% |\liLeereZelle|: \liLeereZelle
% \liLet{l}{liLeereZelle}
%    \begin{macrocode}
\def\liLeereZelle{$\emptyset$}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liZustandsPaarVariablenName}
%    \begin{macrocode}
\def\liZustandsPaarVariablenName{z}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liZustandsPaar}
%    \begin{macrocode}
\def\liZustandsPaar#1#2{
  $(
    \liZustandsPaarVariablenName_#1,
    \liZustandsPaarVariablenName_#2
  )$
}
%    \end{macrocode}
% \end{macro}

% \begin{environment}{liUebergangsTabelle}
%    \begin{macrocode}
\renewcommand{\arraystretch}{1.4}
\NewDocumentEnvironment{ liUebergangsTabelle } { m m } {
  \liPseudoUeberschrift{Übergangstabelle}
  \begin{center}
  \begin{tabular}{r||l|l}
  \textbf{Zustandspaar} & \textbf{#1} & \textbf{#2} \\\hline
} {
  \end{tabular}
  \end{center}
}
%    \end{macrocode}
% \end{environment}

% \begin{macro}{\liUeberschriftDreiecksTabelle}
% |\liUeberschriftDreiecksTabelle|: \liUeberschriftDreiecksTabelle
%    \begin{macrocode}
\ExplSyntaxOn
\def\liUeberschriftDreiecksTabelle{
  \liPseudoUeberschrift{Minimierungstabelle~(Table~filling)}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liMinimierungErklaerung}
% \liLet{erklaerung}{liMinimierungErklaerung}
% \liMinimierungErklaerung
%    \begin{macrocode}
\def\liMinimierungErklaerung{
  %\footcite[Seite~19]{koenig}
  \liParagraphMitLinien{
    Der~Minimierungs-Algorithmus~(auch~Table-Filling-Algorithmus~genannt)~
    trägt~in~seinem~Verlauf~eine~Markierung~in~alle~
    diejenigen~Zellen~der~Tabelle~ein,~die~zueinander~nicht~äquivalente~
    Zustände~bezeichnen.~Die~Markierung~„$x\sb{n}$“~in~einer~Tabellenzelle~($i$,~
    $j$)~bedeutet~dabei,~dass~das~Zustandspaar~($i$,~$j$)~in~der~$k$-ten~
    Iteration~des~Algorithmus~markiert~wurde~und~die~Zustände~$i$~und~$j$~
    somit~zueinander~($k~-~1$)-äquivalent,~aber~nicht~$k$-äquivalent~und~
    somit~insbesondere~nicht~äquivalent~sind.~Bleibt~eine~Zelle~bis~zum~Ende~
    unmarkiert,~sind~die~entsprechenden~Zustände~zueinander~äquivalent.
  }
}
\ExplSyntaxOff
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}

%    \end{macrocode}
% \subsection{normalformen.sty}
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[1995/12/01]
\ProvidesPackage{lehramt-informatik-normalformen}[2020/12/10
Hilfsmakros zum Setzen von Normalformen, Funktionalen Abhänigkeiten,
Attributhülle]
\liLadePakete{mathe}
\directlua{
  helfer = require('lehramt-informatik-helfer')
  normalformen = require('lehramt-informatik-normalformen')
}
%    \end{macrocode}

% \liLets{
%   ah = liAttributHuelle,
%   ahL = liAttributHuelleLinksReduktion,
%   fa = liFunktionaleAbhaengigkeit,
%   FA = liFunktionaleAbhaengigkeiten,
%   m = liAttributMenge,
%   r = liRelation,
% }

%    \begin{macrocode}
\def\liTeilen#1{
  \directlua{tex.print(normalformen.teilen('#1'))}
}
%    \end{macrocode}

% \begin{macro}{\liAttributHuelle}
% \liLet{ah}{liAttributHuelle}
% Regulärer Ausdruck zum Konvertieren
% |AttrHülle\((.*)\)|
% |\\ah{$1}|
%    \begin{macrocode}
\def\liAttributHuelleOhneMathe#1{\text{AttrHülle}(#1)}
\def\liAttributHuelle#1{
\ifmmode
  \liAttributHuelleOhneMathe{#1}
\else
  $\liAttributHuelleOhneMathe{#1}$
\fi
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liAttributMenge}
% \liLet{m}{liAttributMenge}
%    \begin{macrocode}
\def\liAttributMenge#1{\{ \textit{#1} \}}
%    \end{macrocode}
% \end{macro}

% \begin{environment}{liAHuelle}
%    \begin{macrocode}
\NewDocumentEnvironment{ liAHuelle } { +b } {
  \begingroup
  \footnotesize
  \begin{multline*}
    #1
  \end{multline*}
  \endgroup
} { }
%    \end{macrocode}
% \end{environment}

% \begin{macro}{\liAttributHuelleLinksReduktion}
% Nur innerhalb von |liAHuelle| zu verwenden
% bzw. |multline|
% \liLet{ahL}{liAttributHuelleLinksReduktion}
% |\ahL{ursprüngliche linke Attributmenge}{ohne dieses Attribut}{Ergebnis}|
%    \begin{macrocode}
\def\liAttributHuelleLinksReduktion#1#2#3{
  \shoveleft{
    \liAttributHuelleOhneMathe{FA, \liAttributMenge{\liAttributMenge{#1} - \liAttributMenge{#2}}} =
  } \\
  \shoveright{
    \liAttributMenge{#3}
  } \\
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liFunktionaleAbhaengigkeit}
% \liLet{fa}{liFunktionaleAbhaengigkeit}
% |\liFunktionaleAbhaengigkeit{A, B -> C, D}|
% Regulärer Ausdruck zum Konvertieren: |\$(.*?) \\rightarrow (.*?)\$|
% |\\fa{$1 -> $2}|
%    \begin{macrocode}
\def\liFunktionaleAbhaengigkeit#1{%
  \directlua{normalformen.drucke_funk_abhaengigkeit('#1')}%
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liFunktionaleAbhaengigkeiten}
% \begin{verbatim}
% \liFunktionaleAbhaengigkeiten[F]{
%   M -> M;
%   M -> N;
%   V -> T, P, PN;
%   P -> PN;
% }
% \end{verbatim}
%
% \liLet{FA}{liFunktionaleAbhaengigkeiten}
% Regulärer Ausdruck zum Konvertieren:
% |\\item \$(.*) \\rightarrow (.*)\$|
% |\$(.*) \\rightarrow (.*)\$|
% |$1 -> $2;|
%    \begin{macrocode}
\NewDocumentCommand {\liFunktionaleAbhaengigkeiten} { O{FA} m } {
  \par
  \noindent
  #1 $= \{$
  \par
  \directlua{normalformen.drucke_funk_abhaengigkeiten('#2')}
  \par
  \noindent$\}$
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liRelation}
% \liLet{r}{liRelation}
% \begin{liBeispiel}
% \liRelation[R3]{A, B, C}
% \end{liBeispiel}
% Regulärer Ausdruck zum Konvertieren:
% |\$(R.*)\((.*)\)\$|
% |\\liRelation[$1]{$2}|
%    \begin{macrocode}
\NewDocumentCommand {\liRelation} { O{R} m } {
  $\directlua{
    local name = helfer.konvertiere_tiefgestellt('#1')
    tex.print(name)
  }$(\textit{\,#2\,})
}
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}

%    \end{macrocode}
% \subsection{petri.sty}
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[1995/12/01]
\ProvidesPackage{lehramt-informatik-petri}[2020/12/03]
%    \end{macrocode}

% \liLets{
%   t = liPetriTransitionsName,
%   tp = liPetriTransPfeile,
%   k = liPetriErreichKnotenDrei,
% }

%    \begin{macrocode}
\RequirePackage{tikz}
\usetikzlibrary{petri,arrows.meta}
%    \end{macrocode}

% Für die Darstellungsmatrix
%    \begin{macrocode}
\RequirePackage{blkarray}
%    \end{macrocode}

% \begin{verbatim}
% \def\TmpA#1{
%   \liPetriSetzeSchluessel%
%   \pgfkeys{/petri/.cd,#1}%
%   \begin{tikzpicture}[li petri]
%   \node at (-0.25,-0.25) {};
%   \node at (\TmpX,\TmpY) {};
%
%   \begin{scope}[transform canvas={scale=\TmpScale},x=2cm,y=2cm,]
%     \node[place,tokens=\TmpPlaceOne,label=$p_1$] at (0,1) (p1) {};
%     \node[place,tokens=\TmpPlaceTwo,label=$p_2$] at (2,2) (p2) {};
%     \node[place,tokens=\TmpPlaceThree,label=east:$p_3$] at (2,0) (p3) {};
%
%     \node[transition,label=east:$t_1$,\TmpTransitionOne] at (2,1) {}
%       edge[pre] (p2)
%       edge[post] (p3);
%     \node[transition,label=$t_2$,\TmpTransitionTwo] at (1,1.5) {}
%       edge[pre] (p1)
%       edge[post] (p2);
%     \node[transition,label=$t_3$,\TmpTransitionThree] at (1,0.5) {}
%       edge[pre] (p3)
%       edge[post] (p1);
%     \node[transition,label=$t_4$,\TmpTransitionFour] at (1,1) {}
%       edge[pre] (p2)
%       edge[pre] (p3)
%       edge[post] (p1);
%   \end{scope}
%   \end{tikzpicture}
% }
% \end{verbatim}

% \begin{macro}{\liPetriSetzeSchluessel}
%    \begin{macrocode}
\def\liPetriSetzeSchluessel{%
  \def\TmpTransitionOne{}%
  \def\TmpTransitionTwo{}%
  \def\TmpTransitionThree{}%
  \def\TmpTransitionFour{}%
  \def\TmpTransitionFive{}%
  \def\TmpTransitionSix{}%
  \def\TmpTransitionSeven{}%
  \def\TmpTransitionEight{}%
  \def\TmpTransitionNine{}%
  \def\TmpTransitionTen{}%
  \pgfkeys{/petri/.cd,
    p1/.store in=\TmpPlaceOne,p1/.default=0,p1,
    p2/.store in=\TmpPlaceTwo,p2/.default=0,p2,
    p3/.store in=\TmpPlaceThree,p3/.default=0,p3,
    p4/.store in=\TmpPlaceFour,p4/.default=0,p4,
    p5/.store in=\TmpPlaceFive,p5/.default=0,p5,
    p6/.store in=\TmpPlaceSix,p6/.default=0,p6,
    p7/.store in=\TmpPlaceSeven,p7/.default=0,p7,
    p8/.store in=\TmpPlaceEight,p8/.default=0,p8,
    p9/.store in=\TmpPlaceNine,p9/.default=0,p9,
    p10/.store in=\TmpPlaceTen,p10/.default=0,p10,
    t1/.store in=\TmpTransitionOne,t1/.default=activated,
    t2/.store in=\TmpTransitionTwo,t2/.default=activated,
    t3/.store in=\TmpTransitionThree,t3/.default=activated,
    t4/.store in=\TmpTransitionFour,t4/.default=activated,
    t5/.store in=\TmpTransitionFive,t5/.default=activated,
    t6/.store in=\TmpTransitionSix,t6/.default=activated,
    t7/.store in=\TmpTransitionSeven,t7/.default=activated,
    t8/.store in=\TmpTransitionEight,t8/.default=activated,
    t9/.store in=\TmpTransitionNine,t9/.default=activated,
    t10/.store in=\TmpTransitionTen,t10/.default=activated,
    scale/.store in=\TmpScale,scale/.default=0.5,
    x/.store in=\TmpX,x/.default=5,
    y/.store in=\TmpY,y/.default=5,
  }%
}
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}
\tikzset{
  li petri/.style={
    activated/.style={
      very thick
    },
    inhibitor/.style={
      {Circle[open,length=2mm,fill=white]}-
    }
  }
}
%    \end{macrocode}

% \begin{macro}{\liPetriTransitionsName}
% \liLet{t}{liPetriTransitionsName}
% |\$t_(\d+)\$| |\t$1|
%    \begin{macrocode}
\def\liPetriTransitionsNameOhneMathe#1{t\sb{#1}}
\def\liPetriTransitionsName#1{
  \ifmmode
    \liPetriTransitionsNameOhneMathe{#1}
  \else
    $\liPetriTransitionsNameOhneMathe{#1}$
  \fi
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liPetriErreichTransition}
% \liLet{t}{liPetriErreichTransition}
%    \begin{macrocode}
\NewDocumentCommand{ \liPetriErreichTransition } { m m m O{} O{} } {
  \draw[->] (#1) edge[#4] node[pos=0.5,auto,sloped,#5]{$t\sb{#3}$} (#2);
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liPetriErreichKnotenDrei}
% \liLet{k}{liPetriErreichKnotenDrei}
%    \begin{macrocode}
\def\liPetriErreichKnotenDrei#1#2#3{(#1,#2,#3)}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liPetriTransPfeile}
% \liLet{tp}{liPetriTransPfeile}
%    \begin{macrocode}
\def\liPetriTransPfeile#1{$\rightarrow \hspace{0.4cm} \liPetriTransitionsName{#1} \hspace{0.35cm} \rightarrow$}
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}

%    \end{macrocode}
% \subsection{potenzmengen-konstruktion.sty}
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[1995/12/01]
\ProvidesPackage{lehramt-informatik-potenzmengen-konstruktion}[2021/02/21 Hilfsmakros
einzusetzen bei der Potenzmengen-Konstruktion (Potenzmengen-Algorithmus)]
%    \end{macrocode}

%    \begin{macrocode}
\liLadePakete{formale-sprachen}
\ExplSyntaxOn
%    \end{macrocode}

% \begin{verbatim}
% \def\z#1{
%   \liZustandsMengenSammlungNr{#1}{
%     {
%       {0} {0}
%       {1} {0,1}
%       {2} {0,2}
%       {3} {0,1,3}
%       {4} {0,2,3}
%       {5} {0,3}
%     }
%   }
% }
% \let\s=\liZustandsnameGross

% \begin{tabular}{l|l|l}
% Zustandsmenge & Eingabe $a$ & Eingabe $b$ \\\hline
% \z0 & \z0 & \z1 \\
% \z1 & \z2 & \z1 \\
% \z2 & \z0 & \z3 \\
% \z3 & \z4 & \z3 \\
% \z4 & \z5 & \z3 \\
% \z5 & \z5 & \z3\\
% \end{tabular}
% \end{verbatim}

% \begin{macro}{\liZustandsMengenSammlung}
% |\liZustandsMengenSammlung{nummer}{latex3 str_case:nn}|
%
% \begin{verbatim}
%   \def\z#1{
%     \liZustandsMengenSammlung{#1}{
%       {
%         {0} {z0}
%         {1} {z0, z1}
%         {2} {z0, z1, z2}
%         {3} {z0, z2}
%         {4} {z0, z1, z2, z3}
%         {5} {z0, z3}
%         {6} {z0, z2, z3}
%         {7} {z0, z1, z3}
%       }
%     }
%   }
% \end{verbatim}
%    \begin{macrocode}
\def\liZustandsMengenSammlung#1#2{
  \liZustandsnameGross{#1}
  {
    \footnotesize
    \liPotenzmenge{
      \str_case:nn {#1} #2
    }
  }
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liZustandsMengenSammlungNr}
%    \begin{macrocode}
\def\liZustandsMengenSammlungNr#1#2{
  \liZustandsnameGross{#1}
  {
    \footnotesize
    \liZustandsmengeNr{
      \str_case:nn {#1} #2
    }
  }
}
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}
\ExplSyntaxOff
%    \end{macrocode}

%    \begin{macrocode}

%    \end{macrocode}
% \subsection{pseudo.sty}
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[1995/12/01]
\ProvidesPackage{lehramt-informatik-pseudo}[2020/12/30 Paket zum Setzen
von Pseudo-Code, Hüll-Paket um algorithm2e]
%    \end{macrocode}

% \begin{verbatim}
% \begin{algorithm}[H]
% \KwData{$G = (V,E,w)$: ein zusammenhängender, ungerichteter,
% kantengewichteter Graph kruskal(G)}
% $E'\leftarrow \emptyset $\;
% $L\leftarrow E$\;
% Sortiere die Kanten in L aufsteigend nach ihrem Kantengewicht.\;
% \While{$L \neq \emptyset $}{
%   wähle eine Kante $e\in L$ mit kleinstem Kantengewicht\;
%   entferne die Kante e aus L\;
%   \If{der Graph $(V, E' \cup \lbrace e\rbrace)$ keinen Kreis enthält}{
%     $E'\leftarrow E'\cup \lbrace e\rbrace $\;
%   }
% }
% \KwResult{$M = (V,E')$ ist ein minimaler Spannbaum von G.}
% \caption{Minimaler Spannbaum nach Kruskal\footcite{wiki:kruskal}}
% \end{algorithm}
% \end{verbatim}

% \begin{algorithm}[H]
% \KwData{$G = (V,E,w)$: ein zusammenhängender, ungerichteter,
% kantengewichteter Graph kruskal(G)}
% $E'\leftarrow \emptyset $\;
% $L\leftarrow E$\;
% Sortiere die Kanten in L aufsteigend nach ihrem Kantengewicht.\;
% \While{$L \neq \emptyset $}{
%   wähle eine Kante $e\in L$ mit kleinstem Kantengewicht\;
%   entferne die Kante e aus L\;
%   \If{der Graph $(V, E' \cup \lbrace e\rbrace)$ keinen Kreis enthält}{
%     $E'\leftarrow E'\cup \lbrace e\rbrace $\;
%   }
% }
% \KwResult{$M = (V,E')$ ist ein minimaler Spannbaum von G.}
% \caption{Minimaler Spannbaum nach Kruskal\footcite{wiki:kruskal}}
% \end{algorithm}

%    \begin{macrocode}
\RequirePackage[german,boxruled]{algorithm2e}
%    \end{macrocode}

%    \begin{macrocode}

%    \end{macrocode}
% \subsection{quicksort.sty}
%    \begin{macrocode}
% https://tex.stackexchange.com/a/142634
\NeedsTeXFormat{LaTeX2e}[1995/12/01]
\ProvidesPackage{lehramt-informatik-quicksort}[2020/06/12]

%----------------------------------------------------
% USAGE:
% \QSinitialize{comma, separated, numerical, values}
% \loop
% \QSpivotStep
% \ifnum\value{pivotcount}>0
%   \QSsortStep
% \repeat
%----------------------------------------------------

% xintfrac does not load xinttools, this must be done explicitely if needed as here.
\RequirePackage{xintfrac, xinttools}

\RequirePackage{tikz}

%----------------------------------------------------------------
% FIRST PART: TikZ styles and macros for the actual drawing
\newcounter{cellcount}%  used for coordinates of the node
\newcounter{pivotcount}% when it will remain at zero, will signal the sort is finished.

% Styles defined by Tom Bombaldi. (modified: all share the same size)
% (re-modified \bf -> \bfseries due to extremely annoying warnings from
% KOMA-script which are truly a pain and do not make any sense regarding \bf:
% if I want to use \bf, and know what I am doing, why should I get HARASSED
% by police of LaTeX good conduct ? )
\tikzset{l/.style={minimum width=6mm, minimum height=6mm, draw=black, fill=lime!70!gray},
        o/.style={minimum width=6mm, minimum height=6mm, draw=black, fill=olive!50},
        r/.style={minimum width=6mm, minimum height=6mm, draw=black, fill=magenta!50!black, text=white, font=\bfseries, yshift=1.5mm},
% this is the "b" style as used in the image below
%        b/.style={minimum width=6mm, minimum height=6mm, draw=black, fill=magenta!50!black, text=white, font=\bfseries},
% nicer:
        b/.style={minimum width=6mm, minimum height=6mm, draw=black, fill=white, text=magenta!50!black, font=\bfseries},
        g/.style={minimum width=6mm, minimum height=6mm, draw=black, fill=gray, text=white, font=\bfseries}}

% NOTE the b style was originally the same as the r(aised) style apart from
% not being raised, but I find it nicer with a somewhat different
% specification. I have not updated the images though.

% How the nodes are drawn depending on whether on the left of the pivot value
% or on the right, or is a pivot value, or a raised pivot during selection phase.

\def\DecoLEFT #1{%
   \xintFor* ##1 in {#1} \do
   {\stepcounter{cellcount}\node[o] at (\arabic{cellcount},0) {##1};}%
}

\def\DecoINERT #1{%
   \xintFor* ##1 in {#1} \do
   {\stepcounter{cellcount}\node[g] at (\arabic{cellcount},0) {##1};}%
}

\def\DecoRIGHT #1{%
   \xintFor* ##1 in {#1} \do
   {\stepcounter{cellcount}\node[l] at (\arabic{cellcount},0) {##1};}%
}

\def\DecoLEFTwithPivot #1{\stepcounter{pivotcount}%
     \xintFor* ##1 in {#1} \do
     {\stepcounter{cellcount}%
      \xintifForLast {\node[r]}{\node[o]} at (\arabic{cellcount},0) {##1};}%
}

\def\DecoINERTwithPivot #1{\stepcounter{pivotcount}%
     \xintFor* ##1 in {#1} \do
     {\stepcounter{cellcount}%
      \xintifForLast {\node[b]}{\node[g]} at (\arabic{cellcount},0) {##1};}%
}

\def\DecoRIGHTwithPivot #1{\stepcounter{pivotcount}%
     \xintFor* ##1 in {#1} \do
     {\stepcounter{cellcount}%
      \xintifForLast {\node[r]}{\node[l]} at (\arabic{cellcount},0) {##1};}%
}

%----------------------------------------------------------------
% SECOND PART: the actual sorting routines.

\def\QS@sort@a #1{\expandafter \QS@sort@b \expandafter {\xintLength {#1}}{#1}}
\def\QS@sort@b #1{\ifcase #1
                      \expandafter\QS@sort@empty
                   \or\expandafter\QS@sort@single
                 \else\expandafter\QS@sort@c
                 \fi
}%
\def\QS@sort@empty  #1{}
\def\QS@sort@single #1{\QSIr {#1}}

% This step is to pick the last as pivot.
\def\QS@sort@c #1%
   {\expandafter\QS@sort@d\expandafter {\romannumeral0\xintnthelt {-1}{#1}}{#1}}%

% Here \QSLr, \QSIr, \QSr have been let to \relax.
% The trick with \xintApplyUnbraced is that for example when selecting
% the elements smaller than pivot, if we had been using \xintApply we
% would have had at the minimum an empty brace pair. Thus we use the
% "unbraced" variant, but then the \QS@select@smaller has added in
% anticipation a level of braces.
\def\QS@sort@d #1#2{%
    \QSLr {\xintApplyUnbraced {\QS@select@smaller  {#1}}{#2}}%
    \QSIr {\xintApplyUnbraced {\QS@select@equal    {#1}}{#2}}%
    \QSRr {\xintApplyUnbraced {\QS@select@greater {#1}}{#2}}%
}%
\def\QS@select@smaller #1#2{\xintifLt {#2}{#1}{{#2}}{ }}% space will stop a f-expansion
\def\QS@select@equal   #1#2{\xintifEq {#2}{#1}{{#2}}{ }}% space will stop a f-expansion
\def\QS@select@greater #1#2{\xintifGt {#2}{#1}{{#2}}{ }}% space will stop a f-expansion

%
% NOTE 1: thus, each comparison with the pivot is done three (!) times.
%
% NOTE 2: we may well end up with \QSLr {<empty>} situations. THis is handled
% silently by the \xintFor loops, and also when \QSLr becomes \QS@sort@a, the
% latter must handle correctly an empty argument.

%----------------------------------------------------------------
% THIRD PART: the main macros \QSpivotStep, \QSsortStep and \QSinitialize.

% This draws all with suitable highlighting for the newly chosen pivots
% (which will be shown raised)
\def\QSpivotStep {\let\QSLr\DecoLEFTwithPivot
                \let\QSIr\DecoINERT
                \let\QSIrr\DecoINERT
                \let\QSRr\DecoRIGHTwithPivot
\par\centerline{\rule[1.5mm]{0pt}{8mm}%
            \setcounter{cellcount}{0}\setcounter{pivotcount}{0}%
            \begin{tikzpicture}\QS@list\end{tikzpicture}}
}

% This sorts and then draws, showing where the pivot chosen in the previous
% step go. Next time they will have become "inert". If pivotcount is still at
% zero on exit from \QSpivotStep, then this is the signal to stop before
% executing \QSsortStep.
\def\QSsortStep {\def\QSLr {\noexpand\QS@sort@a}%
                 \def\QSRr {\noexpand\QS@sort@a}%
                 \def\QSIr {\noexpand\QSIrr}%
                 \let\QSIrr\relax
                    \edef\QS@list{\QS@list}%
                \let\QSLr\relax
                \let\QSRr\relax
                \let\QSIr\relax
                    \edef\QS@list{\QS@list}%
                \let\QSLr\DecoLEFT
                \let\QSIr\DecoINERTwithPivot
                \let\QSIrr\DecoINERT
                \let\QSRr\DecoRIGHT
\par\centerline{\rule[1.5mm]{0pt}{8mm}%
            \setcounter{cellcount}{0}%
            \begin{tikzpicture}\QS@list\end{tikzpicture}}
}

\def\QSinitialize #1{%
    % first, we convert the comma separated values into a list of braced items
    % we use an \edef, and anyhow many \edef's will be used later
    \edef\QS@list {\noexpand\QSRr {\xintCSVtoList {#1}}}%
    \let\QSRr\DecoRIGHT
    % The \QSRr marker mutated to draw the last element as
    % pivot and the earlier ones with the suitable style.
    %
    % The list of marked braced items \QS@list is used both for drawing
    % (as here) and for doing the exchange of elements during sort.
    \par\centerline{\rule[1.5mm]{0pt}{8mm}\setcounter{cellcount}{0}%
                \begin{tikzpicture}\QS@list\end{tikzpicture}}
}

%    \end{macrocode}
% \subsection{relationale-algebra.sty}
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[1995/12/01]
\ProvidesPackage{lehramt-informatik-relationale-algebra}[2020/12/11]
%    \end{macrocode}

%    \begin{macrocode}
\RequirePackage{amsmath}
%    \end{macrocode}

%    \begin{macrocode}
\RequirePackage{amssymb}
%    \end{macrocode}

%    \begin{macrocode}
\RequirePackage{tikz}
\usetikzlibrary{positioning}
%    \end{macrocode}

% \begin{macro}{\ojoin}
%    \begin{macrocode}
\def\ojoin{\setbox0=\hbox{$\bowtie$}%
  \rule[-.02ex]{.25em}{.4pt}\llap{\rule[\ht0]{.25em}{.4pt}}}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\leftouterjoin}
%    \begin{macrocode}
\def\leftouterjoin{\mathbin{\ojoin\mkern-5.8mu\bowtie}}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\rightouterjoin}
%    \begin{macrocode}
\def\rightouterjoin{\mathbin{\bowtie\mkern-5.8mu\ojoin}}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\fullouterjoin}
%    \begin{macrocode}
\def\fullouterjoin{\mathbin{\ojoin\mkern-5.8mu\bowtie\mkern-5.8mu\ojoin}}
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}

%    \end{macrocode}
% \subsection{rmodell.sty}
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[1995/12/01]
\ProvidesPackage{lehramt-informatik-rmodell}[2020/09/01
Makros und Umgebungen zum Setzen des Relationenmodells beim Thema
Datenbanken.]
\RequirePackage{soul}
%    \end{macrocode}

% \liLets{
%   a = liAttribut,
%   f = liFremd,
%   p = liPrimaer,
%   r = liRelationMenge,
% }

% \begin{macro}{\liPrimaer}
% |\liPrimaer{text}|: Unterstreichung für den Primärschlüssel
%    \begin{macrocode}
\def\liPrimaer#1{\ul{#1}}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liFremd}
% |\liFremd{text}|: Überstreichung für den Fremdschlüssel
%    \begin{macrocode}
\def\liFremd#1{{\setul{-0.9em}{}\ul{#1}}}
%    \end{macrocode}
% \end{macro}

% \begin{environment}{liRmodell}
% |\begin{liRmodell} \end{liRmodell}|: Kleinere Schrift und
% Schreibmaschinenschrift.
%    \begin{macrocode}
\def\li@Rmodell@Schrift{\footnotesize\ttfamily}
\ExplSyntaxOn
\NewDocumentEnvironment { liRmodell }
{ +b }
{
  \medskip
  {
    \setlength{\parindent}{0pt}
    \li@Rmodell@Schrift#1
  }
  \medskip
} {}
\ExplSyntaxOff
%    \end{macrocode}
% \end{environment}

% \begin{macro}{\liRelationMenge}
% \liLet{r}{liRelationMenge}
% |\liRelationMenge{name}{attribut, attribut}|: Umhüllen der Attribute
% mit geschweiften und dann eckigen Klammern.
%    \begin{macrocode}
\def\liRelationMenge#1#2{
\noindent
#1 : \{[ #2 ]\}
\par
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liAttribut}
% \liLet{a}{liAttribut}
% |\liAttribut{text}|: Gleiche Schrift wie Umgebung |liRmodell|
%    \begin{macrocode}
\def\liAttribut#1{{\li@Rmodell@Schrift#1}}
%    \end{macrocode}
% \end{macro}

% \begin{environment}{liRelationenSchemaFormat}
% Dummy-Umgebung, zum Parsen durch Java gedacht.
%
% \begin{verbatim}
% \begin{liRelationenSchemaFormat}
% Springer(Startnummer*, Nachname, Vorname, Geburtsdatum, Körpergröße)
% Sprung(SID*, Beschreibung, Schwierigkeit)
% springt(SID[Sprung], Startnummer[Springer], Durchgang)
% \end{liRelationenSchemaFormat}
% \end{verbatim}

%    \begin{macrocode}
\NewDocumentEnvironment { liRelationenSchemaFormat }{ +b } {} {}
%    \end{macrocode}
% \end{environment}

%    \begin{macrocode}

%    \end{macrocode}
% \subsection{sortieren.sty}
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[1995/12/01]
\ProvidesPackage{lehramt-informatik-sortieren}[2020/06/10 Schaubilder
für händisches Sortieren bzw. einen Schreibtischlauf setzen]
\RequirePackage{tikz}
\usetikzlibrary{shapes.multipart,positioning}
%    \end{macrocode}

% \begin{macro}{\liVertauschen}
% |\liVertauschen{1 2 >4 <3 5}|: Setze ein Schaubild mit Hilfe
% von TikZ. |<| und |>| werden dazu verwendet, um den Vertauschprozess
% zu visualisieren.
%    \begin{macrocode}
\def\liVertauschen#1{
  \directlua{
    local sortieren = require('lehramt-informatik-sortieren')
    sortieren('#1')
  }
}
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}
% https://tex.stackexchange.com/a/140895
\RequirePackage{forest,xstring}
\usetikzlibrary{calc}

\makeatletter
\pgfmathdeclarefunction{strrepeat}{2}{%
  \begingroup\pgfmathint{#2}\pgfmath@count\pgfmathresult
    \let\pgfmathresult\pgfutil@empty
    \pgfutil@loop\ifnum\pgfmath@count>0\relax
      \expandafter\def\expandafter\pgfmathresult\expandafter{\pgfmathresult#1}%
      \advance\pgfmath@count-1\relax
    \pgfutil@repeat\pgfmath@smuggleone\pgfmathresult\endgroup}
\makeatother

\def\myNodes{}

\ExplSyntaxOn
\newcommand*\sortList[1]{%
  \clist_sort:Nn#1{\int_compare:nNnTF{##1}>{##2}\sort_return_swapped:\sort_return_same:}}
\ExplSyntaxOff

\forestset{
  sort/.code={%
    \pgfmathparse{level()>\forestSortLevel}%
    \ifnum\pgfmathresult=0
      \StrSubstitute{\forestov{content}}{ }{,}[\myList]%
      \sortList\myList
      \StrSubstitute{\myList}{,}{ }[\myList]%
      \pgfmathparse{strrepeat("1",level())}%
      \xappto\myNodes{\noexpand\node at ($(\forestov{name}|-m)!-1!(\forestov{name})$)
        (m\forestov{name}) {\myList}}%
      \pgfmathparse{level()==\forestSortLevel}%
      \ifnum\pgfmathresult=1
        \forestOget{\forestov{@first}}{name}\forestFirst
        \forestOget{\forestov{@last}}{name}\forestLast
        \xappto\myNodes{{[<-]edge (\forestOv{\forestov{@first}}{name})
          \ifx\forestFirst\forestLast\else edge (\forestOv{\forestov{@last}}{name})\fi}}%
      \fi
      \ifnum\forestov{@parent}=0\else
        \xappto\myNodes{edge (m\forestOv{\forestov{@parent}}{name})}%
      \fi
      \gappto\myNodes{;}%
    \fi}}

\forestset{sort level/.code=%
  \pgfmathparse{#1}\let\forestSortLevel\pgfmathresult
  \pgfmathparse{strrepeat("1",\forestSortLevel+1)}\let\forestOnes\pgfmathresult}

%    \end{macrocode}
% \subsection{spalten.sty}
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[1995/12/01]
\ProvidesPackage{lehramt-informatik-spalten}[2020/12/07 Lädt das Paket
„multicol“, damit mehrspaltiger Satz mit Hilfe der Umgebung „multicols“
realisiert werden kann.]
\RequirePackage{multicol}
%    \end{macrocode}

% \begin{macro}{\liSpaltenUmbruch}
% |\liSpaltenUmbruch|: Spezieller Spaltenumbruch, der den Inhalt
% mit Hilfe von |\vfill\strut| nach oben schiebt.
%    \begin{macrocode}
\def\liSpaltenUmbruch{\vfill\strut\columnbreak}
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}

%    \end{macrocode}
% \subsection{struktogramm.sty}
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[1995/12/01]
\ProvidesPackage{lehramt-informatik-struktogramm}[2021/01/31 Lädt das
Paket struktex zum Setzen von Struktogrammen]
\RequirePackage{struktex}

%    \end{macrocode}
% \subsection{syntax.sty}
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[1995/12/01]
\ProvidesPackage{lehramt-informatik-syntax}[2020/06/10 Ein Hüll-Paket um
`minted`, das sich um die Syntax-Hervorhebung des Java-Codes kümmert.]
\RequirePackage{xparse}
%    \end{macrocode}

% Um das Paket |minted| benutzen zu können, muss |pygmentize|
% installiert sein. Außerdem müssen die TeX-Dateien mit der
% Kommandozeilen-Option |--shell-escape| kompiliert werden.

% \liLets{
%   j = liJavaCode,
%   s = liSqlCode,
% }

%    \begin{macrocode}
\ExplSyntaxOn
%    \end{macrocode}

%    \begin{macrocode}
\directlua{
  syntax = require('lehramt-informatik-syntax')
  syntax.importiere_konfiguration('tex_repo_lokaler_pfad', '\LehramtInformatikRepository')
  syntax.importiere_konfiguration('github_domain', '\LehramtInformatikGithubDomain')
  syntax.importiere_konfiguration('github_raw_domain', '\LehramtInformatikGithubRawDomain')
  syntax.importiere_konfiguration('github_tex_repo', '\LehramtInformatikGithubTexRepo')
  syntax.importiere_konfiguration('github_code_repo', '\LehramtInformatikGithubCodeRepo')
  syntax.importiere_konfiguration('git_branch', '\LehramtInformatikGitBranch')
}
%    \end{macrocode}

%    \begin{macrocode}
\RequirePackage{hyperref}
%    \end{macrocode}

%    \begin{macrocode}
\RequirePackage{minted}
% pygmentize -L styles
\usemintedstyle{colorful}
%\BeforeBeginEnvironment{minted}{\begin{mdframed}}
%\AfterEndEnvironment{minted}{\end{mdframed}}
%\setminted{breaklines=true,linenos}
\setminted{
  breaklines=true,
  linenos,
  fontsize=\footnotesize,
}
%    \end{macrocode}

% \begin{macro}{\liJavaCode}
% Im Zeilenfluss einen kurzen Java-Code-Ausschnitt setzen.
% \liLet{j}{liJavaCode}
%    \begin{macrocode}
\def\liJavaCode#1{\mintinline{java}|#1|}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liLatexCode}
% Im Zeilenfluss einen kurzen \LaTeX-Code-Ausschnitt setzen.
%    \begin{macrocode}
\def\liLatexCode#1{\mintinline{latex}|#1|}
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}
\def\li@GithubLink#1#2{
  \begin{flushright}
    \tiny
    Code-Beispiel~auf~Github~ansehen:~
    \href{#1}{\nolinkurl{#2}}
  \end{flushright}
}
%    \end{macrocode}

% \begin{macro}{\liJavaDatei}
% Eine komplette Java-Datei einbinden, die
% Verzeichnis |./Code/src/main/java/org/bschlangaul| liegt.
%    \begin{macrocode}
\NewDocumentCommand{\liJavaDatei}{ O{firstline=3} m }{
  \inputminted[#1]{java}{
    \directlua{
      syntax.drucke_absoluten_pfad('#2', false)
    }
  }
  \li@GithubLink
    {\directlua{syntax.drucke_github_url('#2', false)}}
    {\directlua{syntax.drucke_relativen_repo_pfad('#2', false)}}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liJavaTestDatei}
% Eine komplette Java-Test-Datei einbinden,
% die Verzeichnis |./Code/src/test/java/org/bschlangaul| liegt.
%    \begin{macrocode}
\NewDocumentCommand{\liJavaTestDatei}{ O{firstline=3} m }{
  \inputminted[#1]{java}{
    \directlua{
      syntax.drucke_absoluten_pfad('#2', true)
    }
  }
  \li@GithubLink
    {\directlua{syntax.drucke_github_url('#2', true)}}
    {\directlua{syntax.drucke_relativen_repo_pfad('#2', true)}}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liJavaExamen}
% |\liJavaExamen{66116}{2015}{03}{Kunde}|
% Regulärer Ausdruck zum Konvertieren:
% |\\liJavaDatei(\[.*\])?\{.*examen_(\d{5})_(\d{4})_(\d{2})/(.*)\}|
% |\\liJavaExamen$1{$2}{$3}{$4}{$5}|
%    \begin{macrocode}
\NewDocumentCommand{\liJavaExamen}{ O{firstline=3} m m m m }{
  \inputminted[#1]{java}{
    \directlua{
      syntax.drucke_absoluten_examens_pfad('#2', '#3', '#4', '#5')
    }
  }

  \li@GithubLink
  {\directlua{syntax.drucke_github_examens_url('#2', '#3', '#4', '#5')}}
  {\directlua{syntax.drucke_relativen_examens_repo_pfad('#2', '#3', '#4', '#5')}}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liAssemblerCode}
%    \begin{macrocode}
\def\liAssemblerCode#1{\mintinline{asm}|#1|}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liAssemblerDatei}
% |\liAssemblerDatei{relativer-pfad}|: Relativer Pfad zu einer
% Assembler-Datei.
%    \begin{macrocode}
\NewDocumentCommand{\liAssemblerDatei}{ m }{
  \inputminted{asm}{#1}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liMinispracheDatei}
% |\liMinispracheDatei{relativer-pfad}|: Relativer Pfad zu einer
% Minisprachen-Datei (Hochsprache für die Minimaschine von Albert
% Wiedemann).
%    \begin{macrocode}
\NewDocumentCommand{\liMinispracheDatei}{ m }{
  \inputminted{componentpascal}{#1}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liHaskellCode}
% |\liHaskellCode{haskell}|: Zum Setzen von Haskell-Code.
%    \begin{macrocode}
\def\liHaskellCode#1{\mintinline{haskell}|#1|}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liHaskellDatei}
% |\liHaskellDatei{relativer-pfad}|: Relativer Pfad zu einer
% Haskell-Datei.
%    \begin{macrocode}
\NewDocumentCommand{\liHaskellDatei}{ m }{
  \inputminted{haskell}{#1}
}
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}
\ExplSyntaxOff
%    \end{macrocode}

% \begin{macro}{\liSqlCode}
% |\liHaskellCode{sql}|: Zum Setzen von SQL-Code.
% \liLet{s}{liSqlCode}
%    \begin{macrocode}
\def\liSqlCode#1{\mintinline{sql}|#1|}
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}

%    \end{macrocode}
% \subsection{syntaxbaum.sty}
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[1995/12/01]
\ProvidesPackage{lehramt-informatik-syntaxbaum}[2021/02/14 Zum Setzen von
Syntaxbäumen mit Hilfe des Pakets tikz-qtree]
\RequirePackage{tikz-qtree}

\tikzset{li parsetree/.style={
    every internal node/.style={
      draw,circle
    },
    every leaf node/.style={
      draw,rectangle
    },
  }
}

%    \end{macrocode}
% \subsection{synthese-algorithmus.sty}
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[1995/12/01]
\ProvidesPackage{lehramt-informatik-synthese-algorithmus}[2021/03/19
Hilfsmakros zum Setzen des Synthese-Algroithmuses zur Umformung einer
Relation in die 3. Normalform]
%    \end{macrocode}

%    \begin{macrocode}
\liLadePakete{normalformen,mathe,typographie}
\ExplSyntaxOn
%    \end{macrocode}

% \begin{verbatim}
% \let\schrittE=\liSyntheseUeberErklaerung
% \begin{enumerate}
% \item \schrittE{1}
%
% \begin{enumerate}
% \item \schrittE{1-1}
% \item \schrittE{1-2}
% \item \schrittE{1-3}
% \item \schrittE{1-4}
% \end{enumerate}
%
% \item \schrittE{2}
% \item \schrittE{3}
% \item \schrittE{4}
% \end{enumerate}
% \end{verbatim}

% \begin{liBeispiel}
% \let\schrittE=\liSyntheseUeberErklaerung
% \begin{enumerate}
% \item \schrittE{1}
%
% \begin{enumerate}
% \item \schrittE{1-1}
% \item \schrittE{1-2}
% \item \schrittE{1-3}
% \item \schrittE{1-4}
% \end{enumerate}
%
% \item \schrittE{2}
% \item \schrittE{3}
% \item \schrittE{4}
% \end{enumerate}
% \end{liBeispiel}

% \begin{macro}{\liSyntheseUeberschrift}
% \liLet{schritt}{liSyntheseUeberschrift}
%    \begin{macrocode}
\def\liSyntheseUeberschrift#1{
  {
    \bfseries
    \sffamily
    \str_case:nn {#1} {
      {1} {Kanonische~Überdeckung}
      {1-1} {Linksreduktion}
      {1-2} {Rechtsreduktion}
      {1-3} {Löschen~leerer~Klauseln}
      {1-4} {Vereinigung}
      {2} {Neues~Relationenschema}
      {3} {Hinzufügen~einer~Relation}
      {4} {Entfernung~überflüssiger~Teilschemata}
    }
  }
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liSyntheseErklaerung}
% \liLet{erklaerung}{liSyntheseErklaerung}
%    \begin{macrocode}
\def\li@synthese@erklaerung@texte#1{
  \str_case:nn {#1} {
    {1} {
      Die~kanonische~Überdeckung~-~also~die~kleinst~mögliche~noch~
      äquivalente~Menge~von~funktionalen~Abhängigkeiten~kann~in~vier~
      Schritten~erreicht~werden.
    }
    {1-1} {
      Führe~für~jede~funktionale~Anhängigkeit~
      $\alpha~\rightarrow~\beta~\in~F$~die~Linksreduktion~durch,~
      überprüfe~also~für~alle~
      $A~\in~\alpha$,~ob~$A$~überflüssig~ist,~d.~h.~ob~
      $\beta~\subseteq~\liAttributHuelle{F,~\alpha~-~A}.$
    }
    {1-2} {
      Führe~für~jede~(verbliebene)~funktionale~Abhängigkeit~$\alpha~
      \rightarrow~\beta$~die~Rechtsreduktion~durch,~überprüfe~also~für~
      alle~$B~\in~\beta$,~ob~$B~\in~\liAttributHuelle{F~-~(\alpha~
      \rightarrow~\beta)~\cup~(\alpha~\rightarrow~(\beta~-~B)),~
      \alpha}$~gilt.~In~diesem~Fall~ist~B~auf~der~rechten~Seite~
      überflüssig~und~kann~eleminiert~werden,~\dh~$\alpha~
      \rightarrow~\beta$~wird~durch~$\alpha~\rightarrow~(\beta~-~B)$~
      ersetzt.
    }
    {1-3} {
      Entferne~die~funktionalen~Abhängigkeiten~der~Form~$\alpha~
      \rightarrow~\emptyset$,~die~im~2.~Schritt~möglicherweise~
      entstanden~sind.
    }
    {1-4} {
      Fasse~mittels~der~Vereinigungsregel~funktionale~Abhängigkeiten~
      der~Form~$\alpha~\rightarrow~\beta\sb{1},~\dots,~\alpha~\rightarrow~
      \beta\sb{n}$,~so~dass~$\alpha~\rightarrow~\beta\sb{1}~\cup~\dots~\cup~
      \beta\sb{n}$~verbleibt.
    }
    % Kemper Seite 197
    {2} {
      Erzeuge~für~jede~funktionale~Abhängigkeit~$\alpha~\rightarrow~
      \beta~\in~F\sb{c}$~ein~Relationenschema~$\mathcal{R}\sb{\alpha}~
      :=~\alpha~\cup~\beta$.
    }
    {3} {
      Falls~eines~der~in~Schritt~2.~erzeugten~Schemata~$R\sb{\alpha}$~
      einen~Schlüsselkandidaten~von~$\mathcal{R}$~bezüglich~$F\sb{c}$~
      enthält,~sind~wir~fertig,~sonst~wähle~einen~Schlüsselkandidaten~
      $\mathcal{K}~\subseteq~\mathcal{R}$~aus~und~definiere~folgendes~
      zusätzliche~Schema:~$\mathcal{R}\sb{\mathcal{K}}~:=~\mathcal{K}$~
      und~$\mathcal{F}\sb{\mathcal{K}}~:=~\emptyset$
    }
    {4} {
      Eliminiere~diejenigen~Schemata~$R\sb{\alpha}$,~die~in~einem~
      anderen~Relationenschema~$R\sb{\alpha'}$~enthalten~sind,~d.~h.~
      $R\sb{\alpha}~\subseteq~R\sb{\alpha'}$.
    }
  }
}
\def\liSyntheseErklaerung#1{
  {
    \itshape
    \footnotesize
    \liParagraphMitLinien{\li@synthese@erklaerung@texte{#1}}
  }
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liSyntheseUeberErklaerung}
% \liLet{schrittE}{liSyntheseUeberErklaerung}
%    \begin{macrocode}
\def\liSyntheseUeberErklaerung#1{
  \liSyntheseUeberschrift{#1}\par
  \liSyntheseErklaerung{#1}
}
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}
\ExplSyntaxOff

%    \end{macrocode}
% \subsection{tabelle.sty}
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[1995/12/01]
\ProvidesPackage{lehramt-informatik-tabelle}[2020/12/05 Lädt das Paket tabluarx]
\RequirePackage{tabularx}

%    \end{macrocode}
% \subsection{typographie.sty}
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[1995/12/01]
\ProvidesPackage{lehramt-informatik-typographie}[2021/03/20 Typographische Makros,
die das Erscheinungsbild verändern. Die Schriftdefinition sind in
formatierung.sty definiert.]

\ExplSyntaxOn
%\RequirePackage{wasysym}
%    \end{macrocode}

% \begin{macro}{\liErledigt}
% |\liErledigt|: \liErledigt
%    \begin{macrocode}
\let\liErledigt=\CheckedBox
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liNichtsZuTun}
% |\liNichtsZuTun|: \liNichtsZuTun
%    \begin{macrocode}
\def\liNichtsZuTun{\liErledigt{}~Nichts~zu~tun}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liParagraphMitLinien}
% |\liParagraphMitLinien{Lorem ipsum...}|:
%
% \liParagraphMitLinien{Lorem ipsum dolor sit, ipsum dolor sit, ipsum
% dolor sit, ipsum dolor sit, ipsum dolor sit, ipsum dolor sit}
%    \begin{macrocode}
\def\liParagraphMitLinien#1{
  \noindent
  \vrule height 2pt depth -1.6pt width 0.4cm
  \enspace
  #1
  \enspace
  \leaders\vrule height 2pt depth -1.6pt \hfill \null
  \par
  \medskip
}
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}
\ExplSyntaxOff

%    \end{macrocode}
% \subsection{uml.sty}
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[1995/12/01]
\ProvidesPackage{lehramt-informatik-uml}[2020/06/13 Ein Hüll-Paket um
`tikz-uml', das einige Design-Einstellungen vornimmt und manche
Erweiterung bereitstellt]
%    \end{macrocode}

%    \begin{macrocode}
\RequirePackage{tikz-uml}
\RequirePackage{tikz-uml-activity}
% Not compatible with wasysym
%\RequirePackage{mathabx}
\RequirePackage{wasysym}
\usetikzlibrary{positioning}
%    \end{macrocode}

%    \begin{macrocode}
\tikzumlset{
  fill class=white!0,
  font=\footnotesize,
  fill object=white!0,
  fill note=white!0,
  fill state=white!0,
  % Use case
  fill usecase=white!0,
  fill system=white!0,
}
%    \end{macrocode}

% \begin{liBeispiel}

% \begin{tikzpicture}
% \umlclass{TicketHandel}{
%   \umlstatic{- system: TicketHandel} \\
%   - verkaufte Tickets : int
% }{
%   - TicketHandel() \\
%   \umlstatic{+ gibInstanz(): TicketHandel} \\
%   +ticketKaufen(kategorie: Kategorie) : Ticket \\
%   + gibVerkaufteTickets() : int
% }

% \umlclass[y=-4]{TicketDruckerei}{}{
%   + erstelleTicket(kategorie: Kategorie): Ticket
% }

% \umlclass[x=8,y=1,type=enumeration]{Kategorie}{
%   ERWACHSEN\\
%   KIND
% }{}

% \umlclass[x=8,y=-1.5,type=interface]{Ticket}{}{
%   gibPreis(): double
% }

% \umlclass[x=6,y=-4]{ErwachsenenTicket}{
%   \umlstatic{- preis: double = 15.0}
% }{}
% \umlclass[x=10,y=-4]{KinderTicket}{
%   \umlstatic{- preis: double = 10.0}
% }{}

% \umlVHVinherit{ErwachsenenTicket}{Ticket}
% \umlVHVinherit{KinderTicket}{Ticket}

% \umlHVHdep[stereo=use,pos stereo=1.8,anchor2=-150]{TicketDruckerei}{Ticket}
% \umldep[stereo=use,anchor1=-25]{TicketHandel}{Ticket}

% \umlVHVdep[arm1=-1cm,stereo=use,anchor1=-30,  pos stereo=1.5]{TicketDruckerei}{ErwachsenenTicket}
% \umlVHVdep[arm1=-1.5cm,stereo=use,anchor1=-150, pos stereo=1.5]{TicketDruckerei}{KinderTicket}

% \umluniassoc[arg1=,mult2=1,arg2=- druckerei,name=benutzt]{TicketHandel}{TicketDruckerei}
% \liUmlLeserichtung[pos=below left,dir=down,distance=0cm]{benutzt}
% \end{tikzpicture}
% \end{liBeispiel}

% \begin{macro}{\liUmlLeserichtung}
%    \begin{macrocode}
\NewDocumentCommand{ \liUmlLeserichtung } { O{dir=right} m } {
  \def\@liDirLeft{}
  \def\@liDirRight{ \RIGHTarrow}
  \pgfkeys{/lese/dir/.is choice}
  \pgfkeys{/lese/dir/up/.code={\def\@liDirRight{ \UParrow}}}
  \pgfkeys{/lese/dir/down/.code={\def\@liDirRight{ \DOWNarrow}}}
  \pgfkeys{/lese/dir/left/.code={\@liDirRight{}\def\@liDirLeft{\LEFTarrow }}}
  \pgfkeys{/lese/dir/right/.code={\def\@liDirRight{ \RIGHTarrow}}}

  \def\@liPos{above}
  \pgfkeys{/lese/pos/.code={\def\@liPos{##1}}}

  \def\@liDistance{0cm}
  \pgfkeys{/lese/distance/.code={\def\@liDistance{##1}}}

  \pgfkeys{/lese/.cd,#1}

  \node[\@liPos = \@liDistance of #2-middle] {
    \@liDirLeft{\footnotesize#2}\@liDirRight
  };
}
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}

%    \end{macrocode}
% \subsection{vollstaendige-induktion.sty}
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[1995/12/01]
\ProvidesPackage{lehramt-informatik-vollstaendige-induktion}[2021/07/01
Hilfsmakros zum Setzen der Vollständigen Induktion, vor allem die
Überschriften für die einzelnen Schritte]
%    \end{macrocode}

% Lade häufig benötigte Pakete
%    \begin{macrocode}
\RequirePackage{lehramt-informatik-typographie}
\RequirePackage{lehramt-informatik-mathe}
\RequirePackage{lehramt-informatik-syntax}
%    \end{macrocode}

%    \begin{macrocode}
\ExplSyntaxOn
%    \end{macrocode}

% \begin{macro}{\liInduktionAnfang}
%    \begin{macrocode}
\def\liInduktionAnfang{
  \liPseudoUeberschrift{Induktionsanfang}

  % https://de.wikibooks.org/wiki/Mathe_für_Nicht-Freaks:_Vollständige_Induktion
  \liParagraphMitLinien{
    Beweise,~dass~$A(1)$~eine~wahre~Aussage~ist.
  }
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liInduktionVoraussetzung}
%    \begin{macrocode}
\def\liInduktionVoraussetzung{
  \liPseudoUeberschrift{Induktionsvoraussetzung}

  % https://de.wikibooks.org/wiki/Mathe_für_Nicht-Freaks:_Vollständige_Induktion
  \liParagraphMitLinien{
    Die~Aussage~$A(k)$~ist~wahr~für~ein~beliebiges~$k \in \mathbb{N}$.
  }
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liInduktionSchritt}
%    \begin{macrocode}
\def\liInduktionSchritt{
  \liPseudoUeberschrift{Induktionsschritt}

  % https://de.wikibooks.org/wiki/Mathe_für_Nicht-Freaks:_Vollständige_Induktion
  \liParagraphMitLinien{
    Beweise,~dass~wenn~$A(n=k)$~wahr~ist,~
    auch~$A(n=k+1)$~wahr~sein~muss.
  }
}
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}
\ExplSyntaxOff
%    \end{macrocode}

%    \begin{macrocode}

%    \end{macrocode}
% \subsection{wasserfall.sty}
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[1995/12/01]
\ProvidesPackage{lehramt-informatik-wasserfall}[2020/06/10]
\RequirePackage{tikz}
\tikzset{wasserfall/.style={
  >=stealth,
  node distance = 2mm and -8mm,
  start chain = A going below right,
  every node/.style = {
    draw,
    text width=24mm,
    minimum height=12mm,
    align=center,
    inner sep=1mm,
    fill=white,
    drop shadow={fill=black},
    on chain=A
  },
}}
\usetikzlibrary{chains,positioning,shadows}

%    \end{macrocode}
% \subsection{wpkalkuel.sty}
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[1995/12/01]
\ProvidesPackage{lehramt-informatik-wpkalkuel}[2020/06/13]
%    \end{macrocode}

% \liLets{
%   wp = liWpKalkuel,
%   equivalent = liWpEquivalent,
%   erklaerung = liWpErklaerung,
% }

%    \begin{macrocode}
\RequirePackage{amsmath}
%    \end{macrocode}

%    \begin{macrocode}
\ExplSyntaxOn
%    \end{macrocode}

% \begin{macro}{\liWpKalkuel}
% \liLet{wp}{liWpKalkuel}
%    \begin{macrocode}
\def\liWpKalkuelOhneMathe#1#2{
  \text{wp}(\texttt{\scriptsize"#1"},\thinspace #2)
}
\def\liWpKalkuel#1#2{
  \ifmmode
    \liWpKalkuelOhneMathe{#1}{#2}
  \else
    $\liWpKalkuelOhneMathe{#1}{#2}$
  \fi
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\MatheEnv}
%    \begin{macrocode}
\def\MatheEnv#1{
  \medskip

  \hspace{1em}#1

  \medskip
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\Mathe}
%    \begin{macrocode}
\def\Mathe#1{
  \MatheEnv{$#1$}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liWpEquivalent}
% \liLet{equivalent}{liWpEquivalent}
%    \begin{macrocode}
\def\liWpEquivalent#1{
  \MatheEnv{$\equiv$\hspace{1em}$#1$}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liWpErklaerung}
% \liLet{erklaerung}{liWpErklaerung}
%    \begin{macrocode}
\newlength{\@Skip@Erklaerung@Reset}
\def\liWpErklaerung#1{
  \setlength{\@Skip@Erklaerung@Reset}{\leftskip}
  \setlength{\leftskip}{0.5cm}

  \par
  \noindent
  {
    \scriptsize
    #1
  }
  \par

  \setlength{\leftskip}{\@Skip@Erklaerung@Reset}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liWpErklaerungVerzweigung}
%    \begin{macrocode}
\def\liWpErklaerungVerzweigung{
  $\liWpKalkuelOhneMathe{if~\{~b~\}~then~\{~a1~\}~else~\{~a2~\}}{Q}
  \equiv
  (b \land \liWpKalkuelOhneMathe{a1}{Q})
  \lor
  (\neg b \land \liWpKalkuelOhneMathe{a2}{Q})$
}
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}
\ExplSyntaxOff
%    \end{macrocode}

%    \begin{macrocode}

%    \end{macrocode}
%\Finale
