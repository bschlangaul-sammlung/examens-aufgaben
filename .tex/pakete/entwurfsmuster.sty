\NeedsTeXFormat{LaTeX2e}[1995/12/01]
\ProvidesPackage{bschlangaul-entwurfsmuster}[2021/05/06
Hilfsmakros zum Setzen von Entwurfsmustern / Design Patterns]
%    \end{macrocode}
%
% \subsubsection{Namensschema der Entwurfsmuster-Makros:}
%
% Präfix: |\bEntwurfs| +
% Name des Entwurfsmuster |DeutscherName| +
% Suffix: (|Uml|, |Akteure|, |Code|, |ohne|)
%
% \subsubsection{Reihenfolge}
%
% \begin{enumerate}
% \item |Beschreibung|
% Kurze Beschreibung des Entwurfsmusters, z. B |\bEntwurfsEinzelstueckBeschreibung|
% \item |Uml|:
% Uml-Klassendiagramm, z. B |\bEntwurfsEinzelstueckUml|
% \item |Akteure|:
% Akteure, beteiligte Klassen, z. B |\bEntwurfsEinzelstueckAkteure|
% \item |Code|:
% Allgemeines Code-Beispiel, z. B |\bEntwurfsEinzelstueckCode|
% \item |ohne|:
% Ohne Suffix, Bündelung der einzelnen Makros eines Entwurfsmusters
% |\bEntwurfsEinzelstueckAkteure|
% \end{enumerate}

%    \begin{macrocode}
\RequirePackage{bschlangaul-uml}
%    \end{macrocode}

% \begin{macro}{\li@EntwurfsCodeAllgemein}
% Allgemeine Code-Beispiele zu den UML-Diagrammen und Stellvertretern
%    \begin{macrocode}
\RequirePackage{bschlangaul-syntax}
\def\li@EntwurfsCode#1#2{
  \bJavaDatei{entwurfsmuster/#1/allgemein/#2}
}
%    \end{macrocode}
% \end{macro}

% \subsubsection{Abstrakte Fabrik (Abstract Factory)}

% \begin{macro}{\bEntwurfsAbstrakteFabrikBeschreibung}
%    \begin{macrocode}
\def\bEntwurfsAbstrakteFabrikBeschreibung{
  Es wird eine Schnittstelle bereitgestellt, um \emph{Familien
  verbundener oder abhängiger Objekte} zu erstellen, ohne die konkreten
  Klassen zu spezifizieren.\footcite[Seite 25]{eilebrecht}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bEntwurfsAbstrakteFabrikUml}
% \begin{bBeispiel}
% \bEntwurfsAbstrakteFabrikUml
% \end{bBeispiel}
%    \begin{macrocode}
\def\bEntwurfsAbstrakteFabrikUml{
  \begin{tikzpicture}
    \umlclass[type=abstract]{AbstrakteFabrik}{}{
      erzeugeProduktA()\\
      erzeugeProduktB()\\
    }
    \umlclass[below left=1cm and -1.5cm of AbstrakteFabrik]{Fabrik1}{}{
      erzeugeProduktA()\\
      erzeugeProduktB()\\
    }
    \umlclass[below right=1cm and -1.5cm of AbstrakteFabrik]{Fabrik2}{}{
      erzeugeProduktA()\\
      erzeugeProduktB()\\
    }
    \umlVHVinherit{Fabrik1}{AbstrakteFabrik}
    \umlVHVinherit{Fabrik2}{AbstrakteFabrik}

    \umlsimpleclass[right=3cm of AbstrakteFabrik,type=abstract]{AbstraktesProduktA}
    \umlsimpleclass[below left=1cm and -1cm of AbstraktesProduktA]{ProduktA1}
    \umlsimpleclass[below right=1cm and -1cm of AbstraktesProduktA]{ProduktA2}
    \umlVHVinherit{ProduktA1}{AbstraktesProduktA}
    \umlVHVinherit{ProduktA2}{AbstraktesProduktA}

    \umlsimpleclass[above right=0cm and 1cm of AbstraktesProduktA]{Klient}

    \umlsimpleclass[below=4.5cm of AbstraktesProduktA,type=abstract]{AbstraktesProduktB}
    \umlsimpleclass[below left=1cm and -1cm of AbstraktesProduktB]{ProduktB1}
    \umlsimpleclass[below right=1cm and -1cm of AbstraktesProduktB]{ProduktB2}
    \umlVHVinherit{ProduktB1}{AbstraktesProduktB}
    \umlVHVinherit{ProduktB2}{AbstraktesProduktB}

    \umlVHVdep[arm1=-1.3cm,arm2=-1cm]{Fabrik1}{ProduktA1}
    \umlVHVdep[arm2=-1cm]{Fabrik1}{ProduktB1}

    \umlVHVdep[arm1=-1.8cm,arm2=-1.5cm]{Fabrik2}{ProduktA2}
    \umlVHVdep[arm2=-1.5cm]{Fabrik2}{ProduktB2}

    \umluniassoc[anchor2=25]{Klient}{AbstrakteFabrik}
    \umlVHuniassoc[arm1=-1cm]{Klient}{AbstraktesProduktA}
    \umlVHuniassoc{Klient}{AbstraktesProduktB}
  \end{tikzpicture}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bEntwurfsAbstrakteFabrikCode}
%    \begin{macrocode}
\def\bEntwurfsAbstrakteFabrikCode{
  \li@EntwurfsCode{abstrakte_fabrik}{Produkte}
  \li@EntwurfsCode{abstrakte_fabrik}{AbstrakteFabrik}
  \li@EntwurfsCode{abstrakte_fabrik}{Klient}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bEntwurfsAbstrakteFabrik}
%    \begin{macrocode}
\def\bEntwurfsAbstrakteFabrik{
  \bEntwurfsAbstrakteFabrikBeschreibung

  \bEntwurfsAbstrakteFabrikUml

  \bEntwurfsAbstrakteFabrikCode
}
%    \end{macrocode}
% \end{macro}

% \subsubsection{Adapter}

% \begin{macro}{\bEntwurfsAdapterUml}
% \begin{bBeispiel}
% \bEntwurfsAdapterUml
% \end{bBeispiel}
%    \begin{macrocode}
\def\bEntwurfsAdapterUml{
  \begin{tikzpicture}
    \umlsimpleclass[x=1,y=3]{Klient}{}{}
    \umlclass[x=4,y=3,type=interface]{Ziel}{}{agiere()}
    \umlclass[x=4,y=0]{Adapter}{}{agiere()}
    \umlclass[x=8,y=1.5]{Dienst}{}{agiereSpeziell()}

    \umlreal{Adapter}{Ziel}
    \umluniassoc{Klient}{Ziel}
    \umlinherit{Adapter}{Dienst}

    \umlnote[x=7,y=-1,width=2cm]{Adapter}{agiereSpeziell()}
  \end{tikzpicture}
  \footcite[so ähnlich wie GoF]{wiki:adapter}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bEntwurfsAdapterAkteure}
% \begin{bBeispiel}
% \bEntwurfsAdapterAkteure
% \end{bBeispiel}
%    \begin{macrocode}
\def\bEntwurfsAdapterAkteure{
  \begin{description}

    \item[Ziel (Target)]

    Das Ziel definiert die Schnittstelle, die der Klient nutzen kann.

    \item[Klient (Client)]

    Der Klient nutzt Dienste über inkompatible Schnittstellen und greift
    dabei auf adaptierte Schnittstellen zurück.

    \item[Dienst (Adaptee)]

    Der Dienst bietet wiederzuverwendende Dienstleistungen mit fest
    definierter Schnittstelle an.

    \item[Adapter]

    Der Adapter adaptiert die Schnittstelle des Dienstes auf die
    Schnittstelle zum Klienten.\footcite{wiki:adapter}

  \end{description}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bEntwurfsAdapterCode}
%    \begin{macrocode}
\def\bEntwurfsAdapterCode{
  \li@EntwurfsCode{adapter}{Dienst}
  \li@EntwurfsCode{adapter}{Ziel}
  \li@EntwurfsCode{adapter}{Adapter}
  \li@EntwurfsCode{adapter}{Klient}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bEntwurfsAdapter}
%    \begin{macrocode}
\def\bEntwurfsAdapter{
  \bEntwurfsAdapterUml
  \bEntwurfsAdapterAkteure
  \bEntwurfsAdapterCode
}
%    \end{macrocode}
% \end{macro}

% \subsubsection{Beobachter (Observer)}

% \begin{macro}{\bEntwurfsBeobachterUml}
% \begin{bBeispiel}
% \bEntwurfsBeobachterUml
% \end{bBeispiel}
%    \begin{macrocode}
\def\bEntwurfsBeobachterUml{
  \begin{tikzpicture}
    \umlclass[x=0,y=0,type=abstract]{Gegenstand}{}{
      + registriere(beobachter: Beobachter): void\\
      + entferne(beobachter: Beobachter): void\\
      + benachrichtige(beobachter: Beobachter): void\\
    }
    \umlclass[x=0,y=-3]{KonkreterGegenstand}{}{
      + setzteZustand(zustand: Zustand): void
    }
    \umlinherit{KonkreterGegenstand}{Gegenstand}

    \umlclass[x=8,y=0,type=interface]{Beobachter}{}{
      + aktualisiere(zustand: Zustand): void
    }
    \umlclass[x=8,y=-3]{KonkreterBeobachter}{}{
      + aktualisiere(zustand: Zustand): void
    }
    \umlreal{KonkreterBeobachter}{Beobachter}

    \umlHVHaggreg[arg1=beobachter,pos1=0.8,mult2=*,pos2=2.5]
    {KonkreterGegenstand}{Beobachter}
  \end{tikzpicture}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bEntwurfsBeobachterAkteure}
% \begin{bBeispiel}
% \bEntwurfsBeobachterAkteure
% \end{bBeispiel}
%    \begin{macrocode}
\def\bEntwurfsBeobachterAkteure{
  \begin{description}
    \item[Gegenstand / Subjekt (Subject / Observable)]

    Ein Subjekt (beobachtbares Objekt, auf Englisch publisher, also
    „Veröffentlicher“, genannt) hat eine Liste von Beobachtern, ohne
    deren konkrete Typen zu kennen. Es bietet eine Schnittstelle zur An-
    und Abmeldung von Beobachtern und eine Schnittstelle zur
    Benachrichtigung von Beobachtern über Änderungen an.\footcite[Seite
    251]{gof}

    \item[Beobachter (Observer)]

    Die Beobachter (auf Englisch auch subscriber, also „Abonnent“,
    genannt) definieren eine Aktualisierungsschnittstelle.

    \item[konkreter/s Gegenstand / Subjekt (ConcreteSubject / ConcreteObservable)]

    Ein konkretes Subjekt (konkretes, beobachtbares Objekt) speichert
    den relevanten Zustand und benachrichtigt alle Beobachter bei
    Zustandsänderungen über deren Aktualisierungsschnittstelle. Es
    verfügt über eine Schnittstelle zur Erfragung des aktuellen
    Zustands.

    \item[Konkrete Beobachter (ConcreteObserver)]

    Konkrete Beobachter verwalten die Referenz auf ein konkretes
    Subjekt, dessen Zustand sie beobachten und speichern und dessen
    Zustand konsistent ist. Sie implementieren eine
    Aktualisierungsschnittstelle unter Verwendung der
    Abfrageschnittstelle des konkreten Subjekts.
    \footcite{wiki:beobachter}
  \end{description}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bEntwurfsBeobachterCode}
%    \begin{macrocode}
\def\bEntwurfsBeobachterCode{
  \li@EntwurfsCode{beobachter}{Gegenstand}
  \li@EntwurfsCode{beobachter}{KonkreterGegenstand}
  \li@EntwurfsCode{beobachter}{Beobachter}
  \li@EntwurfsCode{beobachter}{KonkreterBeobachterA}
  \li@EntwurfsCode{beobachter}{KonkreterBeobachterB}
  \li@EntwurfsCode{beobachter}{Klient}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bEntwurfsBeobachter}
%    \begin{macrocode}
\def\bEntwurfsBeobachter{
  \bEntwurfsBeobachterUml
  \bEntwurfsBeobachterAkteure
  \bEntwurfsBeobachterCode
}
%    \end{macrocode}
% \end{macro}

% \subsubsection{Dekorierer (Decorator)}

% \begin{macro}{\bEntwurfsDekoriererUml}
% \begin{bBeispiel}
% \bEntwurfsDekoriererUml
% \end{bBeispiel}
%    \begin{macrocode}
\def\bEntwurfsDekoriererUml{
  \begin{tikzpicture}
    \umlclass[type=abstract]{Komponente}{}{agiere()}
    \umlclass[below left=1.5cm and 0cm of Komponente]{KonkreteKomponente}{}{agiere()}
    \umlclass[below right=1.5cm and 0cm of Komponente,type=abstract]{Dekorierer}{}{agiere()}

    \umlVHVreal{KonkreteKomponente}{Komponente}
    \umlVHVreal{Dekorierer}{Komponente}

    \umlclass[below left=1.5cm and 0cm of Dekorierer]{KonkreterDekoriererA}{}{agiere()}
    \umlclass[below right=1.5cm and 0cm of Dekorierer]{KonkreterDekoriererB}{}{agiere()}

    \umlVHVinherit{KonkreterDekoriererA}{Dekorierer}
    \umlVHVinherit{KonkreterDekoriererB}{Dekorierer}

    \umlHVHaggreg[arm1=2cm]{Dekorierer}{Komponente}
    \footcite{wiki:dekorierer}
  \end{tikzpicture}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bEntwurfsDekoriererCode}
%    \begin{macrocode}
\def\bEntwurfsDekoriererCode{
  \li@EntwurfsCode{dekorierer}{Komponente}
  \li@EntwurfsCode{dekorierer}{KonkreteKomponente}
  \li@EntwurfsCode{dekorierer}{Dekorierer}
  \li@EntwurfsCode{dekorierer}{KonkreterDekoriererA}
  \li@EntwurfsCode{dekorierer}{KonkreterDekoriererB}
  \li@EntwurfsCode{dekorierer}{Klient}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bEntwurfsDekorierer}
%    \begin{macrocode}
\def\bEntwurfsDekorierer{
  \bEntwurfsDekoriererUml
  \bEntwurfsDekoriererAkteure
  \bEntwurfsDekoriererCode
}
%    \end{macrocode}
% \end{macro}

% \subsubsection{Einfache Fabrik (Simple Factory)}

% \begin{macro}{\bEntwurfsEinfacheFabrikUml}
% Quelle: \url{https://refactoring.guru/design-patterns/factory-comparison}
% \begin{bBeispiel}
% \bEntwurfsEinfacheFabrikUml
% \end{bBeispiel}
%    \begin{macrocode}
\def\bEntwurfsEinfacheFabrikUml{
  \begin{tikzpicture}
    \umlsimpleclass[type=abstract]{Produkt}
    \umlsimpleclass[below left=1cm and -0.65cm of Produkt]{ProduktA}
    \umlsimpleclass[below right=1cm and -0.65cm of Produkt]{ProduktB}
    \umlVHVinherit{Produkt}{ProduktA}
    \umlVHVinherit{Produkt}{ProduktB}
    \umlclass[below right=0cm and 1.5cm of Produkt]{EinfacheFabrik}{
    }{
      \umlstatic{erzeuge(diskriminator): Produkt}\\
    }
    \umlVHVdep[arm1=-1.5cm]{EinfacheFabrik}{ProduktA}
    \umlVHVdep[arm1=-1.5cm]{EinfacheFabrik}{ProduktB}
  \end{tikzpicture}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bEntwurfsEinfacheFabrikAkteure}
% Quelle: frei überstetzt aus GoF
% \begin{bBeispiel}
% \bEntwurfsEinfacheFabrikAkteure
% \end{bBeispiel}
%    \begin{macrocode}
\def\bEntwurfsEinfacheFabrikAkteure{
  \begin{description}
    \item[EinfacheFabrik]

    Eine Klasse mit einer Erzeugunsmethode, die über eine größere
    Bedingung verschiedene Objekt instanziert.

    \item[Produkt]

    Eine abstrakte Klasse, die von den konkreten Produkten geerbt wird.

    \item[KonkretesProdukt]

    Ein konkretes Produkt, das von der einfachen Fabrik erzeugt wird.
  \end{description}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bEntwurfsEinfacheFabrik}
%    \begin{macrocode}
\def\bEntwurfsEinfacheFabrik{
  \bEntwurfsEinfacheFabrikUml
  \bEntwurfsEinfacheFabrikAkteure
}
%    \end{macrocode}
% \end{macro}

% \subsubsection{Einzelstück (Singleton)}

% \begin{macro}{\bEntwurfsEinzelstueckBeschreibung}
%    \begin{macrocode}
\def\bEntwurfsEinzelstueckBeschreibung{
  Stellt sicher, dass nur \emph{genau eine Instanz einer Klasse} erzeugt
  wird.\footcite[Seite 38]{eilebrecht}
}
  %    \end{macrocode}
  % \end{macro}

% \begin{macro}{\bEntwurfsEinzelstueckUml}
% Quelle nach der deutschen Wikipedia
% \begin{bBeispiel}
% \bEntwurfsEinzelstueckUml
% \end{bBeispiel}
%    \begin{macrocode}
\def\bEntwurfsEinzelstueckUml{
  \begin{tikzpicture}
    \umlclass{Einzelstück}{
    \umlstatic{- instanz: Einzelstück}\\
    }{
    - Einzelstück()\\
    + gibInstanz(): Einzelstück
    }
  \end{tikzpicture}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bEntwurfsEinzelstueckAkteure}
% Quelle: frei überstetzt aus GoF
% \begin{bBeispiel}
% \bEntwurfsEinzelstueckAkteure
% \end{bBeispiel}
%    \begin{macrocode}
\def\bEntwurfsEinzelstueckAkteure{
  \begin{description}
    \item[Einzelstück (Singleton)]

    stellt eine statische Methode bereit, mit deren Hilfe die Klienten
    nur auf eine einzige Instanz der Klasse zugreifen können.
  \end{description}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bEntwurfsEinzelstueckCode}
%    \begin{macrocode}
\def\bEntwurfsEinzelstueckCode{
  \li@EntwurfsCode{einzelstueck}{Einzelstueck}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bEntwurfsEinzelstueck}
%    \begin{macrocode}
\def\bEntwurfsEinzelstueck{
  \bEntwurfsEinzelstueckBeschreibung

  \bEntwurfsEinzelstueckUml

  \bEntwurfsEinzelstueckAkteure

  \bEntwurfsEinzelstueckCode
}
%    \end{macrocode}
% \end{macro}

% \subsubsection{Erbauer (Builder)}

% \begin{macro}{\bEntwurfsErbauerUml}
% Quelle nach der deutschen Wikipedia
% \begin{bBeispiel}
% \bEntwurfsErbauerUml
% \end{bBeispiel}
%    \begin{macrocode}
\def\bEntwurfsErbauerUml{
  \begin{tikzpicture}
    \umlsimpleclass[x=7,y=0]{Produkt}{}{}
    \umlclass[x=4,y=3,type=interface]{Erbauer}{}{+ baueTeil()}
    \umlclass[x=4,y=0]{KonkreterErbauer}{}{
      + baueTeil()\\
      gibErgebnis()}
    \umlclass[x=0,y=3]{Direktor}{}{baue()}

    \umluniaggreg[arg2=erbauer,pos2=0.7,mult2=1]{Direktor}{Erbauer}
    \umluniassoc{KonkreterErbauer}{Produkt}
    \umlinherit{KonkreterErbauer}{Erbauer}

  \umlnote[x=0,y=0,width=3cm]{Direktor}{
    foreach item in structure\\
    erbauer.baueTeil()
  }
  \end{tikzpicture}
  \footcite{wiki:erbauer}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bEntwurfsErbauerAkteure}
% Quelle: deutsche Wikipedia
% \begin{bBeispiel}
% \bEntwurfsErbauerAkteure
% \end{bBeispiel}
%    \begin{macrocode}
\def\bEntwurfsErbauerAkteure{
  \begin{description}
    \item[Erbauer]

    Der Erbauer spezifiziert eine abstrakte Schnittstelle zur Erzeugung der
    Teile eines komplexen Objektes.

    \item[KonkreterErbauer]

    Der konkrete Erbauer erzeugt die Teile des komplexen Objekts durch
    Implementierung der Schnittstelle. Außerdem definiert und verwaltet er
    die von ihm erzeugte Repräsentation des Produkts. Er bietet auch eine
    Schnittstelle zum Auslesen des Produkts.

    \item[Direktor]

    Der Direktor konstruiert ein komplexes Objekt unter Verwendung der
    Schnittstelle des Erbauers. Der Direktor arbeitet eng mit dem Erbauer
    zusammen: Er weiß, welche Baureihenfolge der Erbauer verträgt oder
    benötigt. Der Direktor entkoppelt somit den Konstruktionsablauf vom
    Klienten.

    \item[Produkt]

    Das Produkt repräsentiert das zu konstruierende komplexe Objekt.
    \footcite{wiki:erbauer}
  \end{description}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bEntwurfsErbauer}
%    \begin{macrocode}
\def\bEntwurfsErbauer{
  \bEntwurfsErbauerUml
  \bEntwurfsErbauerAkteure
}
%    \end{macrocode}
% \end{macro}

% \subsubsection{Fabrikmethode (Factory Method)}

% \begin{macro}{\bEntwurfsFabrikmethodeUml}
% Quelle nach der deutschen Wikipedia
% \begin{bBeispiel}
% \bEntwurfsFabrikmethodeUml
% \end{bBeispiel}
%    \begin{macrocode}
\def\bEntwurfsFabrikmethodeUml{
  \begin{tikzpicture}
    \umlsimpleclass[type=abstract]{Produkt}
    \umlsimpleclass[below=2cm of Produkt]{KonkretesProdukt}
    \umlinherit{KonkretesProdukt}{Produkt}

    \umlclass[type=abstract,right=4cm of Produkt]{Erzeuger}{}{
      \textit{erzeugeProdukt()}\\
    }
    \umlclass[below=1.2cm of Erzeuger]{KonkreterErzeuger}{}{
    erzeugeProdukt()
    }
    \umlinherit{KonkreterErzeuger}{Erzeuger}

    \umldep{KonkreterErzeuger}{KonkretesProdukt}
  \end{tikzpicture}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bEntwurfsFabrikmethodeAkteure}
% Quelle: deutsche Wikipedia
% \begin{bBeispiel}
% \bEntwurfsFabrikmethodeAkteure
% \end{bBeispiel}
%    \begin{macrocode}
\def\bEntwurfsFabrikmethodeAkteure{
  \begin{description}
    \item[Produkt]

    Das Produkt ist der Basistyp (Klasse oder Schnittstelle) für das
    zu erzeugende Produkt.

    \item[KonkretesProdukt]

    KonkretesProdukt implementiert die Produkt-Schnittstelle.

    \item[Erzeuger]

    Der Erzeuger deklariert die Fabrikmethode, um ein solches Produkt
    zu erzeugen und kann eine Default-Implementierung beinhalten.

    \item[KonkreterErzeuger]

    KonkreterErzeuger überschreibt die Fabrikmethode, um die ihm
    entsprechenden konkreten Produkte zu erzeugen (z. B. indem er den
    Konstruktor einer konkreten Produkt-Klasse aufruft).

    \footcite{wiki:fabrikmethode}
  \end{description}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bEntwurfsFabrikmethode}
%    \begin{macrocode}
\def\bEntwurfsFabrikmethode{
  \bEntwurfsFabrikmethodeUml
  \bEntwurfsFabrikmethodeAkteure
}
%    \end{macrocode}
% \end{macro}

% \subsubsection{Kompositum (Composite)}

% \begin{macro}{\bEntwurfsKompositumUml}
% \begin{bBeispiel}
% \bEntwurfsKompositumUml
% \end{bBeispiel}
%    \begin{macrocode}
\def\bEntwurfsKompositumUml{
  \begin{tikzpicture}
    \umlclass[x=2.5,y=3,type=abstract]{Komponente}{}{
      \textit{+agiere()}\\
      \textit{+fügeKindHinzu()}\\
      \textit{+entferneKind()}\\
      \textit{+gibKind()}
    }
    \umlclass[x=0]{Blatt}{}{+ agiere()}
    \umlclass[x=5]{Kompositum}{}{
      +agiere()\\
      +fügeKindHinzu()\\
      +entferneKind()\\
      +gibKind()
    }

    \umlVHVinherit{Kompositum}{Komponente}
    \umlVHVinherit{Blatt}{Komponente}
    \umlHVHaggreg[anchor1=east,arm1=1.5cm,arg1=eltern,mult1=1,arg2=kind,mult2=0..*,pos2=2.9,pos1=0.4]{Kompositum}{Komponente}
  \end{tikzpicture}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bEntwurfsFabrikmethode}
%    \begin{macrocode}
\def\bEntwurfsKompositum{
  \bEntwurfsKompositumUml
  \bEntwurfsKompositumAkteure
}
%    \end{macrocode}
% \end{macro}

% \subsubsection{Modell-Präsentation-Steuerung (Model-View-Controller)}

% \begin{macro}{\bEntwurfsModellPraesentationSteuerungUml}
% \begin{bBeispiel}
% \bEntwurfsModellPraesentationSteuerungUml
% \end{bBeispiel}
%    \begin{macrocode}
\def\bEntwurfsModellPraesentationSteuerungUml{
  \begin{tikzpicture}
    \umlclass[x=-4cm,type=role]{Präsentation}{}{+aktualisiere()}
    \umlclass[x=4cm,type=role]{Steuerung}{}{+führeAus()}
    \umlclass[y=-4cm,type=role]{Modell}{
      -zustand
    }{
      +aktualisiere()\\
      +frageAn()
    }

    \umluniassoc[arg2=-modell,mult2=1,mult1=*]{Präsentation}{Modell}
    \umluniassoc[arg2=-modell,mult2=1,mult1=*]{Steuerung}{Modell}
    \umlassoc[arg1=präsentation,mult1=1..*,arg2=steuerung,mult2=1..*]{Präsentation}{Steuerung}
  \end{tikzpicture}
  \bFussnoteUrl{http://www.cs.sjsu.edu/~pearce/modules/lectures/ood2/mvc/index.htm}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bEntwurfsModellPraesentationSteuerung}
%    \begin{macrocode}
\def\bEntwurfs{
  \bEntwurfsModellPraesentationSteuerungUml
  \bEntwurfsModellPraesentationSteuerungAkteure
}
%    \end{macrocode}
% \end{macro}

% \subsubsection{Stellvertreter (Proxy)}

% \begin{macro}{\bEntwurfsStellvertreterUml}
%    \begin{macrocode}
\def\bEntwurfsStellvertreterUml{
  \begin{tikzpicture}
    \umlsimpleclass[x=-1,y=2]{Klient}

    \umlclass[x=2,y=2]{Subjekt}{}{+ agiere()}
    \umlclass[x=0,y=-1]{KonkretesSubjekt}{}{+ agiere()}
    \umlclass[x=4,y=-1]{Stellvertreter}{}{+ agiere()}

    \umlVHVinherit{KonkretesSubjekt}{Subjekt}
    \umlVHVinherit{Stellvertreter}{Subjekt}
    \umluniassoc{Stellvertreter}{KonkretesSubjekt}
    \umluniassoc{Klient}{Subjekt}
  \end{tikzpicture}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bEntwurfsStellvertreterCode}
%    \begin{macrocode}
\def\bEntwurfsStellvertreterCode{
  \li@EntwurfsCode{stellvertreter}{Subjekt}
  \li@EntwurfsCode{stellvertreter}{KonkretesSubjekt}
  \li@EntwurfsCode{stellvertreter}{Stellvertreter}
  \li@EntwurfsCode{stellvertreter}{Klient}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bEntwurfsStellvertreter}
%    \begin{macrocode}
\def\bEntwurfsStellvertreter{
  \bEntwurfsStellvertreterUml
  \bEntwurfsStellvertreterCode
}
%    \end{macrocode}
% \end{macro}

% \subsubsection{Zustand (State)}

% \begin{macro}{\bEntwurfsZustandUml}
% Quelle: Englische Wikipedia, so ähnlich wie in GoF
% \begin{bBeispiel}
% \bEntwurfsZustandUml
% \end{bBeispiel}
%    \begin{macrocode}
\def\bEntwurfsZustandUml{
  \begin{tikzpicture}
    \umlclass[x=-1,y=3]{Kontext}{}{+beantrage()}
    \umlclass[x=3,y=3,type=interface]{Zustand}{}{+agiere()}
    \umlclass[x=1,y=0]{KonkreterZustandA}{}{+agiere()}
    \umlclass[x=5,y=0]{KonkreterZustandB}{}{+agiere()}

    \umlVHVreal{KonkreterZustandA}{Zustand}
    \umlVHVreal{KonkreterZustandB}{Zustand}

    \umlaggreg[arg=zustand,pos=0.4]{Kontext}{Zustand}

    \umlnote[x=-2.5,y=0,width=2.5cm]{Kontext}{zustand.agiere()}
  \end{tikzpicture}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bEntwurfsZustandAkteure}
% Quelle: Deutsche Wikipedia
% \begin{bBeispiel}
% \bEntwurfsZustandAkteure
% \end{bBeispiel}
%    \begin{macrocode}
\def\bEntwurfsZustandAkteure{
  \begin{description}
    \item[Kontext (Context)]

    definiert die clientseitige Schnittstelle und verwaltet die separaten
    Zustandsklassen.

    \item[State (Zustand)]

    definiert eine einheitliche Schnittstelle aller Zustandsobjekte und
    implementiert gegebenenfalls ein Standardverhalten.

    \item[KontreterZustand (ConcreteState)]

    implementiert das Verhalten, das mit dem Zustand des Kontextobjektes
    verbunden ist.
  \end{description}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bEntwurfsZustandCode}
%    \begin{macrocode}
\def\bEntwurfsZustandCode{
  \li@EntwurfsCode{zustand}{Kontext}
  \li@EntwurfsCode{zustand}{Zustand}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bEntwurfsZustand}
%    \begin{macrocode}
\def\bEntwurfsZustand{
  \bEntwurfsZustandUml
  \bEntwurfsZustandAkteure
  \bEntwurfsZustandCode
}
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}
