\NeedsTeXFormat{LaTeX2e}[1995/12/01]
\ProvidesPackage{bschlangaul-syntax}[2020/06/10 Ein Hüll-Paket um
`minted`, das sich um die Syntax-Hervorhebung des Java-Codes kümmert.]
\RequirePackage{xparse}
%    \end{macrocode}

% Um das Paket |minted| benutzen zu können, muss |pygmentize|
% installiert sein. Außerdem müssen die TeX-Dateien mit der
% Kommandozeilen-Option |--shell-escape| kompiliert werden.

% \liLets{
%   j = liJavaCode,
%   s = liSqlCode,
% }

%    \begin{macrocode}
\ExplSyntaxOn
%    \end{macrocode}

%    \begin{macrocode}
\directlua{
  syntax = require('bschlangaul-syntax')
  syntax.importiere_konfiguration('tex_repo_lokaler_pfad', '\LehramtInformatikRepository')
  syntax.importiere_konfiguration('github_domain', '\LehramtInformatikGithubDomain')
  syntax.importiere_konfiguration('github_raw_domain', '\LehramtInformatikGithubRawDomain')
  syntax.importiere_konfiguration('github_tex_repo', '\LehramtInformatikGithubTexRepo')
  syntax.importiere_konfiguration('github_code_repo', '\LehramtInformatikGithubCodeRepo')
  syntax.importiere_konfiguration('git_branch', '\LehramtInformatikGitBranch')
}
%    \end{macrocode}

%    \begin{macrocode}
\RequirePackage{hyperref}
%    \end{macrocode}

%    \begin{macrocode}
\RequirePackage{minted}
% pygmentize -L styles
\usemintedstyle{colorful}
%\BeforeBeginEnvironment{minted}{\begin{mdframed}}
%\AfterEndEnvironment{minted}{\end{mdframed}}
%\setminted{breaklines=true,linenos}
\setminted{
  breaklines=true,
  linenos=false,
  fontsize=\footnotesize,
}
%    \end{macrocode}

% \begin{environment}{liJavaAngabe}
% Eine Umgebung für Java-Code, ohne Zeilennummer und etwas eingerückt
% um den Java-Code in Angaben / Aufgabestellungen zu setzen.
%    \begin{macrocode}
\newminted[liJavaAngabe]{java}{
  xleftmargin=1cm
}
%    \end{macrocode}
% \end{environment}

% \begin{macro}{\liJavaCode}
% Im Zeilenfluss einen kurzen Java-Code-Ausschnitt setzen. Es werden automatische
% Zeilenumbrüche gemacht.
% \liLet{j}{liJavaCode}
%    \begin{macrocode}
\def\liJavaCode#1{
  \,
  \textcolor{blue}{
    \mintinline[
      fontsize=\normalsize,
      breakanywhere % https://github.com/gpoore/minted/issues/31#issuecomment-458640242
    ]{java}|#1|
  }
  \,
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liLatexCode}
% Im Zeilenfluss einen kurzen \LaTeX-Code-Ausschnitt setzen.
%    \begin{macrocode}
\def\liLatexCode#1{\mintinline{latex}|#1|}
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}
\def\li@GithubLink#1#2{
  \begin{flushright}
    \tiny
    Code-Beispiel~auf~Github~ansehen:~
    \href{#1}{\nolinkurl{#2}}
  \end{flushright}
}
%    \end{macrocode}

% \begin{macro}{\liJavaDatei}
% Eine komplette Java-Datei einbinden, die
% Verzeichnis |./Code/src/main/java/org/bschlangaul| liegt.
%    \begin{macrocode}
\NewDocumentCommand{\liJavaDatei}{ O{firstline=3} m }{
  \inputminted[#1]{java}{
    \directlua{
      syntax.drucke_absoluten_pfad('#2', false)
    }
  }
  \li@GithubLink
    {\directlua{syntax.drucke_github_url('#2', false)}}
    {\directlua{syntax.drucke_relativen_repo_pfad('#2', false)}}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liJavaTestDatei}
% Eine komplette Java-Test-Datei einbinden,
% die Verzeichnis |./Code/src/test/java/org/bschlangaul| liegt.
%    \begin{macrocode}
\NewDocumentCommand{\liJavaTestDatei}{ O{firstline=3} m }{
  \inputminted[#1]{java}{
    \directlua{
      syntax.drucke_absoluten_pfad('#2', true)
    }
  }
  \li@GithubLink
    {\directlua{syntax.drucke_github_url('#2', true)}}
    {\directlua{syntax.drucke_relativen_repo_pfad('#2', true)}}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liJavaExamen}
% |\liJavaExamen{66116}{2015}{03}{Kunde}|
% Regulärer Ausdruck zum Konvertieren:
% |\\liJavaDatei(\[.*\])?\{.*examen_(\d{5})_(\d{4})_(\d{2})/(.*)\}|
% |\\liJavaExamen$1{$2}{$3}{$4}{$5}|
%    \begin{macrocode}
\NewDocumentCommand{\liJavaExamen}{ O{firstline=3} m m m m }{
  \inputminted[#1]{java}{
    \directlua{
      syntax.drucke_absoluten_examens_pfad('#2', '#3', '#4', '#5')
    }
  }

  \li@GithubLink
  {\directlua{syntax.drucke_github_examens_url('#2', '#3', '#4', '#5')}}
  {\directlua{syntax.drucke_relativen_examens_repo_pfad('#2', '#3', '#4', '#5')}}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liAssemblerCode}
%    \begin{macrocode}
\def\liAssemblerCode#1{\mintinline{asm}|#1|}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liAssemblerDatei}
% |\liAssemblerDatei{relativer-pfad}|: Relativer Pfad zu einer
% Assembler-Datei.
%    \begin{macrocode}
\NewDocumentCommand{\liAssemblerDatei}{ m }{
  \inputminted{asm}{#1}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liMinispracheDatei}
% |\liMinispracheDatei{relativer-pfad}|: Relativer Pfad zu einer
% Minisprachen-Datei (Hochsprache für die Minimaschine von Albert
% Wiedemann).
%    \begin{macrocode}
\NewDocumentCommand{\liMinispracheDatei}{ m }{
  \inputminted{componentpascal}{#1}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liHaskellCode}
% |\liHaskellCode{haskell}|: Zum Setzen von Haskell-Code.
%    \begin{macrocode}
\def\liHaskellCode#1{\mintinline{haskell}|#1|}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liHaskellDatei}
% |\liHaskellDatei{relativer-pfad}|: Relativer Pfad zu einer
% Haskell-Datei.
%    \begin{macrocode}
\NewDocumentCommand{\liHaskellDatei}{ m }{
  \inputminted{haskell}{#1}
}
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}
\ExplSyntaxOff
%    \end{macrocode}

% \begin{macro}{\liSqlCode}
% |\liHaskellCode{sql}|: Zum Setzen von SQL-Code.
% \liLet{s}{liSqlCode}
%    \begin{macrocode}
\def\liSqlCode#1{\mintinline{sql}|#1|}
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}
