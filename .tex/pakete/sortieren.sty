\NeedsTeXFormat{LaTeX2e}[1995/12/01]
\ProvidesPackage{bschlangaul-sortieren}[2020/06/10 Schaubilder
für händisches Sortieren bzw. einen Schreibtischlauf setzen]
%    \end{macrocode}

% \begin{verbatim}
% \tikz[
%   rectangle split parts=5,
% ]{
%   \node[li sortierung zahlenreihe] (reihe) {\nodepart{one} 2 \nodepart{two} 1 \nodepart{three} 3};
%   \liSortierPfeil{one}{two}
%   \liSortierPfeil{two}{three}
%   \liSortierMarkierung{two split south}{three split north}
%   \liSortierPfeilUnten{three}{one}
% }
% \end{verbatim}

% \begin{liBeispiel}
% \tikz[
%   rectangle split parts=5,
% ]{
%   \node[li sortierung zahlenreihe] (reihe) {\nodepart{one} 2 \nodepart{two} 1 \nodepart{three} 3};
%   \liSortierPfeil{one}{two}
%   \liSortierPfeil{two}{three}
%   \liSortierMarkierung{two split south}{three split north}
%   \liSortierPfeilUnten{three}{one}
% }
% \end{liBeispiel}

%    \begin{macrocode}
\RequirePackage{tikz}
\usetikzlibrary{shapes.multipart,positioning}
%    \end{macrocode}

% \begin{macro}{\liVertauschen}
% |\liVertauschen{1 2 >4 <3 5}|: Setze ein Schaubild mit Hilfe
% von TikZ. |<| und |>| werden dazu verwendet, um den Vertauschprozess
% zu visualisieren.
%    \begin{macrocode}
\def\liVertauschen#1{
  \directlua{
    local sortieren = require('bschlangaul-sortieren')
    sortieren('#1')
  }
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liSortierPfeil}
%    \begin{macrocode}
\def\liSortierPfeil#1#2{
  \draw[-latex] ([xshift=1mm]reihe.#1 north) -- ++(0,0.25) -| ([xshift=-1mm]reihe.#2 north);
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liSortierPfeilUnten}
%    \begin{macrocode}
\def\liSortierPfeilUnten#1#2{
  \draw[-latex] ([xshift=1mm]reihe.#1 south) -- ++(0,-0.25) -| ([xshift=-1mm]reihe.#2 south);
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liSortierMarkierung}
%    \begin{macrocode}
\def\liSortierMarkierung#1#2{\node[
  draw,
  very thick,
  fit=(reihe.#1) (reihe.#2),
  inner sep=0pt
] {};
}
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}
\tikzset{
  li sortierung zahlenreihe/.style={
    draw,
    thin,
    font=\large,
    rectangle split horizontal,
    rectangle split,
  }
}
%    \end{macrocode}

%    \begin{macrocode}
% https://tex.stackexchange.com/a/140895
\RequirePackage{forest,xstring}
\usetikzlibrary{calc}

\makeatletter
\pgfmathdeclarefunction{strrepeat}{2}{%
  \begingroup\pgfmathint{#2}\pgfmath@count\pgfmathresult
    \let\pgfmathresult\pgfutil@empty
    \pgfutil@loop\ifnum\pgfmath@count>0\relax
      \expandafter\def\expandafter\pgfmathresult\expandafter{\pgfmathresult#1}%
      \advance\pgfmath@count-1\relax
    \pgfutil@repeat\pgfmath@smuggleone\pgfmathresult\endgroup}
\makeatother

\def\myNodes{}

\ExplSyntaxOn
\newcommand*\sortList[1]{%
  \clist_sort:Nn#1{\int_compare:nNnTF{##1}>{##2}\sort_return_swapped:\sort_return_same:}}
\ExplSyntaxOff

\forestset{
  sort/.code={%
    \pgfmathparse{level()>\forestSortLevel}%
    \ifnum\pgfmathresult=0
      \StrSubstitute{\forestov{content}}{ }{,}[\myList]%
      \sortList\myList
      \StrSubstitute{\myList}{,}{ }[\myList]%
      \pgfmathparse{strrepeat("1",level())}%
      \xappto\myNodes{\noexpand\node at ($(\forestov{name}|-m)!-1!(\forestov{name})$)
        (m\forestov{name}) {\myList}}%
      \pgfmathparse{level()==\forestSortLevel}%
      \ifnum\pgfmathresult=1
        \forestOget{\forestov{@first}}{name}\forestFirst
        \forestOget{\forestov{@last}}{name}\forestLast
        \xappto\myNodes{{[<-]edge (\forestOv{\forestov{@first}}{name})
          \ifx\forestFirst\forestLast\else edge (\forestOv{\forestov{@last}}{name})\fi}}%
      \fi
      \ifnum\forestov{@parent}=0\else
        \xappto\myNodes{edge (m\forestOv{\forestov{@parent}}{name})}%
      \fi
      \gappto\myNodes{;}%
    \fi}}

\forestset{sort level/.code=%
  \pgfmathparse{#1}\let\forestSortLevel\pgfmathresult
  \pgfmathparse{strrepeat("1",\forestSortLevel+1)}\let\forestOnes\pgfmathresult}
%    \end{macrocode}

%    \begin{macrocode}
