\NeedsTeXFormat{LaTeX2e}[1995/12/01]
\ProvidesPackage{bschlangaul-formale-sprachen}[2021/02/21 Hilfsmakros
zum Setzen von mathematischen Formeln bei dem Thema Formale Sprachen]
%    \end{macrocode}

%    \begin{macrocode}
\directlua{
  formale_sprachen = require('bschlangaul-formale-sprachen')
}
%    \end{macrocode}

%    \begin{macrocode}
\RequirePackage{hyperref}
%    \end{macrocode}

%    \begin{macrocode}
\bLadePakete{mathe,typographie}
%    \end{macrocode}

% \begin{macro}{\bMenge}
% |$\bMenge{a, b, c}$|: $\bMenge{a, b, c}$
% \bMakroFaulenzer{m}{liMenge}
%    \begin{macrocode}
\def\bMengeOhneMathe#1{\{ #1 \}}
\def\bMenge#1{%
\ifmmode%
\bMengeOhneMathe{#1}%
\else%
$\bMengeOhneMathe{#1}$%
\fi%
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bEpsilon}
% |\bEpsilon|: \bEpsilon
%
% \bMakroFaulenzer{e}{liEpsilon}
%    \begin{macrocode}
\def\bEpsilon{$\varepsilon$}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bPotenzmenge}
% Umgeben mit geschweiften Klammern in einer Mathematik-Umgebung
%    \begin{macrocode}
\def\erzeuge@tiefgestellt#1{\directlua{formale_sprachen.erzeuge_tiefgestellt('#1')}}
\def\bPotenzmengeOhneMathe#1{\{ \erzeuge@tiefgestellt{#1} \}}
\def\bPotenzmenge#1{$\bPotenzmengeOhneMathe{#1}$}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bZustandsmenge}
% |\bZustandsmenge{z1, z2}|: |$\{ z_1, z_2 \}$|
%    \begin{macrocode}
\let\bZustandsmengeOhneMathe=\bPotenzmengeOhneMathe
\let\bZustandsmenge=\bPotenzmenge
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bUeberfuehrungsFunktion}
% |\bUeberfuehrungsFunktion{z0, a}|: |$\delta(z_0, a)$|
% \bMakroFaulenzer{d}{liUeberfuehrungsFunktion}
%    \begin{macrocode}
\def\bUeberfuehrungsFunktionOhneMathe#1{\delta(\erzeuge@tiefgestellt{#1})}
\def\bUeberfuehrungsFunktion#1{
\ifmmode
  \bUeberfuehrungsFunktionOhneMathe{#1}
\else
  $\bUeberfuehrungsFunktionOhneMathe{#1}$
\fi
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bAlphabet}
% |\bAlphabet{a, b}| (|$\Sigma = \{ a, b \}$|): \bAlphabet{a, b}
%    \begin{macrocode}
\def\bAlphabet#1{$\Sigma = \{ #1 \}$}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bBandAlphabet}
% |\bBandAlphabet{\bTuringLeerzeichen}|: \bBandAlphabet{\bTuringLeerzeichen}
%    \begin{macrocode}
\def\bBandAlphabet#1{$\Gamma = \Sigma \cup \{ #1 \}$}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bZustandsBuchstabe}
%    \begin{macrocode}
\def\bZustandsBuchstabe{z}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bZustandsBuchstabeGross}
%    \begin{macrocode}
\def\bZustandsBuchstabeGross{Z}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bZustandsmengeNr}
%    \begin{macrocode}
\def\zustandsnamens@liste#1#2{
  $
    \{
      \directlua{formale_sprachen.erzeuge_zustandsnamens_liste('#1', '#2')}
    \}
  $
}
\def\bZustandsmengeNr#1{\zustandsnamens@liste{\bZustandsBuchstabe}{#1}}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bZustandsmengeNrGross}
%    \begin{macrocode}
\def\bZustandsmengeNrGross#1{\zustandsnamens@liste{\bZustandsBuchstabeGross}{#1}}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bZustandsname}
% |\bZustandsname{1}|: |$z_1$|
%    \begin{macrocode}
\def\bZustandsname#1{$\bZustandsBuchstabe_#1$}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bZustandsnameGross}
% |\bZustandsnameGross{1}|: |$Z_1$|
%    \begin{macrocode}
\def\bZustandsnameGross#1{$\bZustandsBuchstabeGross_#1$}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bAbleitung}
% |\bAbleitung{S -> aB -> ab}|: \bAbleitung{S -> aB -> ab}
%    \begin{macrocode}
\def\bAbleitung#1{$\directlua{formale_sprachen.formatiere_ableitung('#1')}$}
%    \end{macrocode}
% \end{macro}

% \begin{environment}{bProduktionsRegeln}
% \begin{verbatim}
% \begin{bProduktionsRegeln}[P_1]
%   S -> S A B | EPSILON,
%   B A -> A B,
%   A A -> a a,
%   B B -> b b
% \end{bProduktionsRegeln}
% \end{verbatim}
%
%    \begin{macrocode}
\NewDocumentEnvironment { bProduktionsRegeln }
{ O{P} +b }
{
  \bGeschweifteKlammern{#1}
  {
    \begin{align*}
    \directlua{formale_sprachen.produktions_regeln('#2')}
    \end{align*}
  }{-0.2cm}{-1.5cm}
} {}
%    \end{macrocode}
% \end{environment}

% \begin{macro}{\bProduktionen}
% |\bProduktionen{S -> A, A -> a}|: \bProduktionen{S -> A, A -> a}
%    \begin{macrocode}
\def\bProduktionen#1{
  \bMenge{\directlua{formale_sprachen.produktions_regeln('#1', true)}}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bZustandsnameTiefgestellt}
% Automatisch tiefgestellte Nummerierung |\z1|
% \bMakroFaulenzer{z}{liZustandsnameTiefgestellt}
%    \begin{macrocode}
\def\bZustandsnameTiefgestellt#1{
  \ifmmode
    \bZustandsBuchstabe\sb{#1}
  \else
    $\bZustandsBuchstabe\sb{#1}$
  \fi
}
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}
\ExplSyntaxOn
%    \end{macrocode}

% \begin{macro}{\bAusdruck}
% |\bAusdruck[L_2]{a_1,a_2,\dots,a_n}{n \in N}|: \bAusdruck[L_2]{a_1,a_2,\dots,a_n}{n \in N}
%
% Ohne „=“: |\bAusdruck[]{x}{y}|: \bAusdruck[]{x}{y}
%
% Regulärer Ausdruck zum Konvertieren:
% \begin{verbatim}
% \$(.*) += +\\\{ *(.*?)( *\\, *)?\|( *\\, *)?(.*?) *\\\}\$
% \\bAusdruck[$1]{$2}{$5}
% \end{verbatim}
%    \begin{macrocode}
\NewDocumentCommand{ \bAusdruck } { O{L} m m } {
  $
   \tl_if_empty:nTF {#1} {} {#1 =}
   \{
    \, #2 \,
    |
    \, #3 \,
  \}$
}
\ExplSyntaxOff
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bFlaci}
% Link zur flaci.com Website: |\bFlaci{Grxk1oczg}|: \bFlaci{Grxk1oczg}
%    \begin{macrocode}
\def\bFlaci#1{%
  \par
  {%
    \scriptsize
    Der Automat auf flaci.com (FLACI: Formale Sprachen, abstrakte
    Automaten, Compiler und Interpreter) Ein Projekt der Hochschule
    Zittau/Görlitz und der Pädagogischen Hochschule Schwyz:
    \href{https://flaci.com/#1}{flaci.com/#1}%
  }%
  \par
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\bGrammatik}
% \cmd{\bGrammatik}\oarg{grammtik-name}\marg{variablen=V,alphabet=$\Sigma$,produktionen=P,start=S}
%
% |\bGrammatik{variablen={}, alphabet={}}|
%
% \begin{itemize}
% \item |\bGrammatik{}|: \bGrammatik{}
% \item |\bGrammatik[G_1]{}|: \bGrammatik[G_1]{}
% \item |\bGrammatik{variablen={S,A,B}}|: \bGrammatik{variablen={S,A,B}}
% \item |\bGrammatik{alphabet={a,b}}|: \bGrammatik{alphabet={a,b}}
% \item |\bGrammatik{start=X}|: \bGrammatik{start=X}
% \end{itemize}
%
%    \begin{macrocode}
\ExplSyntaxOn
\NewDocumentCommand {\bGrammatik} { O{G} m } {
  \tl_set:Nn \l_variablen_tl {V}
  \tl_set:Nn \l_alphabet_tl {\Sigma}
  \tl_set:Nn \l_produktionen_tl {P}
  \tl_set:Nn \l_start_tl {S}

  \keys_define:nn { grammatik } {
    variablen .code:n = {\tl_set:Nn \l_variablen_tl {\bMenge{##1}}},
    alphabet .code:n = {\tl_set:Nn \l_alphabet_tl {\bMenge{##1}}},
    produktionen .code:n = {\tl_set:Nn \l_produktionen_tl {\bProduktionen{##1}}},
    start .code:n = {\tl_set:Nn \l_start_tl {##1}},
  }

  \keys_set:nn { grammatik } { #2 }

  $#1 = (
    \l_variablen_tl,
    \l_alphabet_tl,
    \l_produktionen_tl,
    \l_start_tl
  )$
}
\ExplSyntaxOff
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}
