\NeedsTeXFormat{LaTeX2e}[1995/12/01]
\ProvidesPackage{bschlangaul-formale-sprachen}[2021/02/21 Hilfsmakros
zum Setzen von mathematischen Formeln bei dem Thema Formale Sprachen]
%    \end{macrocode}

%    \begin{macrocode}
\directlua{
  formale_sprachen = require('bschlangaul-formale-sprachen')
}
%    \end{macrocode}

%    \begin{macrocode}
\RequirePackage{hyperref}
%    \end{macrocode}

%    \begin{macrocode}
\liLadePakete{mathe,typographie}
%    \end{macrocode}

% \begin{macro}{\liMenge}
% |$\liMenge{a, b, c}$|: $\liMenge{a, b, c}$
% \liLet{m}{liMenge}
%    \begin{macrocode}
\def\liMengeOhneMathe#1{\{ #1 \}}
\def\liMenge#1{%
\ifmmode%
\liMengeOhneMathe{#1}%
\else%
$\liMengeOhneMathe{#1}$%
\fi%
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liEpsilon}
% |\liEpsilon|: \liEpsilon
%
% \liLet{e}{liEpsilon}
%    \begin{macrocode}
\def\liEpsilon{$\varepsilon$}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liPotenzmenge}
% Umgeben mit geschweiften Klammern in einer Mathematik-Umgebung
%    \begin{macrocode}
\def\erzeuge@tiefgestellt#1{\directlua{formale_sprachen.erzeuge_tiefgestellt('#1')}}
\def\liPotenzmengeOhneMathe#1{\{ \erzeuge@tiefgestellt{#1} \}}
\def\liPotenzmenge#1{$\liPotenzmengeOhneMathe{#1}$}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liZustandsmenge}
% |\liZustandsmenge{z1, z2}|: |$\{ z_1, z_2 \}$|
%    \begin{macrocode}
\let\liZustandsmengeOhneMathe=\liPotenzmengeOhneMathe
\let\liZustandsmenge=\liPotenzmenge
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liUeberfuehrungsFunktion}
% |\liUeberfuehrungsFunktion{z0, a}|: |$\delta(z_0, a)$|
% \liLet{d}{liUeberfuehrungsFunktion}
%    \begin{macrocode}
\def\liUeberfuehrungsFunktionOhneMathe#1{\delta(\erzeuge@tiefgestellt{#1})}
\def\liUeberfuehrungsFunktion#1{
\ifmmode
  \liUeberfuehrungsFunktionOhneMathe{#1}
\else
  $\liUeberfuehrungsFunktionOhneMathe{#1}$
\fi
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liAlphabet}
% |\liAlphabet{a, b}| (|$\Sigma = \{ a, b \}$|): \liAlphabet{a, b}
%    \begin{macrocode}
\def\liAlphabet#1{$\Sigma = \{ #1 \}$}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liBandAlphabet}
% |\liBandAlphabet{\liTuringLeerzeichen}|: \liBandAlphabet{\liTuringLeerzeichen}
%    \begin{macrocode}
\def\liBandAlphabet#1{$\Gamma = \Sigma \cup \{ #1 \}$}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liZustandsBuchstabe}
%    \begin{macrocode}
\def\liZustandsBuchstabe{z}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liZustandsBuchstabeGross}
%    \begin{macrocode}
\def\liZustandsBuchstabeGross{Z}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liZustandsmengeNr}
%    \begin{macrocode}
\def\zustandsnamens@liste#1#2{
  $
    \{
      \directlua{formale_sprachen.erzeuge_zustandsnamens_liste('#1', '#2')}
    \}
  $
}
\def\liZustandsmengeNr#1{\zustandsnamens@liste{\liZustandsBuchstabe}{#1}}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liZustandsmengeNrGross}
%    \begin{macrocode}
\def\liZustandsmengeNrGross#1{\zustandsnamens@liste{\liZustandsBuchstabeGross}{#1}}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liZustandsname}
% |\liZustandsname{1}|: |$z_1$|
%    \begin{macrocode}
\def\liZustandsname#1{$\liZustandsBuchstabe_#1$}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liZustandsnameGross}
% |\liZustandsnameGross{1}|: |$Z_1$|
%    \begin{macrocode}
\def\liZustandsnameGross#1{$\liZustandsBuchstabeGross_#1$}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liAbleitung}
% |\liAbleitung{S -> aB -> ab}|: \liAbleitung{S -> aB -> ab}
%    \begin{macrocode}
\def\liAbleitung#1{$\directlua{formale_sprachen.formatiere_ableitung('#1')}$}
%    \end{macrocode}
% \end{macro}

% \begin{environment}{liProduktionsRegeln}
% \begin{verbatim}
% \begin{liProduktionsRegeln}[P_1]
%   S -> S A B | EPSILON,
%   B A -> A B,
%   A A -> a a,
%   B B -> b b
% \end{liProduktionsRegeln}
% \end{verbatim}
%
%    \begin{macrocode}
\NewDocumentEnvironment { liProduktionsRegeln }
{ O{P} +b }
{
  \liGeschweifteKlammern{#1}
  {
    \begin{align*}
    \directlua{formale_sprachen.produktions_regeln('#2')}
    \end{align*}
  }{-0.2cm}{-1.5cm}
} {}
%    \end{macrocode}
% \end{environment}

% \begin{macro}{\liProduktionen}
% |\liProduktionen{S -> A, A -> a}|: \liProduktionen{S -> A, A -> a}
%    \begin{macrocode}
\def\liProduktionen#1{
  \liMenge{\directlua{formale_sprachen.produktions_regeln('#1', true)}}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liZustandsnameTiefgestellt}
% Automatisch tiefgestellte Nummerierung |\z1|
% \liLet{z}{liZustandsnameTiefgestellt}
%    \begin{macrocode}
\def\liZustandsnameTiefgestellt#1{
  \ifmmode
    \liZustandsBuchstabe\sb{#1}
  \else
    $\liZustandsBuchstabe\sb{#1}$
  \fi
}
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}
\ExplSyntaxOn
%    \end{macrocode}

% \begin{macro}{\liAusdruck}
% |\liAusdruck[L_2]{a_1,a_2,\dots,a_n}{n \in N}|: \liAusdruck[L_2]{a_1,a_2,\dots,a_n}{n \in N}
%
% Ohne „=“: |\liAusdruck[]{x}{y}|: \liAusdruck[]{x}{y}
%
% Regulärer Ausdruck zum Konvertieren:
% \begin{verbatim}
% \$(.*) += +\\\{ *(.*?)( *\\, *)?\|( *\\, *)?(.*?) *\\\}\$
% \\liAusdruck[$1]{$2}{$5}
% \end{verbatim}
%    \begin{macrocode}
\NewDocumentCommand{ \liAusdruck } { O{L} m m } {
  $
   \tl_if_empty:nTF {#1} {} {#1 =}
   \{
    \, #2 \,
    |
    \, #3 \,
  \}$
}
\ExplSyntaxOff
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liFlaci}
% Link zur flaci.com Website: |\liFlaci{Grxk1oczg}|: \liFlaci{Grxk1oczg}
%    \begin{macrocode}
\def\liFlaci#1{%
  \par
  {%
    \scriptsize
    Der Automat auf flaci.com (FLACI: Formale Sprachen, abstrakte
    Automaten, Compiler und Interpreter) Ein Projekt der Hochschule
    Zittau/Görlitz und der Pädagogischen Hochschule Schwyz:
    \href{https://flaci.com/#1}{flaci.com/#1}%
  }%
  \par
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\liGrammatik}
% \cmd{\liGrammatik}\oarg{grammtik-name}\marg{variablen=V,alphabet=$\Sigma$,produktionen=P,start=S}
%
% |\liGrammatik{variablen={}, alphabet={}}|
%
% \begin{itemize}
% \item |\liGrammatik{}|: \liGrammatik{}
% \item |\liGrammatik[G_1]{}|: \liGrammatik[G_1]{}
% \item |\liGrammatik{variablen={S,A,B}}|: \liGrammatik{variablen={S,A,B}}
% \item |\liGrammatik{alphabet={a,b}}|: \liGrammatik{alphabet={a,b}}
% \item |\liGrammatik{start=X}|: \liGrammatik{start=X}
% \end{itemize}
%
%    \begin{macrocode}
\ExplSyntaxOn
\NewDocumentCommand {\liGrammatik} { O{G} m } {
  \tl_set:Nn \l_variablen_tl {V}
  \tl_set:Nn \l_alphabet_tl {\Sigma}
  \tl_set:Nn \l_produktionen_tl {P}
  \tl_set:Nn \l_start_tl {S}

  \keys_define:nn { grammatik } {
    variablen .code:n = {\tl_set:Nn \l_variablen_tl {\liMenge{##1}}},
    alphabet .code:n = {\tl_set:Nn \l_alphabet_tl {\liMenge{##1}}},
    produktionen .code:n = {\tl_set:Nn \l_produktionen_tl {\liProduktionen{##1}}},
    start .code:n = {\tl_set:Nn \l_start_tl {##1}},
  }

  \keys_set:nn { grammatik } { #2 }

  $#1 = (
    \l_variablen_tl,
    \l_alphabet_tl,
    \l_produktionen_tl,
    \l_start_tl
  )$
}
\ExplSyntaxOff
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}
