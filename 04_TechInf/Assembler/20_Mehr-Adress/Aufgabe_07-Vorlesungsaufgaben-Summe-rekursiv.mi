Prog:           SEG

-- Initialisierung
                MOVE W I H'10000', SP    -- Stack init
                JUMP start    -- Variablendefinition ueberspringen
n:              DD W 4

-- Programmvorlauf
start:          MOVE W I -1, -!SP  -- Platz fuer Rueckgabewert auf dem Stack machen
                MOVE W n, -!SP   -- Startwert auf den Stack
                CALL summe   -- summe(n) aufrufen
                ADD W I 4, SP   -- Stack bereinigen
                MOVE W !SP+, R5   -- RÃ¼ckgabe in Register R5
                JUMP halte

-- summe von n..1
summe:          PUSHR    -- interne Register sichern
                MOVE W 64+!SP, R0
                CMP W R0, I 1
                JEQ bottom
                MOVE W I -1, -!SP  -- Platz fuer Rueckgabewert auf dem Stack machen
                SUB W I 1, R0, -!SP  -- n-1 auf den Stack
                CALL summe   -- summe(n) aufrufen
                ADD W I 4, SP   -- Stack bereinigen
                ADD W !SP+, R0
                JUMP fertig
bottom:         MOVE W I 1, R0

fertig:         MOVE W R0, 68+!SP
                POPR    -- Register wieder herstellen
                RET    -- zurueck zum Aufruf springen

halte:          HALT
                END
